name: Pull Request

concurrency:
  group: ${{ github.workflow }}

on:
  push:
    branches: [ yakov/selenium-test-content-update ]

jobs:
  
  build:
    runs-on: ubuntu-latest
    steps:
      - name: "Checkout branch"
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Download sapmachine JDK 17
        run: |
          download_url="https://github.com/SAP/SapMachine/releases/download/sapmachine-17.0.2/sapmachine-jdk-17.0.2_linux-x64_bin.tar.gz"
          wget -O "${RUNNER_TEMP}/sapmachine-jdk-17.tar.gz" "${download_url}"

      - name: Setup sapmachine JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'jdkfile'
          jdkFile: ${{ runner.temp }}/sapmachine-jdk-17.tar.gz
          java-version: '17.0.2'
          architecture: x64
      - name: Cache SonarCloud packages
        uses: actions/cache@v1
        if: ${{ env.SONAR_TOKEN != '' }}
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Maven Build and Analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          [ "$SONAR_TOKEN" ] && SONAR_ARG="-B sonar:sonar -Dsonar.projectKey=SAP_xsk"
          mvn clean install $SONAR_ARG
      - name: Docker Build XSK
        run: |
          cd releng/server
          cp -r "${JAVA_HOME}" jdk
          docker build -t dirigiblelabs/xsk --build-arg JDK_TYPE=external-jdk --build-arg JDK_HOME=jdk .
          cd ../../
      - name: Docker Build XSK for SAP Cloud Foundry
        run: |
          cd releng/sap-cf
          cp -r "${JAVA_HOME}" jdk
          docker build -t dirigiblelabs/xsk-cf --build-arg JDK_TYPE=external-jdk --build-arg JDK_HOME=jdk .
          cd ../../
      - name: Docker Build XSK for SAP Kyma
        run: |
          cd releng/sap-kyma
          cp -r "${JAVA_HOME}" jdk
          docker build -t dirigiblelabs/xsk-kyma --build-arg JDK_TYPE=external-jdk --build-arg JDK_HOME=jdk .
          cd ../../
      - name: Push XSK for SAP Kyma Runtime
        run: |
          cd releng/sap-kyma-runtime
          docker build -t dirigiblelabs/xsk-kyma-runtime-base -f Dockerfile-base .
          docker build -t dirigiblelabs/xsk-kyma-runtime .
          docker build -t dirigiblelabs/xsk-kyma-runtime-distro -f Dockerfile-distro .
          cd ../../
      - uses: buildpacks/github-actions/setup-pack@v4.1.0
      - name: XSK Buildpack
        run: |
          cd releng/buildpacks/xsk/
          docker build -t dirigiblelabs/buildpacks-stack-base-xsk . --target base
          docker build -t dirigiblelabs/buildpacks-stack-run-xsk . --target run
          docker build -t dirigiblelabs/buildpacks-stack-build-xsk . --target build
          cd buildpack/
          find *.toml -type f -exec sed -i ''s/#{XSKVersion}#/latest/g'' {} \;
          pack buildpack package dirigiblelabs/buildpacks-xsk --config ./package.toml
          pack builder create dirigiblelabs/buildpacks-builder-xsk --config ./builder.toml
          cd ../../../../
      - name: XSK Kyma Buildpack
        run: |
          cd releng/buildpacks/xsk-kyma/
          docker build -t dirigiblelabs/buildpacks-stack-base-xsk-kyma . --target base
          docker build -t dirigiblelabs/buildpacks-stack-run-xsk-kyma . --target run
          docker build -t dirigiblelabs/buildpacks-stack-build-xsk-kyma . --target build
          cd buildpack/
          find *.toml -type f -exec sed -i ''s/#{XSKVersion}#/latest/g'' {} \;
          pack buildpack package dirigiblelabs/buildpacks-xsk-kyma --config ./package.toml
          pack builder create dirigiblelabs/buildpacks-builder-xsk-kyma --config ./builder.toml
          cd ../../../../
      - name: XSK Kyma Runtime Buildpack
        run: |
          cd releng/buildpacks/xsk-kyma-runtime/
          docker build -t dirigiblelabs/buildpacks-stack-base-xsk-kyma-runtime . --target base
          docker build -t dirigiblelabs/buildpacks-stack-run-xsk-kyma-runtime . --target run
          docker build -t dirigiblelabs/buildpacks-stack-build-xsk-kyma-runtime . --target build
          cd buildpack/
          find *.toml -type f -exec sed -i ''s/#{XSKVersion}#/latest/g'' {} \;
          pack buildpack package dirigiblelabs/buildpacks-xsk-kyma-runtime --config ./package.toml
          pack builder create dirigiblelabs/buildpacks-builder-xsk-kyma-runtime --config ./builder.toml
          cd ../../../../
      - name: XSK Cloud Foundry Buildpack
        run: |
          cd releng/buildpacks/xsk-cf/
          docker build -t dirigiblelabs/buildpacks-stack-base-xsk-cf . --target base
          docker build -t dirigiblelabs/buildpacks-stack-run-xsk-cf . --target run
          docker build -t dirigiblelabs/buildpacks-stack-build-xsk-cf . --target build
          cd buildpack/
          find *.toml -type f -exec sed -i ''s/#{XSKVersion}#/latest/g'' {} \;
          pack buildpack package dirigiblelabs/buildpacks-xsk-cf --config ./package.toml
          pack builder create dirigiblelabs/buildpacks-builder-xsk-cf --config ./builder.toml
          cd ../../../../

      # Run XSK
      - name: Docker Run XSK
        run: docker run -d --name xsk-server -p 8080:8080 dirigiblelabs/xsk

      # Setup Google Chrome
      - name: Setup Google Chrome
        uses: browser-actions/setup-chrome@latest
      - name: Verify Google Chrome
        run: chrome --version

      # Setup Firefox
      - name: Setup Firefox
        uses: browser-actions/setup-firefox@latest
      - name: Verify Firefox
        run: firefox --version

      # Wait for XSK Service Container to Startup
      - name: Wait XSK Startup
        uses: nick-invision/retry@v2
        with:
          timeout_seconds: 15
          max_attempts: 10
          warning_on_retry: false
          command: curl -m 5 --silent --fail --request GET http://127.0.0.1:8080/services/v4/healthcheck | jq --exit-status -n 'inputs | if has("status") then .status=="Ready" else false end' > /dev/null

      # Run Selenium tests on XSK
      - name: Run Integration & Selenium Tests
        working-directory: ./integration-tests
        run: mvn clean test -P itests -fae -Dhana.url="${{secrets.ITESTS_HANA_URL}}" -Dhana.username="${{secrets.ITESTS_HANA_USERNAME}}" -Dhana.password="${{secrets.ITESTS_HANA_PASSWORD}}"
        env:
          ITESTS_SELENIUM_MODE: 'headless'
          ITESTS_SELENIUM_NEO_REGION: ${{ secrets.ITESTS_SELENIUM_NEO_REGION }}
          ITESTS_SELENIUM_NEO_SUBACCOUNT: ${{ secrets.ITESTS_SELENIUM_NEO_SUBACCOUNT }}
          ITESTS_SELENIUM_NEO_USERNAME: ${{ secrets.ITESTS_SELENIUM_NEO_USERNAME }}
          ITESTS_SELENIUM_NEO_PASSWORD: ${{ secrets.ITESTS_SELENIUM_NEO_PASSWORD }}
          ITESTS_SELENIUM_HANA_DB_SCHEMA: ${{ secrets.ITESTS_SELENIUM_HANA_DB_SCHEMA }}
          ITESTS_SELENIUM_HANA_DB_SCHEMA_2: ${{ secrets.ITESTS_SELENIUM_HANA_DB_SCHEMA_2 }}
          ITESTS_SELENIUM_HANA_DB_USERNAME: ${{ secrets.ITESTS_SELENIUM_HANA_DB_USERNAME }}
          ITESTS_SELENIUM_HANA_DB_PASSWORD: ${{ secrets.ITESTS_SELENIUM_HANA_DB_PASSWORD }}

