/*
 * Copyright (c) 2022 SAP SE or an SAP affiliate company and XSK contributors
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Apache License, v2.0
 * which accompanies this distribution, and is available at
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * SPDX-FileCopyrightText: 2022 SAP SE or an SAP affiliate company and XSK contributors
 * SPDX-License-Identifier: Apache-2.0
 */
// Generated from com.sap.xsk.parser.hana.core/Hana.g4 by ANTLR 4.10.1
package com.sap.xsk.parser.hana.core;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class HanaParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.10.1", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, A_LETTER=8, ADD=9, 
		AFTER=10, AGENT=11, AGGREGATE=12, ALL=13, ALTER=14, ALPHANUM=15, ANALYZE=16, 
		AND=17, ANY=18, ARRAY=19, AS=20, ASC=21, ASSOCIATE=22, AT=23, ATTRIBUTE=24, 
		AUDIT=25, AUTHID=26, AUTO=27, AUTOMATIC=28, AUTONOMOUS_TRANSACTION=29, 
		BATCH=30, BEFORE=31, BEGIN=32, BETWEEN=33, BFILE=34, BINARY_DOUBLE=35, 
		BINARY_FLOAT=36, BINARY_INTEGER=37, BIGINT=38, BLOB=39, BLOCK=40, BODY=41, 
		BOOLEAN=42, BOTH=43, BREADTH=44, BULK=45, BY=46, BYTE=47, C_LETTER=48, 
		CACHE=49, CALL=50, CANONICAL=51, CASCADE=52, CASE=53, CAST=54, CHAR=55, 
		CHAR_CS=56, CHARACTER=57, CHECK=58, CHR=59, CLOB=60, CLOSE=61, CLUSTER=62, 
		COLLECT=63, COLUMNS=64, COMMENT=65, COMMIT=66, COMMITTED=67, COMPATIBILITY=68, 
		COMPILE=69, COMPOUND=70, CONNECT=71, CONNECT_BY_ROOT=72, CONSTANT=73, 
		CONSTRAINT=74, CONSTRAINTS=75, CONSTRUCTOR=76, CONTENT=77, CONTEXT=78, 
		CONTINUE=79, CONVERT=80, CORRUPT_XID=81, CORRUPT_XID_ALL=82, COST=83, 
		COUNT=84, CREATE=85, CROSS=86, CUBE=87, CURRENT=88, CURRENT_USER=89, CURSOR=90, 
		CUSTOMDATUM=91, CYCLE=92, DATA=93, DATABASE=94, DATE=95, DAY=96, DB_ROLE_CHANGE=97, 
		DBTIMEZONE=98, DDL=99, DEBUG=100, DEC=101, DECIMAL=102, DECLARE=103, DECOMPOSE=104, 
		DECREMENT=105, DEFAULT=106, DEFAULTS=107, DEFERRED=108, DEFINER=109, DELETE=110, 
		DEPTH=111, DESC=112, DETERMINISTIC=113, DIMENSION=114, DISABLE=115, DISASSOCIATE=116, 
		DISTINCT=117, DOCUMENT=118, DOUBLE=119, DROP=120, DSINTERVAL_UNCONSTRAINED=121, 
		EACH=122, ELEMENT=123, ELSE=124, ELSIF=125, EMPTY=126, ENABLE=127, ENCODING=128, 
		END=129, ENTITYESCAPING=130, ERRORS=131, ESCAPE=132, EVALNAME=133, EXCEPTION=134, 
		EXCEPTION_INIT=135, EXCEPTIONS=136, EXCLUDE=137, EXCLUSIVE=138, EXECUTE=139, 
		EXISTS=140, EXIT=141, EXPLAIN=142, EXTERNAL=143, EXTRACT=144, FAILURE=145, 
		FALSE=146, FETCH=147, FINAL=148, FIRST=149, FIRST_VALUE=150, FLOAT=151, 
		FOLLOWING=152, FOLLOWS=153, FOR=154, FORALL=155, FORCE=156, FROM=157, 
		FULL=158, FUNCTION=159, GOTO=160, GRANT=161, GROUP=162, GROUPING=163, 
		HASH=164, HAVING=165, HANDLER=166, HIDE=167, HOUR=168, IF=169, IGNORE=170, 
		IMMEDIATE=171, IN=172, INCLUDE=173, INCLUDING=174, INCREMENT=175, INDENT=176, 
		INDEX=177, INDEXED=178, INDICATOR=179, INDICES=180, INFINITE=181, INLINE=182, 
		INNER=183, INOUT=184, INSERT=185, INSTANTIABLE=186, INSTEAD=187, INT=188, 
		INTEGER=189, INTERSECT=190, INTERVAL=191, INTO=192, INVALIDATE=193, INVOKER=194, 
		IS=195, ISOLATION=196, ITERATE=197, JAVA=198, JOIN=199, KEEP=200, LANGUAGE=201, 
		LAST=202, LAST_VALUE=203, LEADING=204, LEFT=205, LEVEL=206, LIBRARY=207, 
		LIKE=208, LIKE2=209, LIKE4=210, LIKEC=211, LIMIT=212, LOCAL=213, LOCK=214, 
		LOCKED=215, LOG=216, LOGOFF=217, LOGON=218, LONG=219, LOOP=220, MAIN=221, 
		MAP=222, MATCHED=223, MAXVALUE=224, MEASURES=225, MEMBER=226, MERGE=227, 
		MINUS=228, MINUTE=229, MINVALUE=230, MLSLABEL=231, MODE=232, MODEL=233, 
		MODIFY=234, MONTH=235, MULTISET=236, NAME=237, NAN=238, NATURAL=239, NATURALN=240, 
		NAV=241, NCHAR=242, NCHAR_CS=243, NCLOB=244, NESTED=245, NEW=246, NO=247, 
		NOAUDIT=248, NOCACHE=249, NOCOPY=250, NOCYCLE=251, NOENTITYESCAPING=252, 
		NOMAXVALUE=253, NOMINVALUE=254, NONE=255, NOORDER=256, NOSCHEMACHECK=257, 
		NOT=258, NOWAIT=259, NULL=260, NULLS=261, NUMBER=262, NUMERIC=263, NVARCHAR=264, 
		OBJECT=265, OF=266, OFF=267, OID=268, OLD=269, ON=270, ONLY=271, OPEN=272, 
		OPTION=273, OR=274, ORADATA=275, ORDER=276, ORDINALITY=277, OSERROR=278, 
		OUT=279, OUTER=280, OVER=281, OVERRIDING=282, PACKAGE=283, PARALLEL_ENABLE=284, 
		PARAMETERS=285, PARENT=286, PARTITION=287, PASSING=288, PATH=289, PERCENT_ROWTYPE=290, 
		PERCENT_TYPE=291, PIPELINED=292, PIVOT=293, PLAN=294, PLS_INTEGER=295, 
		POSITIVE=296, POSITIVEN=297, PRAGMA=298, PRECEDING=299, PRECISION=300, 
		PRESENT=301, PRIOR=302, PROCEDURE=303, RAISE=304, RANGE=305, RAW=306, 
		READ=307, READS=308, REAL=309, RECORD=310, REF=311, REFERENCE=312, REFERENCING=313, 
		REJECT=314, RELIES_ON=315, RENAME=316, REPLACE=317, RESPECT=318, RESTRICT_REFERENCES=319, 
		RESULT=320, RESULT_CACHE=321, RETURN=322, RETURNS=323, RETURNING=324, 
		REUSE=325, REVERSE=326, REVOKE=327, RIGHT=328, ROLLBACK=329, ROLLUP=330, 
		ROW=331, ROWID=332, ROWS=333, RULES=334, SAMPLE=335, SAVE=336, SAVEPOINT=337, 
		SCHEMA=338, SCHEMACHECK=339, SCN=340, SEARCH=341, SECOND=342, SECONDDATE=343, 
		SECURITY=344, SEED=345, SEGMENT=346, SELECT=347, SELF=348, SEQUENCE=349, 
		SEQUENTIAL=350, SERIALIZABLE=351, SERIALLY_REUSABLE=352, SERVERERROR=353, 
		SESSIONTIMEZONE=354, SET=355, SETS=356, SETTINGS=357, SHARE=358, SHOW=359, 
		SHUTDOWN=360, SIBLINGS=361, SIGNTYPE=362, SIMPLE_INTEGER=363, SINGLE=364, 
		SIZE=365, SKIP_=366, SMALLINT=367, SMALLDECIMAL=368, SNAPSHOT=369, SOME=370, 
		SPECIFICATION=371, SQL=372, SQLDATA=373, SQLERROR=374, SQLEXCEPTION=375, 
		SQLSCRIPT=376, STANDALONE=377, START=378, STARTUP=379, STATEMENT=380, 
		STATEMENT_ID=381, STATIC=382, STATISTICS=383, STRING=384, SUBMULTISET=385, 
		SUBPARTITION=386, SUBSTITUTABLE=387, SUBTYPE=388, SUCCESS=389, SUSPEND=390, 
		TABLE=391, THE=392, THEN=393, TIME=394, TIMESTAMP=395, TIMESTAMP_LTZ_UNCONSTRAINED=396, 
		TIMESTAMP_TZ_UNCONSTRAINED=397, TIMESTAMP_UNCONSTRAINED=398, TIMEZONE_ABBR=399, 
		TIMEZONE_HOUR=400, TIMEZONE_MINUTE=401, TIMEZONE_REGION=402, TINYINT=403, 
		TO=404, TRAILING=405, TRANSACTION=406, TRANSLATE=407, TREAT=408, TRIGGER=409, 
		TRIM=410, TRUE=411, TRUNCATE=412, TYPE=413, UNBOUNDED=414, UNDER=415, 
		UNION=416, UNIQUE=417, UNLIMITED=418, UNPIVOT=419, UNTIL=420, UPDATE=421, 
		UPDATED=422, UPSERT=423, UROWID=424, USE=425, USING=426, VALIDATE=427, 
		VALUE=428, VALUES=429, VARCHAR=430, VARCHAR2=431, VARIABLE=432, VARRAY=433, 
		VARYING=434, VERSION=435, VERSIONS=436, VIEW=437, WAIT=438, WARNING=439, 
		WELLFORMED=440, WHEN=441, WHENEVER=442, WHERE=443, WHILE=444, WITH=445, 
		WITHIN=446, WORK=447, WRITE=448, XML=449, XMLAGG=450, XMLATTRIBUTES=451, 
		XMLCAST=452, XMLCOLATTVAL=453, XMLELEMENT=454, XMLEXISTS=455, XMLFOREST=456, 
		XMLNAMESPACES=457, XMLPARSE=458, XMLPI=459, XMLQUERY=460, XMLROOT=461, 
		XMLSERIALIZE=462, XMLTABLE=463, YEAR=464, YES=465, YMINTERVAL_UNCONSTRAINED=466, 
		ZONE=467, AUTONOMOUS=468, CONDITION=469, ELSEIF=470, EXECUTION=471, OVERVIEW=472, 
		RESIGNAL=473, MESSAGE_TEXT=474, SHORTTEXT=475, SIGNAL=476, SQL_ERROR_CODE=477, 
		SQL_ERROR_MESSAGE=478, SQLWARNING=479, TEXT=480, UNNEST=481, VARBINARY=482, 
		STRING_AGG=483, CORR_SPEARMAN=484, VAR=485, STDDEV_POP=486, VAR_POP=487, 
		STDDEV_SAMP=488, VAR_SAMP=489, PREDICTION=490, PREDICTION_BOUNDS=491, 
		PREDICTION_COST=492, PREDICTION_DETAILS=493, PREDICTION_PROBABILITY=494, 
		PREDICTION_SET=495, CUME_DIST=496, DENSE_RANK=497, LISTAGG=498, PERCENT_RANK=499, 
		PERCENTILE_CONT=500, PERCENTILE_DISC=501, RANK=502, AVG=503, CORR=504, 
		LAG=505, LEAD=506, MAX=507, MEDIAN=508, MIN=509, NTILE=510, RATIO_TO_REPORT=511, 
		ROW_NUMBER=512, SUM=513, VARIANCE=514, REGR_=515, STDDEV=516, VAR_=517, 
		COVAR_=518, NATIONAL_CHAR_STRING_LIT=519, BIT_STRING_LIT=520, HEX_STRING_LIT=521, 
		DOUBLE_PERIOD=522, PERIOD=523, UNSIGNED_INTEGER=524, APPROXIMATE_NUM_LIT=525, 
		CHAR_STRING=526, DELIMITED_ID=527, PERCENT=528, AMPERSAND=529, LEFT_PAREN=530, 
		RIGHT_PAREN=531, DOUBLE_ASTERISK=532, ASTERISK=533, PLUS_SIGN=534, MINUS_SIGN=535, 
		COMMA=536, SOLIDUS=537, AT_SIGN=538, ASSIGN_OP=539, BINDVAR=540, COLON=541, 
		SEMICOLON=542, LESS_THAN_OR_EQUALS_OP=543, LESS_THAN_OP=544, GREATER_THAN_OR_EQUALS_OP=545, 
		NOT_EQUAL_OP=546, CARRET_OPERATOR_PART=547, TILDE_OPERATOR_PART=548, EXCLAMATION_OPERATOR_PART=549, 
		GREATER_THAN_OP=550, CONCATENATION_OP=551, VERTICAL_BAR=552, EQUALS_OP=553, 
		LEFT_BRACKET=554, RIGHT_BRACKET=555, INTRODUCER=556, SPACES=557, SINGLE_LINE_COMMENT=558, 
		MULTI_LINE_COMMENT=559, PROMPT=560, REGULAR_ID=561;
	public static final int
		RULE_swallow_to_semi = 0, RULE_compilation_unit = 1, RULE_sql_script = 2, 
		RULE_unit_statement = 3, RULE_set_schema = 4, RULE_drop_procedure = 5, 
		RULE_create_procedure_body = 6, RULE_create_func_body = 7, RULE_param_name = 8, 
		RULE_return_type = 9, RULE_return_table_type = 10, RULE_param_type = 11, 
		RULE_sql_type = 12, RULE_table_type = 13, RULE_table_type_definition = 14, 
		RULE_column_list_definition = 15, RULE_column_elem = 16, RULE_column_name = 17, 
		RULE_data_type = 18, RULE_parameter = 19, RULE_parameter_clause = 20, 
		RULE_lang = 21, RULE_security_mode = 22, RULE_default_schema_name = 23, 
		RULE_view_name = 24, RULE_proc_decl_list = 25, RULE_proc_decl = 26, RULE_proc_decl_op = 27, 
		RULE_proc_variable = 28, RULE_proc_table_variable = 29, RULE_variable_name_list = 30, 
		RULE_array_datatype = 31, RULE_array_constructor = 32, RULE_proc_default = 33, 
		RULE_proc_cursor = 34, RULE_proc_cursor_param_list = 35, RULE_variable_name = 36, 
		RULE_cursor_name = 37, RULE_proc_cursor_param = 38, RULE_proc_condition = 39, 
		RULE_sql_error_code = 40, RULE_proc_handler_list = 41, RULE_proc_handler = 42, 
		RULE_proc_condition_value_list = 43, RULE_proc_condition_value = 44, RULE_proc_stmt_list = 45, 
		RULE_func_stmt_list = 46, RULE_proc_stmt = 47, RULE_proc_sql = 48, RULE_update_stmt = 49, 
		RULE_insert_stmt = 50, RULE_proc_signal = 51, RULE_proc_resignal = 52, 
		RULE_signal_value = 53, RULE_signal_name = 54, RULE_set_signal_info = 55, 
		RULE_message_string = 56, RULE_proc_if = 57, RULE_proc_elsif_list = 58, 
		RULE_proc_else = 59, RULE_proc_block = 60, RULE_proc_block_option = 61, 
		RULE_proc_assign = 62, RULE_proc_single_assign = 63, RULE_unnest_function = 64, 
		RULE_table_name = 65, RULE_as_col_names = 66, RULE_column_name_list = 67, 
		RULE_proc_call = 68, RULE_param_list = 69, RULE_proc_param = 70, RULE_named_param = 71, 
		RULE_procedure_body = 72, RULE_procedure_body_ = 73, RULE_func_body = 74, 
		RULE_parameter_name = 75, RULE_for_each_row = 76, RULE_alter_attribute_definition = 77, 
		RULE_attribute_definition = 78, RULE_alter_collection_clauses = 79, RULE_dependent_handling_clause = 80, 
		RULE_dependent_exceptions_part = 81, RULE_type_definition = 82, RULE_object_type_def = 83, 
		RULE_object_as_part = 84, RULE_object_under_part = 85, RULE_nested_table_type_def = 86, 
		RULE_sqlj_object_type = 87, RULE_type_body = 88, RULE_type_body_elements = 89, 
		RULE_map_order_func_declaration = 90, RULE_subprog_decl_in_type = 91, 
		RULE_proc_decl_in_type = 92, RULE_func_decl_in_type = 93, RULE_constructor_declaration = 94, 
		RULE_modifier_clause = 95, RULE_object_member_spec = 96, RULE_sqlj_object_type_attr = 97, 
		RULE_element_spec = 98, RULE_element_spec_options = 99, RULE_subprogram_spec = 100, 
		RULE_type_procedure_spec = 101, RULE_type_function_spec = 102, RULE_constructor_spec = 103, 
		RULE_map_order_function_spec = 104, RULE_pragma_clause = 105, RULE_pragma_elements = 106, 
		RULE_type_elements_parameter = 107, RULE_create_sequence = 108, RULE_sequence_spec = 109, 
		RULE_sequence_start_clause = 110, RULE_invoker_rights_clause = 111, RULE_compiler_parameters_clause = 112, 
		RULE_call_spec = 113, RULE_java_spec = 114, RULE_c_spec = 115, RULE_c_agent_in_clause = 116, 
		RULE_c_parameters_clause = 117, RULE_default_value_part = 118, RULE_declare_spec = 119, 
		RULE_variable_declaration = 120, RULE_subtype_declaration = 121, RULE_cursor_declaration = 122, 
		RULE_parameter_spec = 123, RULE_exception_declaration = 124, RULE_pragma_declaration = 125, 
		RULE_record_declaration = 126, RULE_record_type_dec = 127, RULE_field_spec = 128, 
		RULE_record_var_dec = 129, RULE_table_declaration = 130, RULE_table_type_dec = 131, 
		RULE_table_indexed_by_part = 132, RULE_varray_type_def = 133, RULE_table_var_dec = 134, 
		RULE_seq_of_statements = 135, RULE_label_declaration = 136, RULE_statement = 137, 
		RULE_assignment_statement = 138, RULE_continue_statement = 139, RULE_exit_statement = 140, 
		RULE_goto_statement = 141, RULE_if_statement = 142, RULE_elsif_part = 143, 
		RULE_else_part = 144, RULE_loop_statement = 145, RULE_cursor_loop_param = 146, 
		RULE_forall_statement = 147, RULE_bounds_clause = 148, RULE_between_bound = 149, 
		RULE_lower_bound = 150, RULE_upper_bound = 151, RULE_null_statement = 152, 
		RULE_raise_statement = 153, RULE_return_statement = 154, RULE_function_call = 155, 
		RULE_body = 156, RULE_exception_clause = 157, RULE_exception_handler = 158, 
		RULE_trigger_block = 159, RULE_block = 160, RULE_sql_statement = 161, 
		RULE_execute_immediate = 162, RULE_dynamic_returning_clause = 163, RULE_data_manipulation_language_statements = 164, 
		RULE_cursor_manipulation_statements = 165, RULE_close_statement = 166, 
		RULE_open_statement = 167, RULE_fetch_statement = 168, RULE_open_for_statement = 169, 
		RULE_transaction_control_statements = 170, RULE_set_transaction_command = 171, 
		RULE_set_constraint_command = 172, RULE_commit_statement = 173, RULE_write_clause = 174, 
		RULE_rollback_statement = 175, RULE_savepoint_statement = 176, RULE_explain_statement = 177, 
		RULE_select_statement = 178, RULE_subquery_factoring_clause = 179, RULE_factoring_element = 180, 
		RULE_search_clause = 181, RULE_cycle_clause = 182, RULE_subquery = 183, 
		RULE_subquery_operation_part = 184, RULE_subquery_basic_elements = 185, 
		RULE_query_block = 186, RULE_selected_element = 187, RULE_from_clause = 188, 
		RULE_select_list_elements = 189, RULE_table_ref_list = 190, RULE_table_ref = 191, 
		RULE_table_ref_aux = 192, RULE_join_clause = 193, RULE_join_on_part = 194, 
		RULE_join_using_part = 195, RULE_outer_join_type = 196, RULE_query_partition_clause = 197, 
		RULE_flashback_query_clause = 198, RULE_pivot_clause = 199, RULE_pivot_element = 200, 
		RULE_pivot_for_clause = 201, RULE_pivot_in_clause = 202, RULE_pivot_in_clause_element = 203, 
		RULE_pivot_in_clause_elements = 204, RULE_unpivot_clause = 205, RULE_unpivot_in_clause = 206, 
		RULE_unpivot_in_elements = 207, RULE_hierarchical_query_clause = 208, 
		RULE_start_part = 209, RULE_group_by_clause = 210, RULE_group_by_elements = 211, 
		RULE_rollup_cube_clause = 212, RULE_grouping_sets_clause = 213, RULE_grouping_sets_elements = 214, 
		RULE_having_clause = 215, RULE_model_clause = 216, RULE_cell_reference_options = 217, 
		RULE_return_rows_clause = 218, RULE_reference_model = 219, RULE_main_model = 220, 
		RULE_model_column_clauses = 221, RULE_model_column_partition_part = 222, 
		RULE_model_column_list = 223, RULE_model_column = 224, RULE_model_rules_clause = 225, 
		RULE_model_rules_part = 226, RULE_model_rules_element = 227, RULE_cell_assignment = 228, 
		RULE_model_iterate_clause = 229, RULE_until_part = 230, RULE_order_by_clause = 231, 
		RULE_order_by_elements = 232, RULE_for_update_clause = 233, RULE_for_update_of_part = 234, 
		RULE_for_update_options = 235, RULE_update_statement = 236, RULE_update_set_clause = 237, 
		RULE_column_based_update_set_clause = 238, RULE_delete_statement = 239, 
		RULE_insert_statement = 240, RULE_declare_statement = 241, RULE_exception_statement = 242, 
		RULE_proc_condition_value_ = 243, RULE_single_table_insert = 244, RULE_multi_table_insert = 245, 
		RULE_multi_table_element = 246, RULE_conditional_insert_clause = 247, 
		RULE_conditional_insert_when_part = 248, RULE_conditional_insert_else_part = 249, 
		RULE_insert_into_clause = 250, RULE_values_clause = 251, RULE_merge_statement = 252, 
		RULE_merge_update_clause = 253, RULE_merge_element = 254, RULE_merge_update_delete_part = 255, 
		RULE_merge_insert_clause = 256, RULE_selected_tableview = 257, RULE_lock_table_statement = 258, 
		RULE_wait_nowait_part = 259, RULE_lock_table_element = 260, RULE_lock_mode = 261, 
		RULE_general_table_ref = 262, RULE_static_returning_clause = 263, RULE_error_logging_clause = 264, 
		RULE_error_logging_into_part = 265, RULE_error_logging_reject_part = 266, 
		RULE_dml_table_expression_clause = 267, RULE_table_collection_expression = 268, 
		RULE_subquery_restriction_clause = 269, RULE_sample_clause = 270, RULE_seed_part = 271, 
		RULE_cursor_expression = 272, RULE_expression_list = 273, RULE_condition = 274, 
		RULE_condition_wrapper = 275, RULE_condition_ = 276, RULE_predicate = 277, 
		RULE_comparison_predicate = 278, RULE_relational_operator = 279, RULE_range_predicate = 280, 
		RULE_in_predicate = 281, RULE_exist_predicate = 282, RULE_like_predicate = 283, 
		RULE_null_predicate = 284, RULE_expression__list = 285, RULE_expression_ = 286, 
		RULE_correlation_name = 287, RULE_operator = 288, RULE_case_expression_ = 289, 
		RULE_simple_case_expression_ = 290, RULE_search_case_expression_ = 291, 
		RULE_function_expression_ = 292, RULE_aggregate_expression_ = 293, RULE_agg_name = 294, 
		RULE_delimiter = 295, RULE_aggregate_order_by_clause = 296, RULE_expression = 297, 
		RULE_expression_wrapper = 298, RULE_logical_and_expression = 299, RULE_negated_expression = 300, 
		RULE_equality_expression = 301, RULE_multiset_expression = 302, RULE_multiset_type = 303, 
		RULE_relational_expression = 304, RULE_relational_expression_operator = 305, 
		RULE_compound_expression = 306, RULE_like_type = 307, RULE_like_escape_part = 308, 
		RULE_in_elements = 309, RULE_between_elements = 310, RULE_concatenation = 311, 
		RULE_concatenation_wrapper = 312, RULE_additive_expression = 313, RULE_multiply_expression = 314, 
		RULE_datetime_expression = 315, RULE_interval_expression = 316, RULE_model_expression = 317, 
		RULE_model_expression_element = 318, RULE_single_column_for_loop = 319, 
		RULE_for_like_part = 320, RULE_for_increment_decrement_type = 321, RULE_multi_column_for_loop = 322, 
		RULE_unary_expression = 323, RULE_case_statement = 324, RULE_simple_case_statement = 325, 
		RULE_simple_case_when_part = 326, RULE_searched_case_statement = 327, 
		RULE_searched_case_when_part = 328, RULE_case_else_part = 329, RULE_atom = 330, 
		RULE_expression_or_vector = 331, RULE_vector_expr = 332, RULE_quantified_expression = 333, 
		RULE_standard_function = 334, RULE_over_clause_keyword = 335, RULE_within_or_over_clause_keyword = 336, 
		RULE_standard_prediction_function_keyword = 337, RULE_over_clause = 338, 
		RULE_windowing_clause = 339, RULE_windowing_type = 340, RULE_windowing_elements = 341, 
		RULE_using_clause = 342, RULE_using_element = 343, RULE_collect_order_by_part = 344, 
		RULE_within_or_over_part = 345, RULE_cost_matrix_clause = 346, RULE_xml_passing_clause = 347, 
		RULE_xml_attributes_clause = 348, RULE_xml_namespaces_clause = 349, RULE_xml_table_column = 350, 
		RULE_xml_general_default_part = 351, RULE_xml_multiuse_expression_element = 352, 
		RULE_xmlroot_param_version_part = 353, RULE_xmlroot_param_standalone_part = 354, 
		RULE_xmlserialize_param_enconding_part = 355, RULE_xmlserialize_param_version_part = 356, 
		RULE_xmlserialize_param_ident_part = 357, RULE_sql_plus_command = 358, 
		RULE_whenever_command = 359, RULE_set_command = 360, RULE_exit_command = 361, 
		RULE_prompt_command = 362, RULE_partition_extension_clause = 363, RULE_column_alias = 364, 
		RULE_table_alias = 365, RULE_alias_quoted_string = 366, RULE_where_clause = 367, 
		RULE_current_of_clause = 368, RULE_into_clause = 369, RULE_xml_column_name = 370, 
		RULE_cost_class_name = 371, RULE_attribute_name = 372, RULE_savepoint_name = 373, 
		RULE_rollback_segment_name = 374, RULE_table_var_name = 375, RULE_schema_name = 376, 
		RULE_routine_name = 377, RULE_package_name = 378, RULE_implementation_type_name = 379, 
		RULE_reference_model_name = 380, RULE_main_model_name = 381, RULE_aggregate_function_name = 382, 
		RULE_query_name = 383, RULE_constraint_name = 384, RULE_label_name = 385, 
		RULE_type_name = 386, RULE_sequence_name = 387, RULE_exception_name = 388, 
		RULE_function_name = 389, RULE_proc_name = 390, RULE_trigger_name = 391, 
		RULE_variable_name_old = 392, RULE_index_name = 393, RULE_cursor_name_old = 394, 
		RULE_record_name = 395, RULE_collection_name = 396, RULE_link_name = 397, 
		RULE_column_name_old = 398, RULE_tableview_name = 399, RULE_char_set_name = 400, 
		RULE_keep_clause = 401, RULE_function_argument = 402, RULE_function_argument_analytic = 403, 
		RULE_function_argument_modeling = 404, RULE_respect_or_ignore_nulls = 405, 
		RULE_argument = 406, RULE_type_spec = 407, RULE_datatype = 408, RULE_precision_part = 409, 
		RULE_native_datatype_element = 410, RULE_bind_variable = 411, RULE_bind_sql_error_code = 412, 
		RULE_const_sql_error_code = 413, RULE_bind_sql_error_message = 414, RULE_const_sql_error_message = 415, 
		RULE_general_element = 416, RULE_general_element_part = 417, RULE_table_element = 418, 
		RULE_constant = 419, RULE_numeric = 420, RULE_numeric_negative = 421, 
		RULE_quoted_string = 422, RULE_id = 423, RULE_id_expression = 424, RULE_not_equal_op = 425, 
		RULE_greater_than_or_equals_op = 426, RULE_less_than_or_equals_op = 427, 
		RULE_concatenation_op = 428, RULE_outer_join_sign = 429, RULE_regular_id = 430;
	private static String[] makeRuleNames() {
		return new String[] {
			"swallow_to_semi", "compilation_unit", "sql_script", "unit_statement", 
			"set_schema", "drop_procedure", "create_procedure_body", "create_func_body", 
			"param_name", "return_type", "return_table_type", "param_type", "sql_type", 
			"table_type", "table_type_definition", "column_list_definition", "column_elem", 
			"column_name", "data_type", "parameter", "parameter_clause", "lang", 
			"security_mode", "default_schema_name", "view_name", "proc_decl_list", 
			"proc_decl", "proc_decl_op", "proc_variable", "proc_table_variable", 
			"variable_name_list", "array_datatype", "array_constructor", "proc_default", 
			"proc_cursor", "proc_cursor_param_list", "variable_name", "cursor_name", 
			"proc_cursor_param", "proc_condition", "sql_error_code", "proc_handler_list", 
			"proc_handler", "proc_condition_value_list", "proc_condition_value", 
			"proc_stmt_list", "func_stmt_list", "proc_stmt", "proc_sql", "update_stmt", 
			"insert_stmt", "proc_signal", "proc_resignal", "signal_value", "signal_name", 
			"set_signal_info", "message_string", "proc_if", "proc_elsif_list", "proc_else", 
			"proc_block", "proc_block_option", "proc_assign", "proc_single_assign", 
			"unnest_function", "table_name", "as_col_names", "column_name_list", 
			"proc_call", "param_list", "proc_param", "named_param", "procedure_body", 
			"procedure_body_", "func_body", "parameter_name", "for_each_row", "alter_attribute_definition", 
			"attribute_definition", "alter_collection_clauses", "dependent_handling_clause", 
			"dependent_exceptions_part", "type_definition", "object_type_def", "object_as_part", 
			"object_under_part", "nested_table_type_def", "sqlj_object_type", "type_body", 
			"type_body_elements", "map_order_func_declaration", "subprog_decl_in_type", 
			"proc_decl_in_type", "func_decl_in_type", "constructor_declaration", 
			"modifier_clause", "object_member_spec", "sqlj_object_type_attr", "element_spec", 
			"element_spec_options", "subprogram_spec", "type_procedure_spec", "type_function_spec", 
			"constructor_spec", "map_order_function_spec", "pragma_clause", "pragma_elements", 
			"type_elements_parameter", "create_sequence", "sequence_spec", "sequence_start_clause", 
			"invoker_rights_clause", "compiler_parameters_clause", "call_spec", "java_spec", 
			"c_spec", "c_agent_in_clause", "c_parameters_clause", "default_value_part", 
			"declare_spec", "variable_declaration", "subtype_declaration", "cursor_declaration", 
			"parameter_spec", "exception_declaration", "pragma_declaration", "record_declaration", 
			"record_type_dec", "field_spec", "record_var_dec", "table_declaration", 
			"table_type_dec", "table_indexed_by_part", "varray_type_def", "table_var_dec", 
			"seq_of_statements", "label_declaration", "statement", "assignment_statement", 
			"continue_statement", "exit_statement", "goto_statement", "if_statement", 
			"elsif_part", "else_part", "loop_statement", "cursor_loop_param", "forall_statement", 
			"bounds_clause", "between_bound", "lower_bound", "upper_bound", "null_statement", 
			"raise_statement", "return_statement", "function_call", "body", "exception_clause", 
			"exception_handler", "trigger_block", "block", "sql_statement", "execute_immediate", 
			"dynamic_returning_clause", "data_manipulation_language_statements", 
			"cursor_manipulation_statements", "close_statement", "open_statement", 
			"fetch_statement", "open_for_statement", "transaction_control_statements", 
			"set_transaction_command", "set_constraint_command", "commit_statement", 
			"write_clause", "rollback_statement", "savepoint_statement", "explain_statement", 
			"select_statement", "subquery_factoring_clause", "factoring_element", 
			"search_clause", "cycle_clause", "subquery", "subquery_operation_part", 
			"subquery_basic_elements", "query_block", "selected_element", "from_clause", 
			"select_list_elements", "table_ref_list", "table_ref", "table_ref_aux", 
			"join_clause", "join_on_part", "join_using_part", "outer_join_type", 
			"query_partition_clause", "flashback_query_clause", "pivot_clause", "pivot_element", 
			"pivot_for_clause", "pivot_in_clause", "pivot_in_clause_element", "pivot_in_clause_elements", 
			"unpivot_clause", "unpivot_in_clause", "unpivot_in_elements", "hierarchical_query_clause", 
			"start_part", "group_by_clause", "group_by_elements", "rollup_cube_clause", 
			"grouping_sets_clause", "grouping_sets_elements", "having_clause", "model_clause", 
			"cell_reference_options", "return_rows_clause", "reference_model", "main_model", 
			"model_column_clauses", "model_column_partition_part", "model_column_list", 
			"model_column", "model_rules_clause", "model_rules_part", "model_rules_element", 
			"cell_assignment", "model_iterate_clause", "until_part", "order_by_clause", 
			"order_by_elements", "for_update_clause", "for_update_of_part", "for_update_options", 
			"update_statement", "update_set_clause", "column_based_update_set_clause", 
			"delete_statement", "insert_statement", "declare_statement", "exception_statement", 
			"proc_condition_value_", "single_table_insert", "multi_table_insert", 
			"multi_table_element", "conditional_insert_clause", "conditional_insert_when_part", 
			"conditional_insert_else_part", "insert_into_clause", "values_clause", 
			"merge_statement", "merge_update_clause", "merge_element", "merge_update_delete_part", 
			"merge_insert_clause", "selected_tableview", "lock_table_statement", 
			"wait_nowait_part", "lock_table_element", "lock_mode", "general_table_ref", 
			"static_returning_clause", "error_logging_clause", "error_logging_into_part", 
			"error_logging_reject_part", "dml_table_expression_clause", "table_collection_expression", 
			"subquery_restriction_clause", "sample_clause", "seed_part", "cursor_expression", 
			"expression_list", "condition", "condition_wrapper", "condition_", "predicate", 
			"comparison_predicate", "relational_operator", "range_predicate", "in_predicate", 
			"exist_predicate", "like_predicate", "null_predicate", "expression__list", 
			"expression_", "correlation_name", "operator", "case_expression_", "simple_case_expression_", 
			"search_case_expression_", "function_expression_", "aggregate_expression_", 
			"agg_name", "delimiter", "aggregate_order_by_clause", "expression", "expression_wrapper", 
			"logical_and_expression", "negated_expression", "equality_expression", 
			"multiset_expression", "multiset_type", "relational_expression", "relational_expression_operator", 
			"compound_expression", "like_type", "like_escape_part", "in_elements", 
			"between_elements", "concatenation", "concatenation_wrapper", "additive_expression", 
			"multiply_expression", "datetime_expression", "interval_expression", 
			"model_expression", "model_expression_element", "single_column_for_loop", 
			"for_like_part", "for_increment_decrement_type", "multi_column_for_loop", 
			"unary_expression", "case_statement", "simple_case_statement", "simple_case_when_part", 
			"searched_case_statement", "searched_case_when_part", "case_else_part", 
			"atom", "expression_or_vector", "vector_expr", "quantified_expression", 
			"standard_function", "over_clause_keyword", "within_or_over_clause_keyword", 
			"standard_prediction_function_keyword", "over_clause", "windowing_clause", 
			"windowing_type", "windowing_elements", "using_clause", "using_element", 
			"collect_order_by_part", "within_or_over_part", "cost_matrix_clause", 
			"xml_passing_clause", "xml_attributes_clause", "xml_namespaces_clause", 
			"xml_table_column", "xml_general_default_part", "xml_multiuse_expression_element", 
			"xmlroot_param_version_part", "xmlroot_param_standalone_part", "xmlserialize_param_enconding_part", 
			"xmlserialize_param_version_part", "xmlserialize_param_ident_part", "sql_plus_command", 
			"whenever_command", "set_command", "exit_command", "prompt_command", 
			"partition_extension_clause", "column_alias", "table_alias", "alias_quoted_string", 
			"where_clause", "current_of_clause", "into_clause", "xml_column_name", 
			"cost_class_name", "attribute_name", "savepoint_name", "rollback_segment_name", 
			"table_var_name", "schema_name", "routine_name", "package_name", "implementation_type_name", 
			"reference_model_name", "main_model_name", "aggregate_function_name", 
			"query_name", "constraint_name", "label_name", "type_name", "sequence_name", 
			"exception_name", "function_name", "proc_name", "trigger_name", "variable_name_old", 
			"index_name", "cursor_name_old", "record_name", "collection_name", "link_name", 
			"column_name_old", "tableview_name", "char_set_name", "keep_clause", 
			"function_argument", "function_argument_analytic", "function_argument_modeling", 
			"respect_or_ignore_nulls", "argument", "type_spec", "datatype", "precision_part", 
			"native_datatype_element", "bind_variable", "bind_sql_error_code", "const_sql_error_code", 
			"bind_sql_error_message", "const_sql_error_message", "general_element", 
			"general_element_part", "table_element", "constant", "numeric", "numeric_negative", 
			"quoted_string", "id", "id_expression", "not_equal_op", "greater_than_or_equals_op", 
			"less_than_or_equals_op", "concatenation_op", "outer_join_sign", "regular_id"
		};
	}
	public static final String[] ruleNames = makeRuleNames();

	private static String[] makeLiteralNames() {
		return new String[] {
			null, "'R'", "'''", "'=>'", "'..'", "'!='", "'<>'", "'::'", null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, null, null, null, 
			null, null, null, null, null, null, null, null, null, "'.'", null, null, 
			null, null, "'%'", "'&'", "'('", "')'", "'**'", "'*'", "'+'", "'-'", 
			"','", "'/'", "'@'", "':='", null, "':'", "';'", "'<='", "'<'", "'>='", 
			null, "'^'", "'~'", "'!'", "'>'", "'||'", "'|'", "'='", "'['", "']'", 
			"'_'"
		};
	}
	private static final String[] _LITERAL_NAMES = makeLiteralNames();
	private static String[] makeSymbolicNames() {
		return new String[] {
			null, null, null, null, null, null, null, null, "A_LETTER", "ADD", "AFTER", 
			"AGENT", "AGGREGATE", "ALL", "ALTER", "ALPHANUM", "ANALYZE", "AND", "ANY", 
			"ARRAY", "AS", "ASC", "ASSOCIATE", "AT", "ATTRIBUTE", "AUDIT", "AUTHID", 
			"AUTO", "AUTOMATIC", "AUTONOMOUS_TRANSACTION", "BATCH", "BEFORE", "BEGIN", 
			"BETWEEN", "BFILE", "BINARY_DOUBLE", "BINARY_FLOAT", "BINARY_INTEGER", 
			"BIGINT", "BLOB", "BLOCK", "BODY", "BOOLEAN", "BOTH", "BREADTH", "BULK", 
			"BY", "BYTE", "C_LETTER", "CACHE", "CALL", "CANONICAL", "CASCADE", "CASE", 
			"CAST", "CHAR", "CHAR_CS", "CHARACTER", "CHECK", "CHR", "CLOB", "CLOSE", 
			"CLUSTER", "COLLECT", "COLUMNS", "COMMENT", "COMMIT", "COMMITTED", "COMPATIBILITY", 
			"COMPILE", "COMPOUND", "CONNECT", "CONNECT_BY_ROOT", "CONSTANT", "CONSTRAINT", 
			"CONSTRAINTS", "CONSTRUCTOR", "CONTENT", "CONTEXT", "CONTINUE", "CONVERT", 
			"CORRUPT_XID", "CORRUPT_XID_ALL", "COST", "COUNT", "CREATE", "CROSS", 
			"CUBE", "CURRENT", "CURRENT_USER", "CURSOR", "CUSTOMDATUM", "CYCLE", 
			"DATA", "DATABASE", "DATE", "DAY", "DB_ROLE_CHANGE", "DBTIMEZONE", "DDL", 
			"DEBUG", "DEC", "DECIMAL", "DECLARE", "DECOMPOSE", "DECREMENT", "DEFAULT", 
			"DEFAULTS", "DEFERRED", "DEFINER", "DELETE", "DEPTH", "DESC", "DETERMINISTIC", 
			"DIMENSION", "DISABLE", "DISASSOCIATE", "DISTINCT", "DOCUMENT", "DOUBLE", 
			"DROP", "DSINTERVAL_UNCONSTRAINED", "EACH", "ELEMENT", "ELSE", "ELSIF", 
			"EMPTY", "ENABLE", "ENCODING", "END", "ENTITYESCAPING", "ERRORS", "ESCAPE", 
			"EVALNAME", "EXCEPTION", "EXCEPTION_INIT", "EXCEPTIONS", "EXCLUDE", "EXCLUSIVE", 
			"EXECUTE", "EXISTS", "EXIT", "EXPLAIN", "EXTERNAL", "EXTRACT", "FAILURE", 
			"FALSE", "FETCH", "FINAL", "FIRST", "FIRST_VALUE", "FLOAT", "FOLLOWING", 
			"FOLLOWS", "FOR", "FORALL", "FORCE", "FROM", "FULL", "FUNCTION", "GOTO", 
			"GRANT", "GROUP", "GROUPING", "HASH", "HAVING", "HANDLER", "HIDE", "HOUR", 
			"IF", "IGNORE", "IMMEDIATE", "IN", "INCLUDE", "INCLUDING", "INCREMENT", 
			"INDENT", "INDEX", "INDEXED", "INDICATOR", "INDICES", "INFINITE", "INLINE", 
			"INNER", "INOUT", "INSERT", "INSTANTIABLE", "INSTEAD", "INT", "INTEGER", 
			"INTERSECT", "INTERVAL", "INTO", "INVALIDATE", "INVOKER", "IS", "ISOLATION", 
			"ITERATE", "JAVA", "JOIN", "KEEP", "LANGUAGE", "LAST", "LAST_VALUE", 
			"LEADING", "LEFT", "LEVEL", "LIBRARY", "LIKE", "LIKE2", "LIKE4", "LIKEC", 
			"LIMIT", "LOCAL", "LOCK", "LOCKED", "LOG", "LOGOFF", "LOGON", "LONG", 
			"LOOP", "MAIN", "MAP", "MATCHED", "MAXVALUE", "MEASURES", "MEMBER", "MERGE", 
			"MINUS", "MINUTE", "MINVALUE", "MLSLABEL", "MODE", "MODEL", "MODIFY", 
			"MONTH", "MULTISET", "NAME", "NAN", "NATURAL", "NATURALN", "NAV", "NCHAR", 
			"NCHAR_CS", "NCLOB", "NESTED", "NEW", "NO", "NOAUDIT", "NOCACHE", "NOCOPY", 
			"NOCYCLE", "NOENTITYESCAPING", "NOMAXVALUE", "NOMINVALUE", "NONE", "NOORDER", 
			"NOSCHEMACHECK", "NOT", "NOWAIT", "NULL", "NULLS", "NUMBER", "NUMERIC", 
			"NVARCHAR", "OBJECT", "OF", "OFF", "OID", "OLD", "ON", "ONLY", "OPEN", 
			"OPTION", "OR", "ORADATA", "ORDER", "ORDINALITY", "OSERROR", "OUT", "OUTER", 
			"OVER", "OVERRIDING", "PACKAGE", "PARALLEL_ENABLE", "PARAMETERS", "PARENT", 
			"PARTITION", "PASSING", "PATH", "PERCENT_ROWTYPE", "PERCENT_TYPE", "PIPELINED", 
			"PIVOT", "PLAN", "PLS_INTEGER", "POSITIVE", "POSITIVEN", "PRAGMA", "PRECEDING", 
			"PRECISION", "PRESENT", "PRIOR", "PROCEDURE", "RAISE", "RANGE", "RAW", 
			"READ", "READS", "REAL", "RECORD", "REF", "REFERENCE", "REFERENCING", 
			"REJECT", "RELIES_ON", "RENAME", "REPLACE", "RESPECT", "RESTRICT_REFERENCES", 
			"RESULT", "RESULT_CACHE", "RETURN", "RETURNS", "RETURNING", "REUSE", 
			"REVERSE", "REVOKE", "RIGHT", "ROLLBACK", "ROLLUP", "ROW", "ROWID", "ROWS", 
			"RULES", "SAMPLE", "SAVE", "SAVEPOINT", "SCHEMA", "SCHEMACHECK", "SCN", 
			"SEARCH", "SECOND", "SECONDDATE", "SECURITY", "SEED", "SEGMENT", "SELECT", 
			"SELF", "SEQUENCE", "SEQUENTIAL", "SERIALIZABLE", "SERIALLY_REUSABLE", 
			"SERVERERROR", "SESSIONTIMEZONE", "SET", "SETS", "SETTINGS", "SHARE", 
			"SHOW", "SHUTDOWN", "SIBLINGS", "SIGNTYPE", "SIMPLE_INTEGER", "SINGLE", 
			"SIZE", "SKIP_", "SMALLINT", "SMALLDECIMAL", "SNAPSHOT", "SOME", "SPECIFICATION", 
			"SQL", "SQLDATA", "SQLERROR", "SQLEXCEPTION", "SQLSCRIPT", "STANDALONE", 
			"START", "STARTUP", "STATEMENT", "STATEMENT_ID", "STATIC", "STATISTICS", 
			"STRING", "SUBMULTISET", "SUBPARTITION", "SUBSTITUTABLE", "SUBTYPE", 
			"SUCCESS", "SUSPEND", "TABLE", "THE", "THEN", "TIME", "TIMESTAMP", "TIMESTAMP_LTZ_UNCONSTRAINED", 
			"TIMESTAMP_TZ_UNCONSTRAINED", "TIMESTAMP_UNCONSTRAINED", "TIMEZONE_ABBR", 
			"TIMEZONE_HOUR", "TIMEZONE_MINUTE", "TIMEZONE_REGION", "TINYINT", "TO", 
			"TRAILING", "TRANSACTION", "TRANSLATE", "TREAT", "TRIGGER", "TRIM", "TRUE", 
			"TRUNCATE", "TYPE", "UNBOUNDED", "UNDER", "UNION", "UNIQUE", "UNLIMITED", 
			"UNPIVOT", "UNTIL", "UPDATE", "UPDATED", "UPSERT", "UROWID", "USE", "USING", 
			"VALIDATE", "VALUE", "VALUES", "VARCHAR", "VARCHAR2", "VARIABLE", "VARRAY", 
			"VARYING", "VERSION", "VERSIONS", "VIEW", "WAIT", "WARNING", "WELLFORMED", 
			"WHEN", "WHENEVER", "WHERE", "WHILE", "WITH", "WITHIN", "WORK", "WRITE", 
			"XML", "XMLAGG", "XMLATTRIBUTES", "XMLCAST", "XMLCOLATTVAL", "XMLELEMENT", 
			"XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE", "XMLPI", "XMLQUERY", 
			"XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR", "YES", "YMINTERVAL_UNCONSTRAINED", 
			"ZONE", "AUTONOMOUS", "CONDITION", "ELSEIF", "EXECUTION", "OVERVIEW", 
			"RESIGNAL", "MESSAGE_TEXT", "SHORTTEXT", "SIGNAL", "SQL_ERROR_CODE", 
			"SQL_ERROR_MESSAGE", "SQLWARNING", "TEXT", "UNNEST", "VARBINARY", "STRING_AGG", 
			"CORR_SPEARMAN", "VAR", "STDDEV_POP", "VAR_POP", "STDDEV_SAMP", "VAR_SAMP", 
			"PREDICTION", "PREDICTION_BOUNDS", "PREDICTION_COST", "PREDICTION_DETAILS", 
			"PREDICTION_PROBABILITY", "PREDICTION_SET", "CUME_DIST", "DENSE_RANK", 
			"LISTAGG", "PERCENT_RANK", "PERCENTILE_CONT", "PERCENTILE_DISC", "RANK", 
			"AVG", "CORR", "LAG", "LEAD", "MAX", "MEDIAN", "MIN", "NTILE", "RATIO_TO_REPORT", 
			"ROW_NUMBER", "SUM", "VARIANCE", "REGR_", "STDDEV", "VAR_", "COVAR_", 
			"NATIONAL_CHAR_STRING_LIT", "BIT_STRING_LIT", "HEX_STRING_LIT", "DOUBLE_PERIOD", 
			"PERIOD", "UNSIGNED_INTEGER", "APPROXIMATE_NUM_LIT", "CHAR_STRING", "DELIMITED_ID", 
			"PERCENT", "AMPERSAND", "LEFT_PAREN", "RIGHT_PAREN", "DOUBLE_ASTERISK", 
			"ASTERISK", "PLUS_SIGN", "MINUS_SIGN", "COMMA", "SOLIDUS", "AT_SIGN", 
			"ASSIGN_OP", "BINDVAR", "COLON", "SEMICOLON", "LESS_THAN_OR_EQUALS_OP", 
			"LESS_THAN_OP", "GREATER_THAN_OR_EQUALS_OP", "NOT_EQUAL_OP", "CARRET_OPERATOR_PART", 
			"TILDE_OPERATOR_PART", "EXCLAMATION_OPERATOR_PART", "GREATER_THAN_OP", 
			"CONCATENATION_OP", "VERTICAL_BAR", "EQUALS_OP", "LEFT_BRACKET", "RIGHT_BRACKET", 
			"INTRODUCER", "SPACES", "SINGLE_LINE_COMMENT", "MULTI_LINE_COMMENT", 
			"PROMPT", "REGULAR_ID"
		};
	}
	private static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}

	@Override
	public String getGrammarFileName() { return "Hana.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public HanaParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	public static class Swallow_to_semiContext extends ParserRuleContext {
		public List<TerminalNode> SEMICOLON() { return getTokens(HanaParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(HanaParser.SEMICOLON, i);
		}
		public Swallow_to_semiContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_swallow_to_semi; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSwallow_to_semi(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSwallow_to_semi(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSwallow_to_semi(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Swallow_to_semiContext swallow_to_semi() throws RecognitionException {
		Swallow_to_semiContext _localctx = new Swallow_to_semiContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_swallow_to_semi);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(863); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(862);
				_la = _input.LA(1);
				if ( _la <= 0 || (_la==SEMICOLON) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				}
				setState(865); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ALTER) | (1L << ALPHANUM) | (1L << ANALYZE) | (1L << AND) | (1L << ANY) | (1L << ARRAY) | (1L << AS) | (1L << ASC) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BETWEEN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIGINT) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BREADTH) | (1L << BULK) | (1L << BY) | (1L << BYTE) | (1L << C_LETTER) | (1L << CACHE) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHECK) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DEPTH - 64)) | (1L << (DESC - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DROP - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (ELSE - 64)) | (1L << (ELSIF - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (END - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXCLUSIVE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FROM - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUP - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HAVING - 128)) | (1L << (HANDLER - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEX - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERSECT - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 192)) & ~0x3f) == 0 && ((1L << (_la - 192)) & ((1L << (INTO - 192)) | (1L << (INVALIDATE - 192)) | (1L << (INVOKER - 192)) | (1L << (IS - 192)) | (1L << (ISOLATION - 192)) | (1L << (ITERATE - 192)) | (1L << (JAVA - 192)) | (1L << (JOIN - 192)) | (1L << (KEEP - 192)) | (1L << (LANGUAGE - 192)) | (1L << (LAST - 192)) | (1L << (LAST_VALUE - 192)) | (1L << (LEADING - 192)) | (1L << (LEFT - 192)) | (1L << (LEVEL - 192)) | (1L << (LIBRARY - 192)) | (1L << (LIKE - 192)) | (1L << (LIKE2 - 192)) | (1L << (LIKE4 - 192)) | (1L << (LIKEC - 192)) | (1L << (LIMIT - 192)) | (1L << (LOCAL - 192)) | (1L << (LOCK - 192)) | (1L << (LOCKED - 192)) | (1L << (LOG - 192)) | (1L << (LOGOFF - 192)) | (1L << (LOGON - 192)) | (1L << (LONG - 192)) | (1L << (LOOP - 192)) | (1L << (MAIN - 192)) | (1L << (MAP - 192)) | (1L << (MATCHED - 192)) | (1L << (MAXVALUE - 192)) | (1L << (MEASURES - 192)) | (1L << (MEMBER - 192)) | (1L << (MERGE - 192)) | (1L << (MINUS - 192)) | (1L << (MINUTE - 192)) | (1L << (MINVALUE - 192)) | (1L << (MLSLABEL - 192)) | (1L << (MODE - 192)) | (1L << (MODEL - 192)) | (1L << (MODIFY - 192)) | (1L << (MONTH - 192)) | (1L << (MULTISET - 192)) | (1L << (NAME - 192)) | (1L << (NAN - 192)) | (1L << (NATURAL - 192)) | (1L << (NATURALN - 192)) | (1L << (NAV - 192)) | (1L << (NCHAR - 192)) | (1L << (NCHAR_CS - 192)) | (1L << (NCLOB - 192)) | (1L << (NESTED - 192)) | (1L << (NEW - 192)) | (1L << (NO - 192)) | (1L << (NOAUDIT - 192)) | (1L << (NOCACHE - 192)) | (1L << (NOCOPY - 192)) | (1L << (NOCYCLE - 192)) | (1L << (NOENTITYESCAPING - 192)) | (1L << (NOMAXVALUE - 192)) | (1L << (NOMINVALUE - 192)) | (1L << (NONE - 192)))) != 0) || ((((_la - 256)) & ~0x3f) == 0 && ((1L << (_la - 256)) & ((1L << (NOORDER - 256)) | (1L << (NOSCHEMACHECK - 256)) | (1L << (NOT - 256)) | (1L << (NOWAIT - 256)) | (1L << (NULL - 256)) | (1L << (NULLS - 256)) | (1L << (NUMBER - 256)) | (1L << (NUMERIC - 256)) | (1L << (NVARCHAR - 256)) | (1L << (OBJECT - 256)) | (1L << (OF - 256)) | (1L << (OFF - 256)) | (1L << (OID - 256)) | (1L << (OLD - 256)) | (1L << (ON - 256)) | (1L << (ONLY - 256)) | (1L << (OPEN - 256)) | (1L << (OPTION - 256)) | (1L << (OR - 256)) | (1L << (ORADATA - 256)) | (1L << (ORDER - 256)) | (1L << (ORDINALITY - 256)) | (1L << (OSERROR - 256)) | (1L << (OUT - 256)) | (1L << (OUTER - 256)) | (1L << (OVER - 256)) | (1L << (OVERRIDING - 256)) | (1L << (PACKAGE - 256)) | (1L << (PARALLEL_ENABLE - 256)) | (1L << (PARAMETERS - 256)) | (1L << (PARENT - 256)) | (1L << (PARTITION - 256)) | (1L << (PASSING - 256)) | (1L << (PATH - 256)) | (1L << (PERCENT_ROWTYPE - 256)) | (1L << (PERCENT_TYPE - 256)) | (1L << (PIPELINED - 256)) | (1L << (PIVOT - 256)) | (1L << (PLAN - 256)) | (1L << (PLS_INTEGER - 256)) | (1L << (POSITIVE - 256)) | (1L << (POSITIVEN - 256)) | (1L << (PRAGMA - 256)) | (1L << (PRECEDING - 256)) | (1L << (PRECISION - 256)) | (1L << (PRESENT - 256)) | (1L << (PRIOR - 256)) | (1L << (PROCEDURE - 256)) | (1L << (RAISE - 256)) | (1L << (RANGE - 256)) | (1L << (RAW - 256)) | (1L << (READ - 256)) | (1L << (READS - 256)) | (1L << (REAL - 256)) | (1L << (RECORD - 256)) | (1L << (REF - 256)) | (1L << (REFERENCE - 256)) | (1L << (REFERENCING - 256)) | (1L << (REJECT - 256)) | (1L << (RELIES_ON - 256)) | (1L << (RENAME - 256)) | (1L << (REPLACE - 256)) | (1L << (RESPECT - 256)) | (1L << (RESTRICT_REFERENCES - 256)))) != 0) || ((((_la - 320)) & ~0x3f) == 0 && ((1L << (_la - 320)) & ((1L << (RESULT - 320)) | (1L << (RESULT_CACHE - 320)) | (1L << (RETURN - 320)) | (1L << (RETURNS - 320)) | (1L << (RETURNING - 320)) | (1L << (REUSE - 320)) | (1L << (REVERSE - 320)) | (1L << (REVOKE - 320)) | (1L << (RIGHT - 320)) | (1L << (ROLLBACK - 320)) | (1L << (ROLLUP - 320)) | (1L << (ROW - 320)) | (1L << (ROWID - 320)) | (1L << (ROWS - 320)) | (1L << (RULES - 320)) | (1L << (SAMPLE - 320)) | (1L << (SAVE - 320)) | (1L << (SAVEPOINT - 320)) | (1L << (SCHEMA - 320)) | (1L << (SCHEMACHECK - 320)) | (1L << (SCN - 320)) | (1L << (SEARCH - 320)) | (1L << (SECOND - 320)) | (1L << (SECONDDATE - 320)) | (1L << (SECURITY - 320)) | (1L << (SEED - 320)) | (1L << (SEGMENT - 320)) | (1L << (SELECT - 320)) | (1L << (SELF - 320)) | (1L << (SEQUENCE - 320)) | (1L << (SEQUENTIAL - 320)) | (1L << (SERIALIZABLE - 320)) | (1L << (SERIALLY_REUSABLE - 320)) | (1L << (SERVERERROR - 320)) | (1L << (SESSIONTIMEZONE - 320)) | (1L << (SET - 320)) | (1L << (SETS - 320)) | (1L << (SETTINGS - 320)) | (1L << (SHARE - 320)) | (1L << (SHOW - 320)) | (1L << (SHUTDOWN - 320)) | (1L << (SIBLINGS - 320)) | (1L << (SIGNTYPE - 320)) | (1L << (SIMPLE_INTEGER - 320)) | (1L << (SINGLE - 320)) | (1L << (SIZE - 320)) | (1L << (SKIP_ - 320)) | (1L << (SMALLINT - 320)) | (1L << (SMALLDECIMAL - 320)) | (1L << (SNAPSHOT - 320)) | (1L << (SOME - 320)) | (1L << (SPECIFICATION - 320)) | (1L << (SQL - 320)) | (1L << (SQLDATA - 320)) | (1L << (SQLERROR - 320)) | (1L << (SQLEXCEPTION - 320)) | (1L << (SQLSCRIPT - 320)) | (1L << (STANDALONE - 320)) | (1L << (START - 320)) | (1L << (STARTUP - 320)) | (1L << (STATEMENT - 320)) | (1L << (STATEMENT_ID - 320)) | (1L << (STATIC - 320)) | (1L << (STATISTICS - 320)))) != 0) || ((((_la - 384)) & ~0x3f) == 0 && ((1L << (_la - 384)) & ((1L << (STRING - 384)) | (1L << (SUBMULTISET - 384)) | (1L << (SUBPARTITION - 384)) | (1L << (SUBSTITUTABLE - 384)) | (1L << (SUBTYPE - 384)) | (1L << (SUCCESS - 384)) | (1L << (SUSPEND - 384)) | (1L << (TABLE - 384)) | (1L << (THE - 384)) | (1L << (THEN - 384)) | (1L << (TIME - 384)) | (1L << (TIMESTAMP - 384)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 384)) | (1L << (TIMESTAMP_UNCONSTRAINED - 384)) | (1L << (TIMEZONE_ABBR - 384)) | (1L << (TIMEZONE_HOUR - 384)) | (1L << (TIMEZONE_MINUTE - 384)) | (1L << (TIMEZONE_REGION - 384)) | (1L << (TINYINT - 384)) | (1L << (TO - 384)) | (1L << (TRAILING - 384)) | (1L << (TRANSACTION - 384)) | (1L << (TRANSLATE - 384)) | (1L << (TREAT - 384)) | (1L << (TRIGGER - 384)) | (1L << (TRIM - 384)) | (1L << (TRUE - 384)) | (1L << (TRUNCATE - 384)) | (1L << (TYPE - 384)) | (1L << (UNBOUNDED - 384)) | (1L << (UNDER - 384)) | (1L << (UNION - 384)) | (1L << (UNIQUE - 384)) | (1L << (UNLIMITED - 384)) | (1L << (UNPIVOT - 384)) | (1L << (UNTIL - 384)) | (1L << (UPDATE - 384)) | (1L << (UPDATED - 384)) | (1L << (UPSERT - 384)) | (1L << (UROWID - 384)) | (1L << (USE - 384)) | (1L << (USING - 384)) | (1L << (VALIDATE - 384)) | (1L << (VALUE - 384)) | (1L << (VALUES - 384)) | (1L << (VARCHAR - 384)) | (1L << (VARCHAR2 - 384)) | (1L << (VARIABLE - 384)) | (1L << (VARRAY - 384)) | (1L << (VARYING - 384)) | (1L << (VERSION - 384)) | (1L << (VERSIONS - 384)) | (1L << (VIEW - 384)) | (1L << (WAIT - 384)) | (1L << (WARNING - 384)) | (1L << (WELLFORMED - 384)) | (1L << (WHEN - 384)) | (1L << (WHENEVER - 384)) | (1L << (WHERE - 384)) | (1L << (WHILE - 384)) | (1L << (WITH - 384)) | (1L << (WITHIN - 384)) | (1L << (WORK - 384)))) != 0) || ((((_la - 448)) & ~0x3f) == 0 && ((1L << (_la - 448)) & ((1L << (WRITE - 448)) | (1L << (XML - 448)) | (1L << (XMLAGG - 448)) | (1L << (XMLATTRIBUTES - 448)) | (1L << (XMLCAST - 448)) | (1L << (XMLCOLATTVAL - 448)) | (1L << (XMLELEMENT - 448)) | (1L << (XMLEXISTS - 448)) | (1L << (XMLFOREST - 448)) | (1L << (XMLNAMESPACES - 448)) | (1L << (XMLPARSE - 448)) | (1L << (XMLPI - 448)) | (1L << (XMLQUERY - 448)) | (1L << (XMLROOT - 448)) | (1L << (XMLSERIALIZE - 448)) | (1L << (XMLTABLE - 448)) | (1L << (YEAR - 448)) | (1L << (YES - 448)) | (1L << (YMINTERVAL_UNCONSTRAINED - 448)) | (1L << (ZONE - 448)) | (1L << (AUTONOMOUS - 448)) | (1L << (CONDITION - 448)) | (1L << (ELSEIF - 448)) | (1L << (EXECUTION - 448)) | (1L << (OVERVIEW - 448)) | (1L << (RESIGNAL - 448)) | (1L << (MESSAGE_TEXT - 448)) | (1L << (SHORTTEXT - 448)) | (1L << (SIGNAL - 448)) | (1L << (SQL_ERROR_CODE - 448)) | (1L << (SQL_ERROR_MESSAGE - 448)) | (1L << (SQLWARNING - 448)) | (1L << (TEXT - 448)) | (1L << (UNNEST - 448)) | (1L << (VARBINARY - 448)) | (1L << (STRING_AGG - 448)) | (1L << (CORR_SPEARMAN - 448)) | (1L << (VAR - 448)) | (1L << (STDDEV_POP - 448)) | (1L << (VAR_POP - 448)) | (1L << (STDDEV_SAMP - 448)) | (1L << (VAR_SAMP - 448)) | (1L << (PREDICTION - 448)) | (1L << (PREDICTION_BOUNDS - 448)) | (1L << (PREDICTION_COST - 448)) | (1L << (PREDICTION_DETAILS - 448)) | (1L << (PREDICTION_PROBABILITY - 448)) | (1L << (PREDICTION_SET - 448)) | (1L << (CUME_DIST - 448)) | (1L << (DENSE_RANK - 448)) | (1L << (LISTAGG - 448)) | (1L << (PERCENT_RANK - 448)) | (1L << (PERCENTILE_CONT - 448)) | (1L << (PERCENTILE_DISC - 448)) | (1L << (RANK - 448)) | (1L << (AVG - 448)) | (1L << (CORR - 448)) | (1L << (LAG - 448)) | (1L << (LEAD - 448)) | (1L << (MAX - 448)) | (1L << (MEDIAN - 448)) | (1L << (MIN - 448)) | (1L << (NTILE - 448)) | (1L << (RATIO_TO_REPORT - 448)))) != 0) || ((((_la - 512)) & ~0x3f) == 0 && ((1L << (_la - 512)) & ((1L << (ROW_NUMBER - 512)) | (1L << (SUM - 512)) | (1L << (VARIANCE - 512)) | (1L << (REGR_ - 512)) | (1L << (STDDEV - 512)) | (1L << (VAR_ - 512)) | (1L << (COVAR_ - 512)) | (1L << (NATIONAL_CHAR_STRING_LIT - 512)) | (1L << (BIT_STRING_LIT - 512)) | (1L << (HEX_STRING_LIT - 512)) | (1L << (DOUBLE_PERIOD - 512)) | (1L << (PERIOD - 512)) | (1L << (UNSIGNED_INTEGER - 512)) | (1L << (APPROXIMATE_NUM_LIT - 512)) | (1L << (CHAR_STRING - 512)) | (1L << (DELIMITED_ID - 512)) | (1L << (PERCENT - 512)) | (1L << (AMPERSAND - 512)) | (1L << (LEFT_PAREN - 512)) | (1L << (RIGHT_PAREN - 512)) | (1L << (DOUBLE_ASTERISK - 512)) | (1L << (ASTERISK - 512)) | (1L << (PLUS_SIGN - 512)) | (1L << (MINUS_SIGN - 512)) | (1L << (COMMA - 512)) | (1L << (SOLIDUS - 512)) | (1L << (AT_SIGN - 512)) | (1L << (ASSIGN_OP - 512)) | (1L << (BINDVAR - 512)) | (1L << (COLON - 512)) | (1L << (LESS_THAN_OR_EQUALS_OP - 512)) | (1L << (LESS_THAN_OP - 512)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 512)) | (1L << (NOT_EQUAL_OP - 512)) | (1L << (CARRET_OPERATOR_PART - 512)) | (1L << (TILDE_OPERATOR_PART - 512)) | (1L << (EXCLAMATION_OPERATOR_PART - 512)) | (1L << (GREATER_THAN_OP - 512)) | (1L << (CONCATENATION_OP - 512)) | (1L << (VERTICAL_BAR - 512)) | (1L << (EQUALS_OP - 512)) | (1L << (LEFT_BRACKET - 512)) | (1L << (RIGHT_BRACKET - 512)) | (1L << (INTRODUCER - 512)) | (1L << (SPACES - 512)) | (1L << (SINGLE_LINE_COMMENT - 512)) | (1L << (MULTI_LINE_COMMENT - 512)) | (1L << (PROMPT - 512)) | (1L << (REGULAR_ID - 512)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compilation_unitContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(HanaParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Compilation_unitContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compilation_unit; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCompilation_unit(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCompilation_unit(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCompilation_unit(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compilation_unitContext compilation_unit() throws RecognitionException {
		Compilation_unitContext _localctx = new Compilation_unitContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_compilation_unit);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(870);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (CREATE - 85)) | (1L << (DECLARE - 85)) | (1L << (DELETE - 85)) | (1L << (DROP - 85)) | (1L << (EXPLAIN - 85)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (FUNCTION - 159)) | (1L << (INSERT - 159)) | (1L << (LOCK - 159)))) != 0) || _la==MERGE || _la==SELECT || _la==SET || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(867);
				unit_statement();
				}
				}
				setState(872);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(873);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_scriptContext extends ParserRuleContext {
		public TerminalNode EOF() { return getToken(HanaParser.EOF, 0); }
		public List<Unit_statementContext> unit_statement() {
			return getRuleContexts(Unit_statementContext.class);
		}
		public Unit_statementContext unit_statement(int i) {
			return getRuleContext(Unit_statementContext.class,i);
		}
		public Sql_scriptContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_script; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSql_script(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSql_script(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSql_script(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_scriptContext sql_script() throws RecognitionException {
		Sql_scriptContext _localctx = new Sql_scriptContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_sql_script);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (((((_la - 85)) & ~0x3f) == 0 && ((1L << (_la - 85)) & ((1L << (CREATE - 85)) | (1L << (DECLARE - 85)) | (1L << (DELETE - 85)) | (1L << (DROP - 85)) | (1L << (EXPLAIN - 85)))) != 0) || ((((_la - 159)) & ~0x3f) == 0 && ((1L << (_la - 159)) & ((1L << (FUNCTION - 159)) | (1L << (INSERT - 159)) | (1L << (LOCK - 159)))) != 0) || _la==MERGE || _la==SELECT || _la==SET || _la==UPDATE || _la==WITH || _la==LEFT_PAREN) {
				{
				{
				setState(875);
				unit_statement();
				}
				}
				setState(880);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(881);
			match(EOF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unit_statementContext extends ParserRuleContext {
		public Set_schemaContext set_schema() {
			return getRuleContext(Set_schemaContext.class,0);
		}
		public Create_func_bodyContext create_func_body() {
			return getRuleContext(Create_func_bodyContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Create_sequenceContext create_sequence() {
			return getRuleContext(Create_sequenceContext.class,0);
		}
		public Drop_procedureContext drop_procedure() {
			return getRuleContext(Drop_procedureContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUnit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUnit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUnit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unit_statementContext unit_statement() throws RecognitionException {
		Unit_statementContext _localctx = new Unit_statementContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_unit_statement);
		try {
			setState(889);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(883);
				set_schema();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(884);
				create_func_body();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(885);
				create_procedure_body();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(886);
				create_sequence();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(887);
				drop_procedure();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(888);
				data_manipulation_language_statements();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_schemaContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		public TerminalNode SCHEMA() { return getToken(HanaParser.SCHEMA, 0); }
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Set_schemaContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_schema; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSet_schema(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSet_schema(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSet_schema(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_schemaContext set_schema() throws RecognitionException {
		Set_schemaContext _localctx = new Set_schemaContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_set_schema);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(891);
			match(SET);
			setState(892);
			match(SCHEMA);
			setState(893);
			schema_name();
			setState(894);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Drop_procedureContext extends ParserRuleContext {
		public TerminalNode DROP() { return getToken(HanaParser.DROP, 0); }
		public TerminalNode PROCEDURE() { return getToken(HanaParser.PROCEDURE, 0); }
		public Proc_nameContext proc_name() {
			return getRuleContext(Proc_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Drop_procedureContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_drop_procedure; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDrop_procedure(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDrop_procedure(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDrop_procedure(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Drop_procedureContext drop_procedure() throws RecognitionException {
		Drop_procedureContext _localctx = new Drop_procedureContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_drop_procedure);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(896);
			match(DROP);
			setState(897);
			match(PROCEDURE);
			setState(898);
			proc_name();
			setState(899);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_procedure_bodyContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(HanaParser.CREATE, 0); }
		public TerminalNode PROCEDURE() { return getToken(HanaParser.PROCEDURE, 0); }
		public Proc_nameContext proc_name() {
			return getRuleContext(Proc_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public TerminalNode BEGIN() { return getToken(HanaParser.BEGIN, 0); }
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Parameter_clauseContext parameter_clause() {
			return getRuleContext(Parameter_clauseContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(HanaParser.LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public List<TerminalNode> SQL() { return getTokens(HanaParser.SQL); }
		public TerminalNode SQL(int i) {
			return getToken(HanaParser.SQL, i);
		}
		public TerminalNode SECURITY() { return getToken(HanaParser.SECURITY, 0); }
		public Security_modeContext security_mode() {
			return getRuleContext(Security_modeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		public TerminalNode SCHEMA() { return getToken(HanaParser.SCHEMA, 0); }
		public Default_schema_nameContext default_schema_name() {
			return getRuleContext(Default_schema_nameContext.class,0);
		}
		public TerminalNode READS() { return getToken(HanaParser.READS, 0); }
		public TerminalNode DATA() { return getToken(HanaParser.DATA, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(HanaParser.SEQUENTIAL, 0); }
		public TerminalNode EXECUTION() { return getToken(HanaParser.EXECUTION, 0); }
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		public TerminalNode RESULT() { return getToken(HanaParser.RESULT, 0); }
		public TerminalNode VIEW() { return getToken(HanaParser.VIEW, 0); }
		public View_nameContext view_name() {
			return getRuleContext(View_nameContext.class,0);
		}
		public Create_procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCreate_procedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCreate_procedure_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCreate_procedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_procedure_bodyContext create_procedure_body() throws RecognitionException {
		Create_procedure_bodyContext _localctx = new Create_procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_create_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(901);
			match(CREATE);
			setState(902);
			match(PROCEDURE);
			setState(903);
			proc_name();
			setState(905);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(904);
				parameter_clause();
				}
			}

			setState(909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LANGUAGE) {
				{
				setState(907);
				match(LANGUAGE);
				setState(908);
				lang();
				}
			}

			setState(914);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(911);
				match(SQL);
				setState(912);
				match(SECURITY);
				setState(913);
				security_mode();
				}
			}

			setState(919);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(916);
				match(DEFAULT);
				setState(917);
				match(SCHEMA);
				setState(918);
				default_schema_name();
				}
			}

			setState(930);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READS) {
				{
				setState(921);
				match(READS);
				setState(922);
				match(SQL);
				setState(923);
				match(DATA);
				setState(928);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(924);
					match(WITH);
					setState(925);
					match(RESULT);
					setState(926);
					match(VIEW);
					setState(927);
					view_name();
					}
				}

				}
			}

			setState(932);
			match(AS);
			setState(933);
			match(BEGIN);
			setState(936);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
			case 1:
				{
				setState(934);
				match(SEQUENTIAL);
				setState(935);
				match(EXECUTION);
				}
				break;
			}
			setState(938);
			procedure_body();
			setState(939);
			match(END);
			setState(940);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_func_bodyContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(HanaParser.FUNCTION, 0); }
		public Proc_nameContext proc_name() {
			return getRuleContext(Proc_nameContext.class,0);
		}
		public TerminalNode RETURNS() { return getToken(HanaParser.RETURNS, 0); }
		public Return_typeContext return_type() {
			return getRuleContext(Return_typeContext.class,0);
		}
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public TerminalNode BEGIN() { return getToken(HanaParser.BEGIN, 0); }
		public Procedure_bodyContext procedure_body() {
			return getRuleContext(Procedure_bodyContext.class,0);
		}
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Parameter_clauseContext parameter_clause() {
			return getRuleContext(Parameter_clauseContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(HanaParser.LANGUAGE, 0); }
		public LangContext lang() {
			return getRuleContext(LangContext.class,0);
		}
		public List<TerminalNode> SQL() { return getTokens(HanaParser.SQL); }
		public TerminalNode SQL(int i) {
			return getToken(HanaParser.SQL, i);
		}
		public TerminalNode SECURITY() { return getToken(HanaParser.SECURITY, 0); }
		public Security_modeContext security_mode() {
			return getRuleContext(Security_modeContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		public TerminalNode SCHEMA() { return getToken(HanaParser.SCHEMA, 0); }
		public Default_schema_nameContext default_schema_name() {
			return getRuleContext(Default_schema_nameContext.class,0);
		}
		public TerminalNode READS() { return getToken(HanaParser.READS, 0); }
		public TerminalNode DATA() { return getToken(HanaParser.DATA, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(HanaParser.SEQUENTIAL, 0); }
		public TerminalNode EXECUTION() { return getToken(HanaParser.EXECUTION, 0); }
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		public TerminalNode RESULT() { return getToken(HanaParser.RESULT, 0); }
		public TerminalNode VIEW() { return getToken(HanaParser.VIEW, 0); }
		public View_nameContext view_name() {
			return getRuleContext(View_nameContext.class,0);
		}
		public Create_func_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_func_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCreate_func_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCreate_func_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCreate_func_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_func_bodyContext create_func_body() throws RecognitionException {
		Create_func_bodyContext _localctx = new Create_func_bodyContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_create_func_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(942);
			match(FUNCTION);
			setState(943);
			proc_name();
			setState(945);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(944);
				parameter_clause();
				}
			}

			setState(947);
			match(RETURNS);
			setState(948);
			return_type();
			setState(951);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LANGUAGE) {
				{
				setState(949);
				match(LANGUAGE);
				setState(950);
				lang();
				}
			}

			setState(956);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SQL) {
				{
				setState(953);
				match(SQL);
				setState(954);
				match(SECURITY);
				setState(955);
				security_mode();
				}
			}

			setState(961);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(958);
				match(DEFAULT);
				setState(959);
				match(SCHEMA);
				setState(960);
				default_schema_name();
				}
			}

			setState(972);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==READS) {
				{
				setState(963);
				match(READS);
				setState(964);
				match(SQL);
				setState(965);
				match(DATA);
				setState(970);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(966);
					match(WITH);
					setState(967);
					match(RESULT);
					setState(968);
					match(VIEW);
					setState(969);
					view_name();
					}
				}

				}
			}

			setState(974);
			match(AS);
			setState(975);
			match(BEGIN);
			setState(978);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				{
				setState(976);
				match(SEQUENTIAL);
				setState(977);
				match(EXECUTION);
				}
				break;
			}
			setState(980);
			procedure_body();
			setState(981);
			match(END);
			setState(982);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Param_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParam_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParam_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParam_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_nameContext param_name() throws RecognitionException {
		Param_nameContext _localctx = new Param_nameContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_param_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(984);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_typeContext extends ParserRuleContext {
		public Param_listContext param_list() {
			return getRuleContext(Param_listContext.class,0);
		}
		public Return_table_typeContext return_table_type() {
			return getRuleContext(Return_table_typeContext.class,0);
		}
		public Return_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterReturn_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitReturn_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitReturn_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_typeContext return_type() throws RecognitionException {
		Return_typeContext _localctx = new Return_typeContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_return_type);
		try {
			setState(988);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__6:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case BINDVAR:
			case COLON:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(986);
				param_list();
				}
				break;
			case TABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(987);
				return_table_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_table_typeContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		public Column_list_definitionContext column_list_definition() {
			return getRuleContext(Column_list_definitionContext.class,0);
		}
		public Return_table_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_table_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterReturn_table_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitReturn_table_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitReturn_table_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_table_typeContext return_table_type() throws RecognitionException {
		Return_table_typeContext _localctx = new Return_table_typeContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_return_table_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(990);
			match(TABLE);
			setState(991);
			column_list_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_typeContext extends ParserRuleContext {
		public Sql_typeContext sql_type() {
			return getRuleContext(Sql_typeContext.class,0);
		}
		public Table_typeContext table_type() {
			return getRuleContext(Table_typeContext.class,0);
		}
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public Param_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParam_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParam_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParam_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_typeContext param_type() throws RecognitionException {
		Param_typeContext _localctx = new Param_typeContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_param_type);
		try {
			setState(996);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(993);
				sql_type();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(994);
				table_type();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(995);
				table_type_definition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_typeContext extends ParserRuleContext {
		public TerminalNode DATE() { return getToken(HanaParser.DATE, 0); }
		public TerminalNode TIME() { return getToken(HanaParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(HanaParser.TIMESTAMP, 0); }
		public TerminalNode SECONDDATE() { return getToken(HanaParser.SECONDDATE, 0); }
		public TerminalNode TINYINT() { return getToken(HanaParser.TINYINT, 0); }
		public TerminalNode SMALLINT() { return getToken(HanaParser.SMALLINT, 0); }
		public TerminalNode INTEGER() { return getToken(HanaParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(HanaParser.INT, 0); }
		public TerminalNode BIGINT() { return getToken(HanaParser.BIGINT, 0); }
		public TerminalNode DECIMAL() { return getToken(HanaParser.DECIMAL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		public TerminalNode SMALLDECIMAL() { return getToken(HanaParser.SMALLDECIMAL, 0); }
		public TerminalNode REAL() { return getToken(HanaParser.REAL, 0); }
		public TerminalNode DOUBLE() { return getToken(HanaParser.DOUBLE, 0); }
		public TerminalNode VARCHAR() { return getToken(HanaParser.VARCHAR, 0); }
		public TerminalNode NVARCHAR() { return getToken(HanaParser.NVARCHAR, 0); }
		public TerminalNode ALPHANUM() { return getToken(HanaParser.ALPHANUM, 0); }
		public TerminalNode VARBINARY() { return getToken(HanaParser.VARBINARY, 0); }
		public TerminalNode BLOB() { return getToken(HanaParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(HanaParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(HanaParser.NCLOB, 0); }
		public Sql_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSql_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSql_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSql_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_typeContext sql_type() throws RecognitionException {
		Sql_typeContext _localctx = new Sql_typeContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_sql_type);
		int _la;
		try {
			setState(1052);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(998);
				match(DATE);
				}
				break;
			case TIME:
				enterOuterAlt(_localctx, 2);
				{
				setState(999);
				match(TIME);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 3);
				{
				setState(1000);
				match(TIMESTAMP);
				}
				break;
			case SECONDDATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1001);
				match(SECONDDATE);
				}
				break;
			case TINYINT:
				enterOuterAlt(_localctx, 5);
				{
				setState(1002);
				match(TINYINT);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 6);
				{
				setState(1003);
				match(SMALLINT);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 7);
				{
				setState(1004);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 8);
				{
				setState(1005);
				match(INT);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 9);
				{
				setState(1006);
				match(BIGINT);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 10);
				{
				setState(1007);
				match(DECIMAL);
				setState(1016);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1008);
					match(LEFT_PAREN);
					setState(1009);
					numeric();
					setState(1012);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(1010);
						match(COMMA);
						setState(1011);
						numeric();
						}
					}

					setState(1014);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case SMALLDECIMAL:
				enterOuterAlt(_localctx, 11);
				{
				setState(1018);
				match(SMALLDECIMAL);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 12);
				{
				setState(1019);
				match(REAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 13);
				{
				setState(1020);
				match(DOUBLE);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 14);
				{
				setState(1021);
				match(VARCHAR);
				setState(1026);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1022);
					match(LEFT_PAREN);
					setState(1023);
					numeric();
					setState(1024);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case NVARCHAR:
				enterOuterAlt(_localctx, 15);
				{
				setState(1028);
				match(NVARCHAR);
				setState(1033);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1029);
					match(LEFT_PAREN);
					setState(1030);
					numeric();
					setState(1031);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case ALPHANUM:
				enterOuterAlt(_localctx, 16);
				{
				setState(1035);
				match(ALPHANUM);
				setState(1040);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1036);
					match(LEFT_PAREN);
					setState(1037);
					numeric();
					setState(1038);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case VARBINARY:
				enterOuterAlt(_localctx, 17);
				{
				setState(1042);
				match(VARBINARY);
				setState(1047);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1043);
					match(LEFT_PAREN);
					setState(1044);
					numeric();
					setState(1045);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 18);
				{
				setState(1049);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 19);
				{
				setState(1050);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 20);
				{
				setState(1051);
				match(NCLOB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_typeContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Table_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_typeContext table_type() throws RecognitionException {
		Table_typeContext _localctx = new Table_typeContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_table_type);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1054);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_definitionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		public Column_list_definitionContext column_list_definition() {
			return getRuleContext(Column_list_definitionContext.class,0);
		}
		public Table_type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_type_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_type_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_type_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_definitionContext table_type_definition() throws RecognitionException {
		Table_type_definitionContext _localctx = new Table_type_definitionContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_table_type_definition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1056);
			match(TABLE);
			setState(1057);
			column_list_definition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_list_definitionContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Column_elemContext> column_elem() {
			return getRuleContexts(Column_elemContext.class);
		}
		public Column_elemContext column_elem(int i) {
			return getRuleContext(Column_elemContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Column_list_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_list_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_list_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_list_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_list_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_list_definitionContext column_list_definition() throws RecognitionException {
		Column_list_definitionContext _localctx = new Column_list_definitionContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_column_list_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1059);
			match(LEFT_PAREN);
			setState(1060);
			column_elem();
			setState(1065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1061);
				match(COMMA);
				setState(1062);
				column_elem();
				}
				}
				setState(1067);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1068);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_elemContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Column_elemContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_elem; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_elem(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_elem(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_elem(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_elemContext column_elem() throws RecognitionException {
		Column_elemContext _localctx = new Column_elemContext(_ctx, getState());
		enterRule(_localctx, 32, RULE_column_elem);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1070);
			column_name();
			setState(1071);
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_nameContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_nameContext column_name() throws RecognitionException {
		Column_nameContext _localctx = new Column_nameContext(_ctx, getState());
		enterRule(_localctx, 34, RULE_column_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1073);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_typeContext extends ParserRuleContext {
		public Sql_typeContext sql_type() {
			return getRuleContext(Sql_typeContext.class,0);
		}
		public TerminalNode SHORTTEXT() { return getToken(HanaParser.SHORTTEXT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode TEXT() { return getToken(HanaParser.TEXT, 0); }
		public Data_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterData_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitData_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitData_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_typeContext data_type() throws RecognitionException {
		Data_typeContext _localctx = new Data_typeContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_data_type);
		int _la;
		try {
			setState(1084);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALPHANUM:
			case BIGINT:
			case BLOB:
			case CLOB:
			case DATE:
			case DECIMAL:
			case DOUBLE:
			case INT:
			case INTEGER:
			case NCLOB:
			case NVARCHAR:
			case REAL:
			case SECONDDATE:
			case SMALLINT:
			case SMALLDECIMAL:
			case TIME:
			case TIMESTAMP:
			case TINYINT:
			case VARCHAR:
			case VARBINARY:
				enterOuterAlt(_localctx, 1);
				{
				setState(1075);
				sql_type();
				}
				break;
			case SHORTTEXT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1076);
				match(SHORTTEXT);
				setState(1081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(1077);
					match(LEFT_PAREN);
					setState(1078);
					numeric();
					setState(1079);
					match(RIGHT_PAREN);
					}
				}

				}
				break;
			case TEXT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1083);
				match(TEXT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParameterContext extends ParserRuleContext {
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Param_typeContext param_type() {
			return getRuleContext(Param_typeContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public TerminalNode OUT() { return getToken(HanaParser.OUT, 0); }
		public TerminalNode INOUT() { return getToken(HanaParser.INOUT, 0); }
		public ParameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParameterContext parameter() throws RecognitionException {
		ParameterContext _localctx = new ParameterContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_parameter);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1087);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,30,_ctx) ) {
			case 1:
				{
				setState(1086);
				_la = _input.LA(1);
				if ( !(_la==IN || _la==INOUT || _la==OUT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(1089);
			param_name();
			setState(1090);
			param_type();
			setState(1092);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(1091);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<ParameterContext> parameter() {
			return getRuleContexts(ParameterContext.class);
		}
		public ParameterContext parameter(int i) {
			return getRuleContext(ParameterContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Parameter_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParameter_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParameter_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParameter_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_clauseContext parameter_clause() throws RecognitionException {
		Parameter_clauseContext _localctx = new Parameter_clauseContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_parameter_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1094);
			match(LEFT_PAREN);
			setState(1096);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1095);
				parameter();
				}
			}

			setState(1102);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1098);
				match(COMMA);
				setState(1099);
				parameter();
				}
				}
				setState(1104);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1105);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LangContext extends ParserRuleContext {
		public TerminalNode SQLSCRIPT() { return getToken(HanaParser.SQLSCRIPT, 0); }
		public LangContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lang; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLang(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLang(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLang(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LangContext lang() throws RecognitionException {
		LangContext _localctx = new LangContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_lang);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1107);
			_la = _input.LA(1);
			if ( !(_la==T__0 || _la==SQLSCRIPT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Security_modeContext extends ParserRuleContext {
		public TerminalNode DEFINER() { return getToken(HanaParser.DEFINER, 0); }
		public TerminalNode INVOKER() { return getToken(HanaParser.INVOKER, 0); }
		public Security_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_security_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSecurity_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSecurity_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSecurity_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Security_modeContext security_mode() throws RecognitionException {
		Security_modeContext _localctx = new Security_modeContext(_ctx, getState());
		enterRule(_localctx, 44, RULE_security_mode);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1109);
			_la = _input.LA(1);
			if ( !(_la==DEFINER || _la==INVOKER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_schema_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Default_schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDefault_schema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDefault_schema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDefault_schema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_schema_nameContext default_schema_name() throws RecognitionException {
		Default_schema_nameContext _localctx = new Default_schema_nameContext(_ctx, getState());
		enterRule(_localctx, 46, RULE_default_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1111);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class View_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public View_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_view_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterView_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitView_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitView_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final View_nameContext view_name() throws RecognitionException {
		View_nameContext _localctx = new View_nameContext(_ctx, getState());
		enterRule(_localctx, 48, RULE_view_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1113);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_listContext extends ParserRuleContext {
		public List<Proc_declContext> proc_decl() {
			return getRuleContexts(Proc_declContext.class);
		}
		public Proc_declContext proc_decl(int i) {
			return getRuleContext(Proc_declContext.class,i);
		}
		public Proc_decl_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_decl_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_decl_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_decl_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_decl_listContext proc_decl_list() throws RecognitionException {
		Proc_decl_listContext _localctx = new Proc_decl_listContext(_ctx, getState());
		enterRule(_localctx, 50, RULE_proc_decl_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1115);
			proc_decl();
			setState(1119);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1116);
					proc_decl();
					}
					} 
				}
				setState(1121);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_declContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		public Proc_decl_opContext proc_decl_op() {
			return getRuleContext(Proc_decl_opContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Proc_declContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_decl(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_decl(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_decl(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_declContext proc_decl() throws RecognitionException {
		Proc_declContext _localctx = new Proc_declContext(_ctx, getState());
		enterRule(_localctx, 52, RULE_proc_decl);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1122);
			match(DECLARE);
			setState(1123);
			proc_decl_op();
			setState(1124);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_opContext extends ParserRuleContext {
		public Proc_variableContext proc_variable() {
			return getRuleContext(Proc_variableContext.class,0);
		}
		public Proc_table_variableContext proc_table_variable() {
			return getRuleContext(Proc_table_variableContext.class,0);
		}
		public Proc_cursorContext proc_cursor() {
			return getRuleContext(Proc_cursorContext.class,0);
		}
		public Proc_conditionContext proc_condition() {
			return getRuleContext(Proc_conditionContext.class,0);
		}
		public Proc_decl_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_decl_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_decl_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_decl_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_decl_opContext proc_decl_op() throws RecognitionException {
		Proc_decl_opContext _localctx = new Proc_decl_opContext(_ctx, getState());
		enterRule(_localctx, 54, RULE_proc_decl_op);
		try {
			setState(1130);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,35,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1126);
				proc_variable();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1127);
				proc_table_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1128);
				proc_cursor();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1129);
				proc_condition();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_variableContext extends ParserRuleContext {
		public Variable_name_listContext variable_name_list() {
			return getRuleContext(Variable_name_listContext.class,0);
		}
		public Sql_typeContext sql_type() {
			return getRuleContext(Sql_typeContext.class,0);
		}
		public Array_datatypeContext array_datatype() {
			return getRuleContext(Array_datatypeContext.class,0);
		}
		public TerminalNode CONSTANT() { return getToken(HanaParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		public Proc_defaultContext proc_default() {
			return getRuleContext(Proc_defaultContext.class,0);
		}
		public Proc_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_variableContext proc_variable() throws RecognitionException {
		Proc_variableContext _localctx = new Proc_variableContext(_ctx, getState());
		enterRule(_localctx, 56, RULE_proc_variable);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1132);
			variable_name_list();
			setState(1134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CONSTANT) {
				{
				setState(1133);
				match(CONSTANT);
				}
			}

			setState(1138);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,37,_ctx) ) {
			case 1:
				{
				setState(1136);
				sql_type();
				}
				break;
			case 2:
				{
				setState(1137);
				array_datatype();
				}
				break;
			}
			setState(1142);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1140);
				match(NOT);
				setState(1141);
				match(NULL);
				}
			}

			setState(1145);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(1144);
				proc_default();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_table_variableContext extends ParserRuleContext {
		public Variable_name_listContext variable_name_list() {
			return getRuleContext(Variable_name_listContext.class,0);
		}
		public Table_type_definitionContext table_type_definition() {
			return getRuleContext(Table_type_definitionContext.class,0);
		}
		public Table_typeContext table_type() {
			return getRuleContext(Table_typeContext.class,0);
		}
		public Proc_table_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_table_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_table_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_table_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_table_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_table_variableContext proc_table_variable() throws RecognitionException {
		Proc_table_variableContext _localctx = new Proc_table_variableContext(_ctx, getState());
		enterRule(_localctx, 58, RULE_proc_table_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1147);
			variable_name_list();
			setState(1150);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(1148);
				table_type_definition();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(1149);
				table_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_name_listContext extends ParserRuleContext {
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		public Variable_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterVariable_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitVariable_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitVariable_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_name_listContext variable_name_list() throws RecognitionException {
		Variable_name_listContext _localctx = new Variable_name_listContext(_ctx, getState());
		enterRule(_localctx, 60, RULE_variable_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1152);
			variable_name();
			setState(1155);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(1153);
				match(COMMA);
				setState(1154);
				variable_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_datatypeContext extends ParserRuleContext {
		public Sql_typeContext sql_type() {
			return getRuleContext(Sql_typeContext.class,0);
		}
		public TerminalNode ARRAY() { return getToken(HanaParser.ARRAY, 0); }
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public Array_constructorContext array_constructor() {
			return getRuleContext(Array_constructorContext.class,0);
		}
		public Array_datatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterArray_datatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitArray_datatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitArray_datatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_datatypeContext array_datatype() throws RecognitionException {
		Array_datatypeContext _localctx = new Array_datatypeContext(_ctx, getState());
		enterRule(_localctx, 62, RULE_array_datatype);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1157);
			sql_type();
			setState(1158);
			match(ARRAY);
			{
			setState(1159);
			match(EQUALS_OP);
			setState(1160);
			array_constructor();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Array_constructorContext extends ParserRuleContext {
		public TerminalNode ARRAY() { return getToken(HanaParser.ARRAY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Array_constructorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_array_constructor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterArray_constructor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitArray_constructor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitArray_constructor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Array_constructorContext array_constructor() throws RecognitionException {
		Array_constructorContext _localctx = new Array_constructorContext(_ctx, getState());
		enterRule(_localctx, 64, RULE_array_constructor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1162);
			match(ARRAY);
			setState(1163);
			match(LEFT_PAREN);
			setState(1164);
			expression();
			setState(1169);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1165);
				match(COMMA);
				setState(1166);
				expression();
				}
				}
				setState(1171);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1172);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_defaultContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		public TerminalNode ASSIGN_OP() { return getToken(HanaParser.ASSIGN_OP, 0); }
		public Proc_defaultContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_default; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_default(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_default(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_default(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_defaultContext proc_default() throws RecognitionException {
		Proc_defaultContext _localctx = new Proc_defaultContext(_ctx, getState());
		enterRule(_localctx, 66, RULE_proc_default);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1174);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1175);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_cursorContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(HanaParser.CURSOR, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public Proc_cursor_param_listContext proc_cursor_param_list() {
			return getRuleContext(Proc_cursor_param_listContext.class,0);
		}
		public Proc_cursorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_cursor; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_cursor(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_cursor(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_cursor(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_cursorContext proc_cursor() throws RecognitionException {
		Proc_cursorContext _localctx = new Proc_cursorContext(_ctx, getState());
		enterRule(_localctx, 68, RULE_proc_cursor);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1177);
			match(CURSOR);
			setState(1178);
			cursor_name();
			setState(1180);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1179);
				proc_cursor_param_list();
				}
			}

			setState(1182);
			match(FOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_cursor_param_listContext extends ParserRuleContext {
		public List<Proc_cursor_paramContext> proc_cursor_param() {
			return getRuleContexts(Proc_cursor_paramContext.class);
		}
		public Proc_cursor_paramContext proc_cursor_param(int i) {
			return getRuleContext(Proc_cursor_paramContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Proc_cursor_param_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_cursor_param_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_cursor_param_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_cursor_param_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_cursor_param_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_cursor_param_listContext proc_cursor_param_list() throws RecognitionException {
		Proc_cursor_param_listContext _localctx = new Proc_cursor_param_listContext(_ctx, getState());
		enterRule(_localctx, 70, RULE_proc_cursor_param_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1184);
			proc_cursor_param();
			setState(1189);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1185);
				match(COMMA);
				setState(1186);
				proc_cursor_param();
				}
				}
				setState(1191);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Variable_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterVariable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitVariable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitVariable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_nameContext variable_name() throws RecognitionException {
		Variable_nameContext _localctx = new Variable_nameContext(_ctx, getState());
		enterRule(_localctx, 72, RULE_variable_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1192);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Cursor_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCursor_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCursor_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCursor_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_nameContext cursor_name() throws RecognitionException {
		Cursor_nameContext _localctx = new Cursor_nameContext(_ctx, getState());
		enterRule(_localctx, 74, RULE_cursor_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1194);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_cursor_paramContext extends ParserRuleContext {
		public Param_nameContext param_name() {
			return getRuleContext(Param_nameContext.class,0);
		}
		public Data_typeContext data_type() {
			return getRuleContext(Data_typeContext.class,0);
		}
		public Proc_cursor_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_cursor_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_cursor_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_cursor_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_cursor_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_cursor_paramContext proc_cursor_param() throws RecognitionException {
		Proc_cursor_paramContext _localctx = new Proc_cursor_paramContext(_ctx, getState());
		enterRule(_localctx, 76, RULE_proc_cursor_param);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1196);
			param_name();
			setState(1197);
			data_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_conditionContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode CONDITION() { return getToken(HanaParser.CONDITION, 0); }
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public Sql_error_codeContext sql_error_code() {
			return getRuleContext(Sql_error_codeContext.class,0);
		}
		public Proc_conditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_condition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_condition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_condition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_conditionContext proc_condition() throws RecognitionException {
		Proc_conditionContext _localctx = new Proc_conditionContext(_ctx, getState());
		enterRule(_localctx, 78, RULE_proc_condition);
		try {
			setState(1207);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,45,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1199);
				variable_name();
				setState(1200);
				match(CONDITION);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1202);
				variable_name();
				setState(1203);
				match(CONDITION);
				setState(1204);
				match(FOR);
				setState(1205);
				sql_error_code();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_error_codeContext extends ParserRuleContext {
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode SQL_ERROR_CODE() { return getToken(HanaParser.SQL_ERROR_CODE, 0); }
		public Sql_error_codeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_error_code; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSql_error_code(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSql_error_code(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSql_error_code(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_error_codeContext sql_error_code() throws RecognitionException {
		Sql_error_codeContext _localctx = new Sql_error_codeContext(_ctx, getState());
		enterRule(_localctx, 80, RULE_sql_error_code);
		try {
			setState(1212);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1209);
				numeric();
				}
				break;
			case SQL_ERROR_CODE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1210);
				match(SQL_ERROR_CODE);
				setState(1211);
				numeric();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_handler_listContext extends ParserRuleContext {
		public List<Proc_handlerContext> proc_handler() {
			return getRuleContexts(Proc_handlerContext.class);
		}
		public Proc_handlerContext proc_handler(int i) {
			return getRuleContext(Proc_handlerContext.class,i);
		}
		public Proc_handler_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_handler_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_handler_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_handler_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_handler_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_handler_listContext proc_handler_list() throws RecognitionException {
		Proc_handler_listContext _localctx = new Proc_handler_listContext(_ctx, getState());
		enterRule(_localctx, 82, RULE_proc_handler_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1215); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1214);
				proc_handler();
				}
				}
				setState(1217); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==DECLARE );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_handlerContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		public TerminalNode EXIT() { return getToken(HanaParser.EXIT, 0); }
		public TerminalNode HANDLER() { return getToken(HanaParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public Proc_condition_value_listContext proc_condition_value_list() {
			return getRuleContext(Proc_condition_value_listContext.class,0);
		}
		public Proc_stmtContext proc_stmt() {
			return getRuleContext(Proc_stmtContext.class,0);
		}
		public Proc_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_handlerContext proc_handler() throws RecognitionException {
		Proc_handlerContext _localctx = new Proc_handlerContext(_ctx, getState());
		enterRule(_localctx, 84, RULE_proc_handler);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1219);
			match(DECLARE);
			setState(1220);
			match(EXIT);
			setState(1221);
			match(HANDLER);
			setState(1222);
			match(FOR);
			setState(1223);
			proc_condition_value_list();
			setState(1224);
			proc_stmt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_condition_value_listContext extends ParserRuleContext {
		public List<Proc_condition_valueContext> proc_condition_value() {
			return getRuleContexts(Proc_condition_valueContext.class);
		}
		public Proc_condition_valueContext proc_condition_value(int i) {
			return getRuleContext(Proc_condition_valueContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Proc_condition_value_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_condition_value_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_condition_value_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_condition_value_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_condition_value_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_condition_value_listContext proc_condition_value_list() throws RecognitionException {
		Proc_condition_value_listContext _localctx = new Proc_condition_value_listContext(_ctx, getState());
		enterRule(_localctx, 86, RULE_proc_condition_value_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1226);
			proc_condition_value();
			setState(1231);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1227);
				match(COMMA);
				setState(1228);
				proc_condition_value();
				}
				}
				setState(1233);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_condition_valueContext extends ParserRuleContext {
		public TerminalNode SQLEXCEPTION() { return getToken(HanaParser.SQLEXCEPTION, 0); }
		public TerminalNode SQLWARNING() { return getToken(HanaParser.SQLWARNING, 0); }
		public Sql_error_codeContext sql_error_code() {
			return getRuleContext(Sql_error_codeContext.class,0);
		}
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Proc_condition_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_condition_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_condition_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_condition_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_condition_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_condition_valueContext proc_condition_value() throws RecognitionException {
		Proc_condition_valueContext _localctx = new Proc_condition_valueContext(_ctx, getState());
		enterRule(_localctx, 88, RULE_proc_condition_value);
		try {
			setState(1238);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLEXCEPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(1234);
				match(SQLEXCEPTION);
				}
				break;
			case SQLWARNING:
				enterOuterAlt(_localctx, 2);
				{
				setState(1235);
				match(SQLWARNING);
				}
				break;
			case SQL_ERROR_CODE:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(1236);
				sql_error_code();
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 4);
				{
				setState(1237);
				variable_name();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_stmt_listContext extends ParserRuleContext {
		public List<Proc_stmtContext> proc_stmt() {
			return getRuleContexts(Proc_stmtContext.class);
		}
		public Proc_stmtContext proc_stmt(int i) {
			return getRuleContext(Proc_stmtContext.class,i);
		}
		public Proc_stmt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_stmt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_stmt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_stmt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_stmt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_stmt_listContext proc_stmt_list() throws RecognitionException {
		Proc_stmt_listContext _localctx = new Proc_stmt_listContext(_ctx, getState());
		enterRule(_localctx, 90, RULE_proc_stmt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1241); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1240);
				proc_stmt();
				}
				}
				setState(1243); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELECT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATE - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_stmt_listContext extends ParserRuleContext {
		public List<Proc_stmtContext> proc_stmt() {
			return getRuleContexts(Proc_stmtContext.class);
		}
		public Proc_stmtContext proc_stmt(int i) {
			return getRuleContext(Proc_stmtContext.class,i);
		}
		public Func_stmt_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_stmt_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunc_stmt_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunc_stmt_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunc_stmt_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_stmt_listContext func_stmt_list() throws RecognitionException {
		Func_stmt_listContext _localctx = new Func_stmt_listContext(_ctx, getState());
		enterRule(_localctx, 92, RULE_func_stmt_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1246); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1245);
				proc_stmt();
				}
				}
				setState(1248); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELECT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATE - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_stmtContext extends ParserRuleContext {
		public Proc_blockContext proc_block() {
			return getRuleContext(Proc_blockContext.class,0);
		}
		public Proc_assignContext proc_assign() {
			return getRuleContext(Proc_assignContext.class,0);
		}
		public Proc_single_assignContext proc_single_assign() {
			return getRuleContext(Proc_single_assignContext.class,0);
		}
		public Proc_sqlContext proc_sql() {
			return getRuleContext(Proc_sqlContext.class,0);
		}
		public Proc_callContext proc_call() {
			return getRuleContext(Proc_callContext.class,0);
		}
		public Proc_ifContext proc_if() {
			return getRuleContext(Proc_ifContext.class,0);
		}
		public Proc_signalContext proc_signal() {
			return getRuleContext(Proc_signalContext.class,0);
		}
		public Proc_resignalContext proc_resignal() {
			return getRuleContext(Proc_resignalContext.class,0);
		}
		public Proc_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_stmtContext proc_stmt() throws RecognitionException {
		Proc_stmtContext _localctx = new Proc_stmtContext(_ctx, getState());
		enterRule(_localctx, 94, RULE_proc_stmt);
		try {
			setState(1258);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,52,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1250);
				proc_block();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1251);
				proc_assign();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1252);
				proc_single_assign();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(1253);
				proc_sql();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(1254);
				proc_call();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(1255);
				proc_if();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(1256);
				proc_signal();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(1257);
				proc_resignal();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_sqlContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Insert_stmtContext insert_stmt() {
			return getRuleContext(Insert_stmtContext.class,0);
		}
		public Update_stmtContext update_stmt() {
			return getRuleContext(Update_stmtContext.class,0);
		}
		public Proc_sqlContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_sql; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_sql(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_sql(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_sql(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_sqlContext proc_sql() throws RecognitionException {
		Proc_sqlContext _localctx = new Proc_sqlContext(_ctx, getState());
		enterRule(_localctx, 96, RULE_proc_sql);
		try {
			setState(1269);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 1);
				{
				setState(1260);
				subquery();
				setState(1261);
				match(SEMICOLON);
				}
				break;
			case INSERT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1263);
				insert_stmt();
				setState(1264);
				match(SEMICOLON);
				}
				break;
			case UPDATE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1266);
				update_stmt();
				setState(1267);
				match(SEMICOLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_stmtContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUpdate_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUpdate_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUpdate_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_stmtContext update_stmt() throws RecognitionException {
		Update_stmtContext _localctx = new Update_stmtContext(_ctx, getState());
		enterRule(_localctx, 98, RULE_update_stmt);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1271);
			match(UPDATE);
			setState(1272);
			general_table_ref();
			setState(1273);
			update_set_clause();
			setState(1275);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(1274);
				from_clause();
				}
			}

			setState(1278);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(1277);
				where_clause();
				}
			}

			setState(1281);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(1280);
				static_returning_clause();
				}
			}

			setState(1284);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(1283);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_stmtContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(HanaParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_stmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterInsert_stmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitInsert_stmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitInsert_stmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_stmtContext insert_stmt() throws RecognitionException {
		Insert_stmtContext _localctx = new Insert_stmtContext(_ctx, getState());
		enterRule(_localctx, 100, RULE_insert_stmt);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1286);
			match(INSERT);
			setState(1289);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(1287);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(1288);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_signalContext extends ParserRuleContext {
		public TerminalNode SIGNAL() { return getToken(HanaParser.SIGNAL, 0); }
		public Signal_valueContext signal_value() {
			return getRuleContext(Signal_valueContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Set_signal_infoContext set_signal_info() {
			return getRuleContext(Set_signal_infoContext.class,0);
		}
		public Proc_signalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_signal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_signal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_signal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_signal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_signalContext proc_signal() throws RecognitionException {
		Proc_signalContext _localctx = new Proc_signalContext(_ctx, getState());
		enterRule(_localctx, 102, RULE_proc_signal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1291);
			match(SIGNAL);
			setState(1292);
			signal_value();
			setState(1294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(1293);
				set_signal_info();
				}
			}

			setState(1296);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_resignalContext extends ParserRuleContext {
		public TerminalNode RESIGNAL() { return getToken(HanaParser.RESIGNAL, 0); }
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Signal_valueContext signal_value() {
			return getRuleContext(Signal_valueContext.class,0);
		}
		public Set_signal_infoContext set_signal_info() {
			return getRuleContext(Set_signal_infoContext.class,0);
		}
		public Proc_resignalContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_resignal; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_resignal(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_resignal(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_resignal(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_resignalContext proc_resignal() throws RecognitionException {
		Proc_resignalContext _localctx = new Proc_resignalContext(_ctx, getState());
		enterRule(_localctx, 104, RULE_proc_resignal);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1298);
			match(RESIGNAL);
			setState(1300);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,60,_ctx) ) {
			case 1:
				{
				setState(1299);
				signal_value();
				}
				break;
			}
			setState(1303);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(1302);
				set_signal_info();
				}
			}

			setState(1305);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Signal_valueContext extends ParserRuleContext {
		public Signal_nameContext signal_name() {
			return getRuleContext(Signal_nameContext.class,0);
		}
		public Sql_error_codeContext sql_error_code() {
			return getRuleContext(Sql_error_codeContext.class,0);
		}
		public Signal_valueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signal_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSignal_value(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSignal_value(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSignal_value(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Signal_valueContext signal_value() throws RecognitionException {
		Signal_valueContext _localctx = new Signal_valueContext(_ctx, getState());
		enterRule(_localctx, 106, RULE_signal_value);
		try {
			setState(1309);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1307);
				signal_name();
				}
				break;
			case SQL_ERROR_CODE:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1308);
				sql_error_code();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Signal_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Signal_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_signal_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSignal_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSignal_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSignal_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Signal_nameContext signal_name() throws RecognitionException {
		Signal_nameContext _localctx = new Signal_nameContext(_ctx, getState());
		enterRule(_localctx, 108, RULE_signal_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1311);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_signal_infoContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		public TerminalNode MESSAGE_TEXT() { return getToken(HanaParser.MESSAGE_TEXT, 0); }
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public Message_stringContext message_string() {
			return getRuleContext(Message_stringContext.class,0);
		}
		public Set_signal_infoContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_signal_info; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSet_signal_info(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSet_signal_info(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSet_signal_info(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_signal_infoContext set_signal_info() throws RecognitionException {
		Set_signal_infoContext _localctx = new Set_signal_infoContext(_ctx, getState());
		enterRule(_localctx, 110, RULE_set_signal_info);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1313);
			match(SET);
			setState(1314);
			match(MESSAGE_TEXT);
			setState(1315);
			match(EQUALS_OP);
			setState(1316);
			match(T__1);
			setState(1317);
			message_string();
			setState(1318);
			match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Message_stringContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Message_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_message_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMessage_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMessage_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMessage_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Message_stringContext message_string() throws RecognitionException {
		Message_stringContext _localctx = new Message_stringContext(_ctx, getState());
		enterRule(_localctx, 112, RULE_message_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1320);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_ifContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(HanaParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(HanaParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public List<TerminalNode> SEQUENTIAL() { return getTokens(HanaParser.SEQUENTIAL); }
		public TerminalNode SEQUENTIAL(int i) {
			return getToken(HanaParser.SEQUENTIAL, i);
		}
		public List<TerminalNode> EXECUTION() { return getTokens(HanaParser.EXECUTION); }
		public TerminalNode EXECUTION(int i) {
			return getToken(HanaParser.EXECUTION, i);
		}
		public Proc_decl_listContext proc_decl_list() {
			return getRuleContext(Proc_decl_listContext.class,0);
		}
		public Proc_handler_listContext proc_handler_list() {
			return getRuleContext(Proc_handler_listContext.class,0);
		}
		public Proc_stmt_listContext proc_stmt_list() {
			return getRuleContext(Proc_stmt_listContext.class,0);
		}
		public Proc_elsif_listContext proc_elsif_list() {
			return getRuleContext(Proc_elsif_listContext.class,0);
		}
		public Proc_elseContext proc_else() {
			return getRuleContext(Proc_elseContext.class,0);
		}
		public Proc_ifContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_if; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_if(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_if(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_if(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_ifContext proc_if() throws RecognitionException {
		Proc_ifContext _localctx = new Proc_ifContext(_ctx, getState());
		enterRule(_localctx, 114, RULE_proc_if);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1322);
			match(IF);
			setState(1323);
			condition();
			setState(1324);
			match(THEN);
			setState(1329);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,63,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1325);
					match(SEQUENTIAL);
					setState(1326);
					match(EXECUTION);
					}
					} 
				}
				setState(1331);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,63,_ctx);
			}
			setState(1333);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,64,_ctx) ) {
			case 1:
				{
				setState(1332);
				proc_decl_list();
				}
				break;
			}
			setState(1336);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(1335);
				proc_handler_list();
				}
			}

			setState(1339);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELECT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATE - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1338);
				proc_stmt_list();
				}
			}

			setState(1342);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSEIF) {
				{
				setState(1341);
				proc_elsif_list();
				}
			}

			setState(1345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(1344);
				proc_else();
				}
			}

			setState(1347);
			match(END);
			setState(1348);
			match(IF);
			setState(1349);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_elsif_listContext extends ParserRuleContext {
		public TerminalNode ELSEIF() { return getToken(HanaParser.ELSEIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		public List<TerminalNode> SEQUENTIAL() { return getTokens(HanaParser.SEQUENTIAL); }
		public TerminalNode SEQUENTIAL(int i) {
			return getToken(HanaParser.SEQUENTIAL, i);
		}
		public List<TerminalNode> EXECUTION() { return getTokens(HanaParser.EXECUTION); }
		public TerminalNode EXECUTION(int i) {
			return getToken(HanaParser.EXECUTION, i);
		}
		public Proc_decl_listContext proc_decl_list() {
			return getRuleContext(Proc_decl_listContext.class,0);
		}
		public Proc_handler_listContext proc_handler_list() {
			return getRuleContext(Proc_handler_listContext.class,0);
		}
		public Proc_stmt_listContext proc_stmt_list() {
			return getRuleContext(Proc_stmt_listContext.class,0);
		}
		public Proc_elsif_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_elsif_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_elsif_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_elsif_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_elsif_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_elsif_listContext proc_elsif_list() throws RecognitionException {
		Proc_elsif_listContext _localctx = new Proc_elsif_listContext(_ctx, getState());
		enterRule(_localctx, 116, RULE_proc_elsif_list);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1351);
			match(ELSEIF);
			setState(1352);
			condition();
			setState(1353);
			match(THEN);
			setState(1358);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1354);
					match(SEQUENTIAL);
					setState(1355);
					match(EXECUTION);
					}
					} 
				}
				setState(1360);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,69,_ctx);
			}
			setState(1362);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,70,_ctx) ) {
			case 1:
				{
				setState(1361);
				proc_decl_list();
				}
				break;
			}
			setState(1365);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(1364);
				proc_handler_list();
				}
			}

			setState(1368);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELECT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATE - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1367);
				proc_stmt_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_elseContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(HanaParser.ELSE, 0); }
		public List<TerminalNode> SEQUENTIAL() { return getTokens(HanaParser.SEQUENTIAL); }
		public TerminalNode SEQUENTIAL(int i) {
			return getToken(HanaParser.SEQUENTIAL, i);
		}
		public List<TerminalNode> EXECUTION() { return getTokens(HanaParser.EXECUTION); }
		public TerminalNode EXECUTION(int i) {
			return getToken(HanaParser.EXECUTION, i);
		}
		public Proc_decl_listContext proc_decl_list() {
			return getRuleContext(Proc_decl_listContext.class,0);
		}
		public Proc_handler_listContext proc_handler_list() {
			return getRuleContext(Proc_handler_listContext.class,0);
		}
		public Proc_stmt_listContext proc_stmt_list() {
			return getRuleContext(Proc_stmt_listContext.class,0);
		}
		public Proc_elseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_else; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_else(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_else(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_else(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_elseContext proc_else() throws RecognitionException {
		Proc_elseContext _localctx = new Proc_elseContext(_ctx, getState());
		enterRule(_localctx, 118, RULE_proc_else);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(1370);
			match(ELSE);
			setState(1375);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,73,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(1371);
					match(SEQUENTIAL);
					setState(1372);
					match(EXECUTION);
					}
					} 
				}
				setState(1377);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,73,_ctx);
			}
			setState(1379);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,74,_ctx) ) {
			case 1:
				{
				setState(1378);
				proc_decl_list();
				}
				break;
			}
			setState(1382);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(1381);
				proc_handler_list();
				}
			}

			setState(1385);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELECT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATE - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1384);
				proc_stmt_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_blockContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(HanaParser.BEGIN, 0); }
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Proc_block_optionContext proc_block_option() {
			return getRuleContext(Proc_block_optionContext.class,0);
		}
		public Proc_decl_listContext proc_decl_list() {
			return getRuleContext(Proc_decl_listContext.class,0);
		}
		public Proc_handler_listContext proc_handler_list() {
			return getRuleContext(Proc_handler_listContext.class,0);
		}
		public Proc_stmt_listContext proc_stmt_list() {
			return getRuleContext(Proc_stmt_listContext.class,0);
		}
		public Proc_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_blockContext proc_block() throws RecognitionException {
		Proc_blockContext _localctx = new Proc_blockContext(_ctx, getState());
		enterRule(_localctx, 120, RULE_proc_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1387);
			match(BEGIN);
			setState(1389);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,77,_ctx) ) {
			case 1:
				{
				setState(1388);
				proc_block_option();
				}
				break;
			}
			setState(1392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,78,_ctx) ) {
			case 1:
				{
				setState(1391);
				proc_decl_list();
				}
				break;
			}
			setState(1395);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(1394);
				proc_handler_list();
				}
			}

			setState(1398);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELECT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATE - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (RESIGNAL - 449)) | (1L << (SIGNAL - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1397);
				proc_stmt_list();
				}
			}

			setState(1400);
			match(END);
			setState(1401);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_block_optionContext extends ParserRuleContext {
		public TerminalNode SEQUENTIAL() { return getToken(HanaParser.SEQUENTIAL, 0); }
		public TerminalNode EXECUTION() { return getToken(HanaParser.EXECUTION, 0); }
		public TerminalNode AUTONOMOUS() { return getToken(HanaParser.AUTONOMOUS, 0); }
		public TerminalNode TRANSACTION() { return getToken(HanaParser.TRANSACTION, 0); }
		public Proc_block_optionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_block_option; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_block_option(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_block_option(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_block_option(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_block_optionContext proc_block_option() throws RecognitionException {
		Proc_block_optionContext _localctx = new Proc_block_optionContext(_ctx, getState());
		enterRule(_localctx, 122, RULE_proc_block_option);
		int _la;
		try {
			setState(1417);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SEQUENTIAL:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(1403);
				match(SEQUENTIAL);
				setState(1404);
				match(EXECUTION);
				}
				setState(1408);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTONOMOUS) {
					{
					setState(1406);
					match(AUTONOMOUS);
					setState(1407);
					match(TRANSACTION);
					}
				}

				}
				break;
			case AUTONOMOUS:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(1410);
				match(AUTONOMOUS);
				setState(1411);
				match(TRANSACTION);
				}
				setState(1415);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,82,_ctx) ) {
				case 1:
					{
					setState(1413);
					match(SEQUENTIAL);
					setState(1414);
					match(EXECUTION);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_assignContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(HanaParser.ASSIGN_OP, 0); }
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(HanaParser.LEFT_BRACKET, 0); }
		public TerminalNode RIGHT_BRACKET() { return getToken(HanaParser.RIGHT_BRACKET, 0); }
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public Proc_assignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_assign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_assign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_assign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_assign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_assignContext proc_assign() throws RecognitionException {
		Proc_assignContext _localctx = new Proc_assignContext(_ctx, getState());
		enterRule(_localctx, 124, RULE_proc_assign);
		try {
			setState(1432);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,84,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1419);
				variable_name();
				setState(1420);
				match(ASSIGN_OP);
				{
				setState(1421);
				expression();
				}
				setState(1422);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1424);
				variable_name();
				setState(1425);
				match(LEFT_BRACKET);
				setState(1426);
				expression();
				setState(1427);
				match(RIGHT_BRACKET);
				setState(1428);
				match(EQUALS_OP);
				setState(1429);
				expression();
				setState(1430);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_single_assignContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Unnest_functionContext unnest_function() {
			return getRuleContext(Unnest_functionContext.class,0);
		}
		public Proc_single_assignContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_single_assign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_single_assign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_single_assign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_single_assign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_single_assignContext proc_single_assign() throws RecognitionException {
		Proc_single_assignContext _localctx = new Proc_single_assignContext(_ctx, getState());
		enterRule(_localctx, 126, RULE_proc_single_assign);
		try {
			setState(1444);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,85,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1434);
				variable_name();
				setState(1435);
				match(EQUALS_OP);
				setState(1436);
				select_statement();
				setState(1437);
				match(SEMICOLON);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1439);
				variable_name();
				setState(1440);
				match(EQUALS_OP);
				setState(1441);
				unnest_function();
				setState(1442);
				match(SEMICOLON);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unnest_functionContext extends ParserRuleContext {
		public TerminalNode UNNEST() { return getToken(HanaParser.UNNEST, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public Variable_name_listContext variable_name_list() {
			return getRuleContext(Variable_name_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		public TerminalNode ORDINALITY() { return getToken(HanaParser.ORDINALITY, 0); }
		public As_col_namesContext as_col_names() {
			return getRuleContext(As_col_namesContext.class,0);
		}
		public Unnest_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unnest_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUnnest_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUnnest_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUnnest_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unnest_functionContext unnest_function() throws RecognitionException {
		Unnest_functionContext _localctx = new Unnest_functionContext(_ctx, getState());
		enterRule(_localctx, 128, RULE_unnest_function);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1446);
			match(UNNEST);
			setState(1447);
			match(LEFT_PAREN);
			setState(1448);
			variable_name_list();
			setState(1449);
			match(RIGHT_PAREN);
			setState(1452);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1450);
				match(WITH);
				setState(1451);
				match(ORDINALITY);
				}
			}

			setState(1455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(1454);
				as_col_names();
				}
			}

			setState(1457);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		public Table_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_nameContext table_name() throws RecognitionException {
		Table_nameContext _localctx = new Table_nameContext(_ctx, getState());
		enterRule(_localctx, 130, RULE_table_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1462);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,88,_ctx) ) {
			case 1:
				{
				setState(1459);
				schema_name();
				setState(1460);
				match(PERIOD);
				}
				break;
			}
			setState(1464);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class As_col_namesContext extends ParserRuleContext {
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public Table_nameContext table_name() {
			return getRuleContext(Table_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public Column_name_listContext column_name_list() {
			return getRuleContext(Column_name_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public As_col_namesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_as_col_names; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAs_col_names(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAs_col_names(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAs_col_names(this);
			else return visitor.visitChildren(this);
		}
	}

	public final As_col_namesContext as_col_names() throws RecognitionException {
		As_col_namesContext _localctx = new As_col_namesContext(_ctx, getState());
		enterRule(_localctx, 132, RULE_as_col_names);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1466);
			match(AS);
			setState(1467);
			table_name();
			setState(1468);
			match(LEFT_PAREN);
			setState(1469);
			column_name_list();
			setState(1470);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_listContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Column_name_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_name_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_name_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_name_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_listContext column_name_list() throws RecognitionException {
		Column_name_listContext _localctx = new Column_name_listContext(_ctx, getState());
		enterRule(_localctx, 134, RULE_column_name_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1472);
			column_name();
			setState(1477);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1473);
				match(COMMA);
				setState(1474);
				column_name();
				}
				}
				setState(1479);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_callContext extends ParserRuleContext {
		public TerminalNode CALL() { return getToken(HanaParser.CALL, 0); }
		public Proc_nameContext proc_name() {
			return getRuleContext(Proc_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public Param_listContext param_list() {
			return getRuleContext(Param_listContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public List<TerminalNode> WITH() { return getTokens(HanaParser.WITH); }
		public TerminalNode WITH(int i) {
			return getToken(HanaParser.WITH, i);
		}
		public List<TerminalNode> OVERVIEW() { return getTokens(HanaParser.OVERVIEW); }
		public TerminalNode OVERVIEW(int i) {
			return getToken(HanaParser.OVERVIEW, i);
		}
		public Proc_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_callContext proc_call() throws RecognitionException {
		Proc_callContext _localctx = new Proc_callContext(_ctx, getState());
		enterRule(_localctx, 136, RULE_proc_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1480);
			match(CALL);
			setState(1481);
			proc_name();
			setState(1482);
			match(LEFT_PAREN);
			setState(1483);
			param_list();
			setState(1484);
			match(RIGHT_PAREN);
			setState(1489);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WITH) {
				{
				{
				setState(1485);
				match(WITH);
				setState(1486);
				match(OVERVIEW);
				}
				}
				setState(1491);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1492);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Param_listContext extends ParserRuleContext {
		public List<Proc_paramContext> proc_param() {
			return getRuleContexts(Proc_paramContext.class);
		}
		public Proc_paramContext proc_param(int i) {
			return getRuleContext(Proc_paramContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Param_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_param_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParam_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParam_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParam_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Param_listContext param_list() throws RecognitionException {
		Param_listContext _localctx = new Param_listContext(_ctx, getState());
		enterRule(_localctx, 138, RULE_param_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1494);
			proc_param();
			setState(1499);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1495);
				match(COMMA);
				setState(1496);
				proc_param();
				}
				}
				setState(1501);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_paramContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Named_paramContext named_param() {
			return getRuleContext(Named_paramContext.class,0);
		}
		public Proc_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_paramContext proc_param() throws RecognitionException {
		Proc_paramContext _localctx = new Proc_paramContext(_ctx, getState());
		enterRule(_localctx, 140, RULE_proc_param);
		try {
			setState(1505);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,92,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1502);
				id_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1503);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(1504);
				named_param();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Named_paramContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Named_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_named_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNamed_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNamed_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNamed_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Named_paramContext named_param() throws RecognitionException {
		Named_paramContext _localctx = new Named_paramContext(_ctx, getState());
		enterRule(_localctx, 142, RULE_named_param);
		try {
			setState(1515);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,93,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1507);
				id_expression();
				setState(1508);
				match(T__2);
				setState(1509);
				id_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1511);
				id_expression();
				setState(1512);
				match(T__2);
				setState(1513);
				bind_variable();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_bodyContext extends ParserRuleContext {
		public Proc_stmt_listContext proc_stmt_list() {
			return getRuleContext(Proc_stmt_listContext.class,0);
		}
		public Proc_decl_listContext proc_decl_list() {
			return getRuleContext(Proc_decl_listContext.class,0);
		}
		public Proc_handler_listContext proc_handler_list() {
			return getRuleContext(Proc_handler_listContext.class,0);
		}
		public Procedure_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProcedure_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProcedure_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProcedure_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_bodyContext procedure_body() throws RecognitionException {
		Procedure_bodyContext _localctx = new Procedure_bodyContext(_ctx, getState());
		enterRule(_localctx, 144, RULE_procedure_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1518);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,94,_ctx) ) {
			case 1:
				{
				setState(1517);
				proc_decl_list();
				}
				break;
			}
			setState(1521);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(1520);
				proc_handler_list();
				}
			}

			setState(1523);
			proc_stmt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Procedure_body_Context extends ParserRuleContext {
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Procedure_body_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_procedure_body_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProcedure_body_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProcedure_body_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProcedure_body_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Procedure_body_Context procedure_body_() throws RecognitionException {
		Procedure_body_Context _localctx = new Procedure_body_Context(_ctx, getState());
		enterRule(_localctx, 146, RULE_procedure_body_);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1525);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_bodyContext extends ParserRuleContext {
		public Func_stmt_listContext func_stmt_list() {
			return getRuleContext(Func_stmt_listContext.class,0);
		}
		public Func_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunc_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunc_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunc_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_bodyContext func_body() throws RecognitionException {
		Func_bodyContext _localctx = new Func_bodyContext(_ctx, getState());
		enterRule(_localctx, 148, RULE_func_body);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1527);
			func_stmt_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Parameter_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParameter_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParameter_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParameter_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_nameContext parameter_name() throws RecognitionException {
		Parameter_nameContext _localctx = new Parameter_nameContext(_ctx, getState());
		enterRule(_localctx, 150, RULE_parameter_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1529);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_each_rowContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public TerminalNode EACH() { return getToken(HanaParser.EACH, 0); }
		public TerminalNode ROW() { return getToken(HanaParser.ROW, 0); }
		public For_each_rowContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_each_row; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFor_each_row(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFor_each_row(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFor_each_row(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_each_rowContext for_each_row() throws RecognitionException {
		For_each_rowContext _localctx = new For_each_rowContext(_ctx, getState());
		enterRule(_localctx, 152, RULE_for_each_row);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1531);
			match(FOR);
			setState(1532);
			match(EACH);
			setState(1533);
			match(ROW);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_attribute_definitionContext extends ParserRuleContext {
		public TerminalNode ATTRIBUTE() { return getToken(HanaParser.ATTRIBUTE, 0); }
		public TerminalNode ADD() { return getToken(HanaParser.ADD, 0); }
		public TerminalNode MODIFY() { return getToken(HanaParser.MODIFY, 0); }
		public TerminalNode DROP() { return getToken(HanaParser.DROP, 0); }
		public List<Attribute_definitionContext> attribute_definition() {
			return getRuleContexts(Attribute_definitionContext.class);
		}
		public Attribute_definitionContext attribute_definition(int i) {
			return getRuleContext(Attribute_definitionContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Alter_attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAlter_attribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAlter_attribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAlter_attribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_attribute_definitionContext alter_attribute_definition() throws RecognitionException {
		Alter_attribute_definitionContext _localctx = new Alter_attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 154, RULE_alter_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1535);
			_la = _input.LA(1);
			if ( !(_la==ADD || _la==DROP || _la==MODIFY) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1536);
			match(ATTRIBUTE);
			setState(1549);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(1537);
				attribute_definition();
				}
				break;
			case LEFT_PAREN:
				{
				setState(1538);
				match(LEFT_PAREN);
				setState(1539);
				attribute_definition();
				setState(1544);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1540);
					match(COMMA);
					setState(1541);
					attribute_definition();
					}
					}
					setState(1546);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1547);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_definitionContext extends ParserRuleContext {
		public Attribute_nameContext attribute_name() {
			return getRuleContext(Attribute_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Attribute_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAttribute_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAttribute_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAttribute_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_definitionContext attribute_definition() throws RecognitionException {
		Attribute_definitionContext _localctx = new Attribute_definitionContext(_ctx, getState());
		enterRule(_localctx, 156, RULE_attribute_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1551);
			attribute_name();
			setState(1553);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIGINT) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SECONDDATE - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(1552);
				type_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alter_collection_clausesContext extends ParserRuleContext {
		public TerminalNode MODIFY() { return getToken(HanaParser.MODIFY, 0); }
		public TerminalNode LIMIT() { return getToken(HanaParser.LIMIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ELEMENT() { return getToken(HanaParser.ELEMENT, 0); }
		public TerminalNode TYPE() { return getToken(HanaParser.TYPE, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Alter_collection_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alter_collection_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAlter_collection_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAlter_collection_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAlter_collection_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alter_collection_clausesContext alter_collection_clauses() throws RecognitionException {
		Alter_collection_clausesContext _localctx = new Alter_collection_clausesContext(_ctx, getState());
		enterRule(_localctx, 158, RULE_alter_collection_clauses);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1555);
			match(MODIFY);
			setState(1561);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LIMIT:
				{
				setState(1556);
				match(LIMIT);
				setState(1557);
				expression();
				}
				break;
			case ELEMENT:
				{
				setState(1558);
				match(ELEMENT);
				setState(1559);
				match(TYPE);
				setState(1560);
				type_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_handling_clauseContext extends ParserRuleContext {
		public TerminalNode INVALIDATE() { return getToken(HanaParser.INVALIDATE, 0); }
		public TerminalNode CASCADE() { return getToken(HanaParser.CASCADE, 0); }
		public TerminalNode CONVERT() { return getToken(HanaParser.CONVERT, 0); }
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(HanaParser.SUBSTITUTABLE, 0); }
		public TerminalNode INCLUDING() { return getToken(HanaParser.INCLUDING, 0); }
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		public TerminalNode DATA() { return getToken(HanaParser.DATA, 0); }
		public Dependent_exceptions_partContext dependent_exceptions_part() {
			return getRuleContext(Dependent_exceptions_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public Dependent_handling_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_handling_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDependent_handling_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDependent_handling_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDependent_handling_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_handling_clauseContext dependent_handling_clause() throws RecognitionException {
		Dependent_handling_clauseContext _localctx = new Dependent_handling_clauseContext(_ctx, getState());
		enterRule(_localctx, 160, RULE_dependent_handling_clause);
		int _la;
		try {
			setState(1579);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INVALIDATE:
				enterOuterAlt(_localctx, 1);
				{
				setState(1563);
				match(INVALIDATE);
				}
				break;
			case CASCADE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1564);
				match(CASCADE);
				setState(1574);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case CONVERT:
					{
					setState(1565);
					match(CONVERT);
					setState(1566);
					match(TO);
					setState(1567);
					match(SUBSTITUTABLE);
					}
					break;
				case INCLUDING:
				case NOT:
					{
					setState(1569);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(1568);
						match(NOT);
						}
					}

					setState(1571);
					match(INCLUDING);
					setState(1572);
					match(TABLE);
					setState(1573);
					match(DATA);
					}
					break;
				case EOF:
				case EXCEPTIONS:
				case FORCE:
					break;
				default:
					break;
				}
				setState(1577);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXCEPTIONS || _la==FORCE) {
					{
					setState(1576);
					dependent_exceptions_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dependent_exceptions_partContext extends ParserRuleContext {
		public TerminalNode EXCEPTIONS() { return getToken(HanaParser.EXCEPTIONS, 0); }
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(HanaParser.FORCE, 0); }
		public Dependent_exceptions_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dependent_exceptions_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDependent_exceptions_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDependent_exceptions_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDependent_exceptions_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dependent_exceptions_partContext dependent_exceptions_part() throws RecognitionException {
		Dependent_exceptions_partContext _localctx = new Dependent_exceptions_partContext(_ctx, getState());
		enterRule(_localctx, 162, RULE_dependent_exceptions_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1582);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FORCE) {
				{
				setState(1581);
				match(FORCE);
				}
			}

			setState(1584);
			match(EXCEPTIONS);
			setState(1585);
			match(INTO);
			setState(1586);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_definitionContext extends ParserRuleContext {
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode OID() { return getToken(HanaParser.OID, 0); }
		public TerminalNode CHAR_STRING() { return getToken(HanaParser.CHAR_STRING, 0); }
		public Object_type_defContext object_type_def() {
			return getRuleContext(Object_type_defContext.class,0);
		}
		public Type_definitionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_definition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_definition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_definition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_definition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_definitionContext type_definition() throws RecognitionException {
		Type_definitionContext _localctx = new Type_definitionContext(_ctx, getState());
		enterRule(_localctx, 164, RULE_type_definition);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1588);
			type_name();
			setState(1591);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OID) {
				{
				setState(1589);
				match(OID);
				setState(1590);
				match(CHAR_STRING);
				}
			}

			setState(1594);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==AUTHID || _la==IS || _la==UNDER) {
				{
				setState(1593);
				object_type_def();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_type_defContext extends ParserRuleContext {
		public Object_as_partContext object_as_part() {
			return getRuleContext(Object_as_partContext.class,0);
		}
		public Object_under_partContext object_under_part() {
			return getRuleContext(Object_under_partContext.class,0);
		}
		public Invoker_rights_clauseContext invoker_rights_clause() {
			return getRuleContext(Invoker_rights_clauseContext.class,0);
		}
		public Sqlj_object_typeContext sqlj_object_type() {
			return getRuleContext(Sqlj_object_typeContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Object_member_specContext> object_member_spec() {
			return getRuleContexts(Object_member_specContext.class);
		}
		public Object_member_specContext object_member_spec(int i) {
			return getRuleContext(Object_member_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<Modifier_clauseContext> modifier_clause() {
			return getRuleContexts(Modifier_clauseContext.class);
		}
		public Modifier_clauseContext modifier_clause(int i) {
			return getRuleContext(Modifier_clauseContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Object_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterObject_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitObject_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitObject_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_type_defContext object_type_def() throws RecognitionException {
		Object_type_defContext _localctx = new Object_type_defContext(_ctx, getState());
		enterRule(_localctx, 166, RULE_object_type_def);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1597);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTHID) {
				{
				setState(1596);
				invoker_rights_clause();
				}
			}

			setState(1601);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1599);
				object_as_part();
				}
				break;
			case UNDER:
				{
				setState(1600);
				object_under_part();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(1604);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXTERNAL) {
				{
				setState(1603);
				sqlj_object_type();
				}
			}

			setState(1617);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1606);
				match(LEFT_PAREN);
				setState(1607);
				object_member_spec();
				setState(1612);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1608);
					match(COMMA);
					setState(1609);
					object_member_spec();
					}
					}
					setState(1614);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1615);
				match(RIGHT_PAREN);
				}
			}

			setState(1622);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FINAL || _la==INSTANTIABLE || _la==NOT || _la==OVERRIDING) {
				{
				{
				setState(1619);
				modifier_clause();
				}
				}
				setState(1624);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_as_partContext extends ParserRuleContext {
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public TerminalNode OBJECT() { return getToken(HanaParser.OBJECT, 0); }
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Nested_table_type_defContext nested_table_type_def() {
			return getRuleContext(Nested_table_type_defContext.class,0);
		}
		public Object_as_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_as_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterObject_as_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitObject_as_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitObject_as_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_as_partContext object_as_part() throws RecognitionException {
		Object_as_partContext _localctx = new Object_as_partContext(_ctx, getState());
		enterRule(_localctx, 168, RULE_object_as_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1625);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1629);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case OBJECT:
				{
				setState(1626);
				match(OBJECT);
				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(1627);
				varray_type_def();
				}
				break;
			case TABLE:
				{
				setState(1628);
				nested_table_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_under_partContext extends ParserRuleContext {
		public TerminalNode UNDER() { return getToken(HanaParser.UNDER, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Object_under_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_under_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterObject_under_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitObject_under_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitObject_under_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_under_partContext object_under_part() throws RecognitionException {
		Object_under_partContext _localctx = new Object_under_partContext(_ctx, getState());
		enterRule(_localctx, 170, RULE_object_under_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1631);
			match(UNDER);
			setState(1632);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Nested_table_type_defContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		public Nested_table_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_nested_table_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNested_table_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNested_table_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNested_table_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Nested_table_type_defContext nested_table_type_def() throws RecognitionException {
		Nested_table_type_defContext _localctx = new Nested_table_type_defContext(_ctx, getState());
		enterRule(_localctx, 172, RULE_nested_table_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1634);
			match(TABLE);
			setState(1635);
			match(OF);
			setState(1636);
			type_spec();
			setState(1639);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,114,_ctx) ) {
			case 1:
				{
				setState(1637);
				match(NOT);
				setState(1638);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_typeContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(HanaParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LANGUAGE() { return getToken(HanaParser.LANGUAGE, 0); }
		public TerminalNode JAVA() { return getToken(HanaParser.JAVA, 0); }
		public TerminalNode USING() { return getToken(HanaParser.USING, 0); }
		public TerminalNode SQLDATA() { return getToken(HanaParser.SQLDATA, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(HanaParser.CUSTOMDATUM, 0); }
		public TerminalNode ORADATA() { return getToken(HanaParser.ORADATA, 0); }
		public Sqlj_object_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSqlj_object_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSqlj_object_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSqlj_object_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_typeContext sqlj_object_type() throws RecognitionException {
		Sqlj_object_typeContext _localctx = new Sqlj_object_typeContext(_ctx, getState());
		enterRule(_localctx, 174, RULE_sqlj_object_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1641);
			match(EXTERNAL);
			setState(1642);
			match(NAME);
			setState(1643);
			expression();
			setState(1644);
			match(LANGUAGE);
			setState(1645);
			match(JAVA);
			setState(1646);
			match(USING);
			setState(1647);
			_la = _input.LA(1);
			if ( !(_la==CUSTOMDATUM || _la==ORADATA || _la==SQLDATA) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_bodyContext extends ParserRuleContext {
		public TerminalNode BODY() { return getToken(HanaParser.BODY, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public List<Type_body_elementsContext> type_body_elements() {
			return getRuleContexts(Type_body_elementsContext.class);
		}
		public Type_body_elementsContext type_body_elements(int i) {
			return getRuleContext(Type_body_elementsContext.class,i);
		}
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Type_bodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_body(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_body(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_body(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_bodyContext type_body() throws RecognitionException {
		Type_bodyContext _localctx = new Type_bodyContext(_ctx, getState());
		enterRule(_localctx, 176, RULE_type_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1649);
			match(BODY);
			setState(1650);
			type_name();
			setState(1651);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1652);
			type_body_elements();
			setState(1657);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1653);
				match(COMMA);
				setState(1654);
				type_body_elements();
				}
				}
				setState(1659);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1660);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_body_elementsContext extends ParserRuleContext {
		public Map_order_func_declarationContext map_order_func_declaration() {
			return getRuleContext(Map_order_func_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext subprog_decl_in_type() {
			return getRuleContext(Subprog_decl_in_typeContext.class,0);
		}
		public Type_body_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_body_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_body_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_body_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_body_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_body_elementsContext type_body_elements() throws RecognitionException {
		Type_body_elementsContext _localctx = new Type_body_elementsContext(_ctx, getState());
		enterRule(_localctx, 178, RULE_type_body_elements);
		try {
			setState(1664);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 1);
				{
				setState(1662);
				map_order_func_declaration();
				}
				break;
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 2);
				{
				setState(1663);
				subprog_decl_in_type();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_func_declarationContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(HanaParser.MEMBER, 0); }
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public TerminalNode MAP() { return getToken(HanaParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		public Map_order_func_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_func_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMap_order_func_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMap_order_func_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMap_order_func_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_func_declarationContext map_order_func_declaration() throws RecognitionException {
		Map_order_func_declarationContext _localctx = new Map_order_func_declarationContext(_ctx, getState());
		enterRule(_localctx, 180, RULE_map_order_func_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1666);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1667);
			match(MEMBER);
			setState(1668);
			func_decl_in_type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprog_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(HanaParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(HanaParser.STATIC, 0); }
		public Proc_decl_in_typeContext proc_decl_in_type() {
			return getRuleContext(Proc_decl_in_typeContext.class,0);
		}
		public Func_decl_in_typeContext func_decl_in_type() {
			return getRuleContext(Func_decl_in_typeContext.class,0);
		}
		public Constructor_declarationContext constructor_declaration() {
			return getRuleContext(Constructor_declarationContext.class,0);
		}
		public Subprog_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprog_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubprog_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubprog_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubprog_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprog_decl_in_typeContext subprog_decl_in_type() throws RecognitionException {
		Subprog_decl_in_typeContext _localctx = new Subprog_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 182, RULE_subprog_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1670);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1674);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1671);
				proc_decl_in_type();
				}
				break;
			case FUNCTION:
				{
				setState(1672);
				func_decl_in_type();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				{
				setState(1673);
				constructor_declaration();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(HanaParser.PROCEDURE, 0); }
		public Proc_nameContext proc_name() {
			return getRuleContext(Proc_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Proc_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_decl_in_typeContext proc_decl_in_type() throws RecognitionException {
		Proc_decl_in_typeContext _localctx = new Proc_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 184, RULE_proc_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1676);
			match(PROCEDURE);
			setState(1677);
			proc_name();
			setState(1678);
			match(LEFT_PAREN);
			setState(1679);
			type_elements_parameter();
			setState(1684);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1680);
				match(COMMA);
				setState(1681);
				type_elements_parameter();
				}
				}
				setState(1686);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1687);
			match(RIGHT_PAREN);
			setState(1688);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1702);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,121,_ctx) ) {
			case 1:
				{
				setState(1689);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1691);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1690);
					match(DECLARE);
					}
				}

				setState(1696);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
					{
					{
					setState(1693);
					declare_spec();
					}
					}
					setState(1698);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1699);
				body();
				setState(1700);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Func_decl_in_typeContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(HanaParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Func_decl_in_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_func_decl_in_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunc_decl_in_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunc_decl_in_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunc_decl_in_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Func_decl_in_typeContext func_decl_in_type() throws RecognitionException {
		Func_decl_in_typeContext _localctx = new Func_decl_in_typeContext(_ctx, getState());
		enterRule(_localctx, 186, RULE_func_decl_in_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1704);
			match(FUNCTION);
			setState(1705);
			function_name();
			setState(1717);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1706);
				match(LEFT_PAREN);
				setState(1707);
				type_elements_parameter();
				setState(1712);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1708);
					match(COMMA);
					setState(1709);
					type_elements_parameter();
					}
					}
					setState(1714);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1715);
				match(RIGHT_PAREN);
				}
			}

			setState(1719);
			match(RETURN);
			setState(1720);
			type_spec();
			setState(1721);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1735);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,126,_ctx) ) {
			case 1:
				{
				setState(1722);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1724);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1723);
					match(DECLARE);
					}
				}

				setState(1729);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
					{
					{
					setState(1726);
					declare_spec();
					}
					}
					setState(1731);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1732);
				body();
				setState(1733);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_declarationContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(HanaParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(HanaParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(HanaParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(HanaParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(HanaParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(HanaParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(HanaParser.RESULT, 0); }
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public TerminalNode FINAL() { return getToken(HanaParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(HanaParser.INSTANTIABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public TerminalNode OUT() { return getToken(HanaParser.OUT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Constructor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConstructor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConstructor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConstructor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_declarationContext constructor_declaration() throws RecognitionException {
		Constructor_declarationContext _localctx = new Constructor_declarationContext(_ctx, getState());
		enterRule(_localctx, 188, RULE_constructor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1738);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1737);
				match(FINAL);
				}
			}

			setState(1741);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1740);
				match(INSTANTIABLE);
				}
			}

			setState(1743);
			match(CONSTRUCTOR);
			setState(1744);
			match(FUNCTION);
			setState(1745);
			type_spec();
			setState(1763);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1746);
				match(LEFT_PAREN);
				{
				setState(1747);
				match(SELF);
				setState(1748);
				match(IN);
				setState(1749);
				match(OUT);
				setState(1750);
				type_spec();
				setState(1751);
				match(COMMA);
				}
				setState(1753);
				type_elements_parameter();
				setState(1758);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1754);
					match(COMMA);
					setState(1755);
					type_elements_parameter();
					}
					}
					setState(1760);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1761);
				match(RIGHT_PAREN);
				}
			}

			setState(1765);
			match(RETURN);
			setState(1766);
			match(SELF);
			setState(1767);
			match(AS);
			setState(1768);
			match(RESULT);
			setState(1769);
			_la = _input.LA(1);
			if ( !(_la==AS || _la==IS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1783);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,133,_ctx) ) {
			case 1:
				{
				setState(1770);
				call_spec();
				}
				break;
			case 2:
				{
				setState(1772);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(1771);
					match(DECLARE);
					}
				}

				setState(1777);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
					{
					{
					setState(1774);
					declare_spec();
					}
					}
					setState(1779);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1780);
				body();
				setState(1781);
				match(SEMICOLON);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Modifier_clauseContext extends ParserRuleContext {
		public TerminalNode INSTANTIABLE() { return getToken(HanaParser.INSTANTIABLE, 0); }
		public TerminalNode FINAL() { return getToken(HanaParser.FINAL, 0); }
		public TerminalNode OVERRIDING() { return getToken(HanaParser.OVERRIDING, 0); }
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public Modifier_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_modifier_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModifier_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModifier_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModifier_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Modifier_clauseContext modifier_clause() throws RecognitionException {
		Modifier_clauseContext _localctx = new Modifier_clauseContext(_ctx, getState());
		enterRule(_localctx, 190, RULE_modifier_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1786);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(1785);
				match(NOT);
				}
			}

			setState(1788);
			_la = _input.LA(1);
			if ( !(_la==FINAL || _la==INSTANTIABLE || _la==OVERRIDING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Object_member_specContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Sqlj_object_type_attrContext sqlj_object_type_attr() {
			return getRuleContext(Sqlj_object_type_attrContext.class,0);
		}
		public Element_specContext element_spec() {
			return getRuleContext(Element_specContext.class,0);
		}
		public Object_member_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_object_member_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterObject_member_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitObject_member_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitObject_member_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Object_member_specContext object_member_spec() throws RecognitionException {
		Object_member_specContext _localctx = new Object_member_specContext(_ctx, getState());
		enterRule(_localctx, 192, RULE_object_member_spec);
		int _la;
		try {
			setState(1796);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,136,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(1790);
				id();
				setState(1791);
				type_spec();
				setState(1793);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==EXTERNAL) {
					{
					setState(1792);
					sqlj_object_type_attr();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(1795);
				element_spec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sqlj_object_type_attrContext extends ParserRuleContext {
		public TerminalNode EXTERNAL() { return getToken(HanaParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Sqlj_object_type_attrContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sqlj_object_type_attr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSqlj_object_type_attr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSqlj_object_type_attr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSqlj_object_type_attr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sqlj_object_type_attrContext sqlj_object_type_attr() throws RecognitionException {
		Sqlj_object_type_attrContext _localctx = new Sqlj_object_type_attrContext(_ctx, getState());
		enterRule(_localctx, 194, RULE_sqlj_object_type_attr);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1798);
			match(EXTERNAL);
			setState(1799);
			match(NAME);
			setState(1800);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_specContext extends ParserRuleContext {
		public Modifier_clauseContext modifier_clause() {
			return getRuleContext(Modifier_clauseContext.class,0);
		}
		public List<Element_spec_optionsContext> element_spec_options() {
			return getRuleContexts(Element_spec_optionsContext.class);
		}
		public Element_spec_optionsContext element_spec_options(int i) {
			return getRuleContext(Element_spec_optionsContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		public Pragma_clauseContext pragma_clause() {
			return getRuleContext(Pragma_clauseContext.class,0);
		}
		public Element_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterElement_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitElement_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitElement_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_specContext element_spec() throws RecognitionException {
		Element_specContext _localctx = new Element_specContext(_ctx, getState());
		enterRule(_localctx, 196, RULE_element_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1803);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,137,_ctx) ) {
			case 1:
				{
				setState(1802);
				modifier_clause();
				}
				break;
			}
			setState(1806); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(1805);
				element_spec_options();
				}
				}
				setState(1808); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==CONSTRUCTOR || _la==FINAL || _la==INSTANTIABLE || ((((_la - 222)) & ~0x3f) == 0 && ((1L << (_la - 222)) & ((1L << (MAP - 222)) | (1L << (MEMBER - 222)) | (1L << (ORDER - 222)))) != 0) || _la==STATIC );
			setState(1812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,139,_ctx) ) {
			case 1:
				{
				setState(1810);
				match(COMMA);
				setState(1811);
				pragma_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Element_spec_optionsContext extends ParserRuleContext {
		public Subprogram_specContext subprogram_spec() {
			return getRuleContext(Subprogram_specContext.class,0);
		}
		public Constructor_specContext constructor_spec() {
			return getRuleContext(Constructor_specContext.class,0);
		}
		public Map_order_function_specContext map_order_function_spec() {
			return getRuleContext(Map_order_function_specContext.class,0);
		}
		public Element_spec_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element_spec_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterElement_spec_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitElement_spec_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitElement_spec_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Element_spec_optionsContext element_spec_options() throws RecognitionException {
		Element_spec_optionsContext _localctx = new Element_spec_optionsContext(_ctx, getState());
		enterRule(_localctx, 198, RULE_element_spec_options);
		try {
			setState(1817);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MEMBER:
			case STATIC:
				enterOuterAlt(_localctx, 1);
				{
				setState(1814);
				subprogram_spec();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1815);
				constructor_spec();
				}
				break;
			case MAP:
			case ORDER:
				enterOuterAlt(_localctx, 3);
				{
				setState(1816);
				map_order_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subprogram_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(HanaParser.MEMBER, 0); }
		public TerminalNode STATIC() { return getToken(HanaParser.STATIC, 0); }
		public Type_procedure_specContext type_procedure_spec() {
			return getRuleContext(Type_procedure_specContext.class,0);
		}
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public Subprogram_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subprogram_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubprogram_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubprogram_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubprogram_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subprogram_specContext subprogram_spec() throws RecognitionException {
		Subprogram_specContext _localctx = new Subprogram_specContext(_ctx, getState());
		enterRule(_localctx, 200, RULE_subprogram_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1819);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==STATIC) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1822);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case PROCEDURE:
				{
				setState(1820);
				type_procedure_spec();
				}
				break;
			case FUNCTION:
				{
				setState(1821);
				type_function_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_procedure_specContext extends ParserRuleContext {
		public TerminalNode PROCEDURE() { return getToken(HanaParser.PROCEDURE, 0); }
		public Proc_nameContext proc_name() {
			return getRuleContext(Proc_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public Type_procedure_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_procedure_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_procedure_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_procedure_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_procedure_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_procedure_specContext type_procedure_spec() throws RecognitionException {
		Type_procedure_specContext _localctx = new Type_procedure_specContext(_ctx, getState());
		enterRule(_localctx, 202, RULE_type_procedure_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1824);
			match(PROCEDURE);
			setState(1825);
			proc_name();
			setState(1826);
			match(LEFT_PAREN);
			setState(1827);
			type_elements_parameter();
			setState(1832);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1828);
				match(COMMA);
				setState(1829);
				type_elements_parameter();
				}
				}
				setState(1834);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1835);
			match(RIGHT_PAREN);
			setState(1838);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1836);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1837);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_function_specContext extends ParserRuleContext {
		public TerminalNode FUNCTION() { return getToken(HanaParser.FUNCTION, 0); }
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SELF() { return getToken(HanaParser.SELF, 0); }
		public List<TerminalNode> AS() { return getTokens(HanaParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(HanaParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(HanaParser.RESULT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode EXTERNAL() { return getToken(HanaParser.EXTERNAL, 0); }
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public TerminalNode VARIABLE() { return getToken(HanaParser.VARIABLE, 0); }
		public Type_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_function_specContext type_function_spec() throws RecognitionException {
		Type_function_specContext _localctx = new Type_function_specContext(_ctx, getState());
		enterRule(_localctx, 204, RULE_type_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1840);
			match(FUNCTION);
			setState(1841);
			function_name();
			setState(1853);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1842);
				match(LEFT_PAREN);
				setState(1843);
				type_elements_parameter();
				setState(1848);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1844);
					match(COMMA);
					setState(1845);
					type_elements_parameter();
					}
					}
					setState(1850);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1851);
				match(RIGHT_PAREN);
				}
			}

			setState(1855);
			match(RETURN);
			setState(1860);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,146,_ctx) ) {
			case 1:
				{
				setState(1856);
				type_spec();
				}
				break;
			case 2:
				{
				setState(1857);
				match(SELF);
				setState(1858);
				match(AS);
				setState(1859);
				match(RESULT);
				}
				break;
			}
			setState(1870);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case AS:
			case IS:
				{
				setState(1862);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1863);
				call_spec();
				}
				break;
			case EXTERNAL:
				{
				setState(1864);
				match(EXTERNAL);
				setState(1866);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VARIABLE) {
					{
					setState(1865);
					match(VARIABLE);
					}
				}

				setState(1868);
				match(NAME);
				setState(1869);
				expression();
				}
				break;
			case CONSTRUCTOR:
			case FINAL:
			case INSTANTIABLE:
			case MAP:
			case MEMBER:
			case ORDER:
			case STATIC:
			case RIGHT_PAREN:
			case COMMA:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constructor_specContext extends ParserRuleContext {
		public TerminalNode CONSTRUCTOR() { return getToken(HanaParser.CONSTRUCTOR, 0); }
		public TerminalNode FUNCTION() { return getToken(HanaParser.FUNCTION, 0); }
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		public List<TerminalNode> SELF() { return getTokens(HanaParser.SELF); }
		public TerminalNode SELF(int i) {
			return getToken(HanaParser.SELF, i);
		}
		public List<TerminalNode> AS() { return getTokens(HanaParser.AS); }
		public TerminalNode AS(int i) {
			return getToken(HanaParser.AS, i);
		}
		public TerminalNode RESULT() { return getToken(HanaParser.RESULT, 0); }
		public TerminalNode FINAL() { return getToken(HanaParser.FINAL, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(HanaParser.INSTANTIABLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Type_elements_parameterContext> type_elements_parameter() {
			return getRuleContexts(Type_elements_parameterContext.class);
		}
		public Type_elements_parameterContext type_elements_parameter(int i) {
			return getRuleContext(Type_elements_parameterContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Call_specContext call_spec() {
			return getRuleContext(Call_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public TerminalNode OUT() { return getToken(HanaParser.OUT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Constructor_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constructor_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConstructor_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConstructor_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConstructor_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constructor_specContext constructor_spec() throws RecognitionException {
		Constructor_specContext _localctx = new Constructor_specContext(_ctx, getState());
		enterRule(_localctx, 206, RULE_constructor_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1873);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FINAL) {
				{
				setState(1872);
				match(FINAL);
				}
			}

			setState(1876);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INSTANTIABLE) {
				{
				setState(1875);
				match(INSTANTIABLE);
				}
			}

			setState(1878);
			match(CONSTRUCTOR);
			setState(1879);
			match(FUNCTION);
			setState(1880);
			type_spec();
			setState(1898);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(1881);
				match(LEFT_PAREN);
				{
				setState(1882);
				match(SELF);
				setState(1883);
				match(IN);
				setState(1884);
				match(OUT);
				setState(1885);
				type_spec();
				setState(1886);
				match(COMMA);
				}
				setState(1888);
				type_elements_parameter();
				setState(1893);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(1889);
					match(COMMA);
					setState(1890);
					type_elements_parameter();
					}
					}
					setState(1895);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(1896);
				match(RIGHT_PAREN);
				}
			}

			setState(1900);
			match(RETURN);
			setState(1901);
			match(SELF);
			setState(1902);
			match(AS);
			setState(1903);
			match(RESULT);
			setState(1906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS || _la==IS) {
				{
				setState(1904);
				_la = _input.LA(1);
				if ( !(_la==AS || _la==IS) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(1905);
				call_spec();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Map_order_function_specContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(HanaParser.MEMBER, 0); }
		public Type_function_specContext type_function_spec() {
			return getRuleContext(Type_function_specContext.class,0);
		}
		public TerminalNode MAP() { return getToken(HanaParser.MAP, 0); }
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		public Map_order_function_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_map_order_function_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMap_order_function_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMap_order_function_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMap_order_function_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Map_order_function_specContext map_order_function_spec() throws RecognitionException {
		Map_order_function_specContext _localctx = new Map_order_function_specContext(_ctx, getState());
		enterRule(_localctx, 208, RULE_map_order_function_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1908);
			_la = _input.LA(1);
			if ( !(_la==MAP || _la==ORDER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(1909);
			match(MEMBER);
			setState(1910);
			type_function_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_clauseContext extends ParserRuleContext {
		public TerminalNode PRAGMA() { return getToken(HanaParser.PRAGMA, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(HanaParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Pragma_elementsContext> pragma_elements() {
			return getRuleContexts(Pragma_elementsContext.class);
		}
		public Pragma_elementsContext pragma_elements(int i) {
			return getRuleContext(Pragma_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Pragma_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPragma_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPragma_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPragma_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_clauseContext pragma_clause() throws RecognitionException {
		Pragma_clauseContext _localctx = new Pragma_clauseContext(_ctx, getState());
		enterRule(_localctx, 210, RULE_pragma_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1912);
			match(PRAGMA);
			setState(1913);
			match(RESTRICT_REFERENCES);
			setState(1914);
			match(LEFT_PAREN);
			setState(1915);
			pragma_elements();
			setState(1920);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(1916);
				match(COMMA);
				setState(1917);
				pragma_elements();
				}
				}
				setState(1922);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1923);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_elementsContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		public Pragma_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPragma_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPragma_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPragma_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_elementsContext pragma_elements() throws RecognitionException {
		Pragma_elementsContext _localctx = new Pragma_elementsContext(_ctx, getState());
		enterRule(_localctx, 212, RULE_pragma_elements);
		try {
			setState(1927);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(1925);
				id();
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 2);
				{
				setState(1926);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_elements_parameterContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Type_elements_parameterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_elements_parameter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_elements_parameter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_elements_parameter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_elements_parameter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_elements_parameterContext type_elements_parameter() throws RecognitionException {
		Type_elements_parameterContext _localctx = new Type_elements_parameterContext(_ctx, getState());
		enterRule(_localctx, 214, RULE_type_elements_parameter);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1929);
			parameter_name();
			setState(1930);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Create_sequenceContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(HanaParser.CREATE, 0); }
		public TerminalNode SEQUENCE() { return getToken(HanaParser.SEQUENCE, 0); }
		public Sequence_nameContext sequence_name() {
			return getRuleContext(Sequence_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public List<Sequence_start_clauseContext> sequence_start_clause() {
			return getRuleContexts(Sequence_start_clauseContext.class);
		}
		public Sequence_start_clauseContext sequence_start_clause(int i) {
			return getRuleContext(Sequence_start_clauseContext.class,i);
		}
		public List<Sequence_specContext> sequence_spec() {
			return getRuleContexts(Sequence_specContext.class);
		}
		public Sequence_specContext sequence_spec(int i) {
			return getRuleContext(Sequence_specContext.class,i);
		}
		public Create_sequenceContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_create_sequence; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCreate_sequence(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCreate_sequence(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCreate_sequence(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Create_sequenceContext create_sequence() throws RecognitionException {
		Create_sequenceContext _localctx = new Create_sequenceContext(_ctx, getState());
		enterRule(_localctx, 216, RULE_create_sequence);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1932);
			match(CREATE);
			setState(1933);
			match(SEQUENCE);
			setState(1934);
			sequence_name();
			setState(1939);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CACHE || _la==CYCLE || ((((_la - 175)) & ~0x3f) == 0 && ((1L << (_la - 175)) & ((1L << (INCREMENT - 175)) | (1L << (MAXVALUE - 175)) | (1L << (MINVALUE - 175)))) != 0) || ((((_la - 249)) & ~0x3f) == 0 && ((1L << (_la - 249)) & ((1L << (NOCACHE - 249)) | (1L << (NOCYCLE - 249)) | (1L << (NOMAXVALUE - 249)) | (1L << (NOMINVALUE - 249)) | (1L << (NOORDER - 249)) | (1L << (ORDER - 249)))) != 0) || _la==START) {
				{
				setState(1937);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case START:
					{
					setState(1935);
					sequence_start_clause();
					}
					break;
				case CACHE:
				case CYCLE:
				case INCREMENT:
				case MAXVALUE:
				case MINVALUE:
				case NOCACHE:
				case NOCYCLE:
				case NOMAXVALUE:
				case NOMINVALUE:
				case NOORDER:
				case ORDER:
					{
					setState(1936);
					sequence_spec();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(1941);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(1942);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_specContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(HanaParser.INCREMENT, 0); }
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(HanaParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode MAXVALUE() { return getToken(HanaParser.MAXVALUE, 0); }
		public TerminalNode NOMAXVALUE() { return getToken(HanaParser.NOMAXVALUE, 0); }
		public TerminalNode MINVALUE() { return getToken(HanaParser.MINVALUE, 0); }
		public TerminalNode NOMINVALUE() { return getToken(HanaParser.NOMINVALUE, 0); }
		public TerminalNode CYCLE() { return getToken(HanaParser.CYCLE, 0); }
		public TerminalNode NOCYCLE() { return getToken(HanaParser.NOCYCLE, 0); }
		public TerminalNode CACHE() { return getToken(HanaParser.CACHE, 0); }
		public TerminalNode NOCACHE() { return getToken(HanaParser.NOCACHE, 0); }
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		public TerminalNode NOORDER() { return getToken(HanaParser.NOORDER, 0); }
		public Sequence_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSequence_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSequence_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSequence_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_specContext sequence_spec() throws RecognitionException {
		Sequence_specContext _localctx = new Sequence_specContext(_ctx, getState());
		enterRule(_localctx, 218, RULE_sequence_spec);
		try {
			setState(1960);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INCREMENT:
				enterOuterAlt(_localctx, 1);
				{
				setState(1944);
				match(INCREMENT);
				setState(1945);
				match(BY);
				setState(1946);
				match(UNSIGNED_INTEGER);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(1947);
				match(MAXVALUE);
				setState(1948);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMAXVALUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(1949);
				match(NOMAXVALUE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 4);
				{
				setState(1950);
				match(MINVALUE);
				setState(1951);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOMINVALUE:
				enterOuterAlt(_localctx, 5);
				{
				setState(1952);
				match(NOMINVALUE);
				}
				break;
			case CYCLE:
				enterOuterAlt(_localctx, 6);
				{
				setState(1953);
				match(CYCLE);
				}
				break;
			case NOCYCLE:
				enterOuterAlt(_localctx, 7);
				{
				setState(1954);
				match(NOCYCLE);
				}
				break;
			case CACHE:
				enterOuterAlt(_localctx, 8);
				{
				setState(1955);
				match(CACHE);
				setState(1956);
				match(UNSIGNED_INTEGER);
				}
				break;
			case NOCACHE:
				enterOuterAlt(_localctx, 9);
				{
				setState(1957);
				match(NOCACHE);
				}
				break;
			case ORDER:
				enterOuterAlt(_localctx, 10);
				{
				setState(1958);
				match(ORDER);
				}
				break;
			case NOORDER:
				enterOuterAlt(_localctx, 11);
				{
				setState(1959);
				match(NOORDER);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_start_clauseContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(HanaParser.START, 0); }
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		public TerminalNode UNSIGNED_INTEGER() { return getToken(HanaParser.UNSIGNED_INTEGER, 0); }
		public Sequence_start_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_start_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSequence_start_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSequence_start_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSequence_start_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_start_clauseContext sequence_start_clause() throws RecognitionException {
		Sequence_start_clauseContext _localctx = new Sequence_start_clauseContext(_ctx, getState());
		enterRule(_localctx, 220, RULE_sequence_start_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1962);
			match(START);
			setState(1963);
			match(WITH);
			setState(1964);
			match(UNSIGNED_INTEGER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Invoker_rights_clauseContext extends ParserRuleContext {
		public TerminalNode AUTHID() { return getToken(HanaParser.AUTHID, 0); }
		public TerminalNode CURRENT_USER() { return getToken(HanaParser.CURRENT_USER, 0); }
		public TerminalNode DEFINER() { return getToken(HanaParser.DEFINER, 0); }
		public Invoker_rights_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_invoker_rights_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterInvoker_rights_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitInvoker_rights_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitInvoker_rights_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Invoker_rights_clauseContext invoker_rights_clause() throws RecognitionException {
		Invoker_rights_clauseContext _localctx = new Invoker_rights_clauseContext(_ctx, getState());
		enterRule(_localctx, 222, RULE_invoker_rights_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1966);
			match(AUTHID);
			setState(1967);
			_la = _input.LA(1);
			if ( !(_la==CURRENT_USER || _la==DEFINER) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compiler_parameters_clauseContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Compiler_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compiler_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCompiler_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCompiler_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCompiler_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compiler_parameters_clauseContext compiler_parameters_clause() throws RecognitionException {
		Compiler_parameters_clauseContext _localctx = new Compiler_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 224, RULE_compiler_parameters_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1969);
			id();
			setState(1970);
			match(EQUALS_OP);
			setState(1971);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Call_specContext extends ParserRuleContext {
		public TerminalNode LANGUAGE() { return getToken(HanaParser.LANGUAGE, 0); }
		public Java_specContext java_spec() {
			return getRuleContext(Java_specContext.class,0);
		}
		public C_specContext c_spec() {
			return getRuleContext(C_specContext.class,0);
		}
		public Call_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_call_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCall_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCall_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCall_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Call_specContext call_spec() throws RecognitionException {
		Call_specContext _localctx = new Call_specContext(_ctx, getState());
		enterRule(_localctx, 226, RULE_call_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1973);
			match(LANGUAGE);
			setState(1976);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case JAVA:
				{
				setState(1974);
				java_spec();
				}
				break;
			case C_LETTER:
				{
				setState(1975);
				c_spec();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Java_specContext extends ParserRuleContext {
		public TerminalNode JAVA() { return getToken(HanaParser.JAVA, 0); }
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(HanaParser.CHAR_STRING, 0); }
		public Java_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_java_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterJava_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitJava_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitJava_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Java_specContext java_spec() throws RecognitionException {
		Java_specContext _localctx = new Java_specContext(_ctx, getState());
		enterRule(_localctx, 228, RULE_java_spec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1978);
			match(JAVA);
			setState(1979);
			match(NAME);
			setState(1980);
			match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_specContext extends ParserRuleContext {
		public TerminalNode C_LETTER() { return getToken(HanaParser.C_LETTER, 0); }
		public TerminalNode LIBRARY() { return getToken(HanaParser.LIBRARY, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		public TerminalNode CHAR_STRING() { return getToken(HanaParser.CHAR_STRING, 0); }
		public C_agent_in_clauseContext c_agent_in_clause() {
			return getRuleContext(C_agent_in_clauseContext.class,0);
		}
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		public TerminalNode CONTEXT() { return getToken(HanaParser.CONTEXT, 0); }
		public C_parameters_clauseContext c_parameters_clause() {
			return getRuleContext(C_parameters_clauseContext.class,0);
		}
		public C_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterC_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitC_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitC_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_specContext c_spec() throws RecognitionException {
		C_specContext _localctx = new C_specContext(_ctx, getState());
		enterRule(_localctx, 230, RULE_c_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1982);
			match(C_LETTER);
			setState(1985);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(1983);
				match(NAME);
				setState(1984);
				match(CHAR_STRING);
				}
			}

			setState(1987);
			match(LIBRARY);
			setState(1988);
			id();
			setState(1990);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AGENT) {
				{
				setState(1989);
				c_agent_in_clause();
				}
			}

			setState(1994);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(1992);
				match(WITH);
				setState(1993);
				match(CONTEXT);
				}
			}

			setState(1997);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARAMETERS) {
				{
				setState(1996);
				c_parameters_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_agent_in_clauseContext extends ParserRuleContext {
		public TerminalNode AGENT() { return getToken(HanaParser.AGENT, 0); }
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public C_agent_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_agent_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterC_agent_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitC_agent_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitC_agent_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_agent_in_clauseContext c_agent_in_clause() throws RecognitionException {
		C_agent_in_clauseContext _localctx = new C_agent_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 232, RULE_c_agent_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(1999);
			match(AGENT);
			setState(2000);
			match(IN);
			setState(2001);
			match(LEFT_PAREN);
			setState(2002);
			expression();
			setState(2007);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2003);
				match(COMMA);
				setState(2004);
				expression();
				}
				}
				setState(2009);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2010);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class C_parameters_clauseContext extends ParserRuleContext {
		public TerminalNode PARAMETERS() { return getToken(HanaParser.PARAMETERS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public C_parameters_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_c_parameters_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterC_parameters_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitC_parameters_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitC_parameters_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final C_parameters_clauseContext c_parameters_clause() throws RecognitionException {
		C_parameters_clauseContext _localctx = new C_parameters_clauseContext(_ctx, getState());
		enterRule(_localctx, 234, RULE_c_parameters_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2012);
			match(PARAMETERS);
			setState(2013);
			match(LEFT_PAREN);
			setState(2025);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case T__6:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2014);
				expression();
				setState(2019);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2015);
					match(COMMA);
					setState(2016);
					expression();
					}
					}
					setState(2021);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case PERIOD:
				{
				setState(2022);
				match(PERIOD);
				setState(2023);
				match(PERIOD);
				setState(2024);
				match(PERIOD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2027);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Default_value_partContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode ASSIGN_OP() { return getToken(HanaParser.ASSIGN_OP, 0); }
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		public Default_value_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_default_value_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDefault_value_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDefault_value_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDefault_value_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Default_value_partContext default_value_part() throws RecognitionException {
		Default_value_partContext _localctx = new Default_value_partContext(_ctx, getState());
		enterRule(_localctx, 236, RULE_default_value_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2029);
			_la = _input.LA(1);
			if ( !(_la==DEFAULT || _la==ASSIGN_OP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2030);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_specContext extends ParserRuleContext {
		public Variable_declarationContext variable_declaration() {
			return getRuleContext(Variable_declarationContext.class,0);
		}
		public Subtype_declarationContext subtype_declaration() {
			return getRuleContext(Subtype_declarationContext.class,0);
		}
		public Cursor_declarationContext cursor_declaration() {
			return getRuleContext(Cursor_declarationContext.class,0);
		}
		public Exception_declarationContext exception_declaration() {
			return getRuleContext(Exception_declarationContext.class,0);
		}
		public Pragma_declarationContext pragma_declaration() {
			return getRuleContext(Pragma_declarationContext.class,0);
		}
		public Record_declarationContext record_declaration() {
			return getRuleContext(Record_declarationContext.class,0);
		}
		public Table_declarationContext table_declaration() {
			return getRuleContext(Table_declarationContext.class,0);
		}
		public Create_procedure_bodyContext create_procedure_body() {
			return getRuleContext(Create_procedure_bodyContext.class,0);
		}
		public Declare_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDeclare_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDeclare_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDeclare_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_specContext declare_spec() throws RecognitionException {
		Declare_specContext _localctx = new Declare_specContext(_ctx, getState());
		enterRule(_localctx, 238, RULE_declare_spec);
		try {
			setState(2040);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,167,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2032);
				variable_declaration();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2033);
				subtype_declaration();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2034);
				cursor_declaration();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2035);
				exception_declaration();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2036);
				pragma_declaration();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2037);
				record_declaration();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2038);
				table_declaration();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2039);
				create_procedure_body();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_declarationContext extends ParserRuleContext {
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public TerminalNode CONSTANT() { return getToken(HanaParser.CONSTANT, 0); }
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Variable_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterVariable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitVariable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitVariable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_declarationContext variable_declaration() throws RecognitionException {
		Variable_declarationContext _localctx = new Variable_declarationContext(_ctx, getState());
		enterRule(_localctx, 240, RULE_variable_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2042);
			variable_name();
			setState(2044);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,168,_ctx) ) {
			case 1:
				{
				setState(2043);
				match(CONSTANT);
				}
				break;
			}
			setState(2046);
			type_spec();
			setState(2049);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2047);
				match(NOT);
				setState(2048);
				match(NULL);
				}
			}

			setState(2052);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2051);
				default_value_part();
				}
			}

			setState(2054);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subtype_declarationContext extends ParserRuleContext {
		public TerminalNode SUBTYPE() { return getToken(HanaParser.SUBTYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public TerminalNode RANGE() { return getToken(HanaParser.RANGE, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		public Subtype_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subtype_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubtype_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubtype_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubtype_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subtype_declarationContext subtype_declaration() throws RecognitionException {
		Subtype_declarationContext _localctx = new Subtype_declarationContext(_ctx, getState());
		enterRule(_localctx, 242, RULE_subtype_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2056);
			match(SUBTYPE);
			setState(2057);
			type_name();
			setState(2058);
			match(IS);
			setState(2059);
			type_spec();
			setState(2065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RANGE) {
				{
				setState(2060);
				match(RANGE);
				setState(2061);
				expression();
				setState(2062);
				match(T__3);
				setState(2063);
				expression();
				}
			}

			setState(2069);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2067);
				match(NOT);
				setState(2068);
				match(NULL);
				}
			}

			setState(2071);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_declarationContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(HanaParser.CURSOR, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Parameter_specContext> parameter_spec() {
			return getRuleContexts(Parameter_specContext.class);
		}
		public Parameter_specContext parameter_spec(int i) {
			return getRuleContext(Parameter_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Cursor_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCursor_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCursor_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCursor_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_declarationContext cursor_declaration() throws RecognitionException {
		Cursor_declarationContext _localctx = new Cursor_declarationContext(_ctx, getState());
		enterRule(_localctx, 244, RULE_cursor_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2073);
			match(CURSOR);
			setState(2074);
			cursor_name();
			setState(2086);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2075);
				match(LEFT_PAREN);
				setState(2076);
				parameter_spec();
				setState(2081);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2077);
					match(COMMA);
					setState(2078);
					parameter_spec();
					}
					}
					setState(2083);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2084);
				match(RIGHT_PAREN);
				}
			}

			setState(2090);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(2088);
				match(RETURN);
				setState(2089);
				type_spec();
				}
			}

			setState(2094);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==IS) {
				{
				setState(2092);
				match(IS);
				setState(2093);
				select_statement();
				}
			}

			setState(2096);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Parameter_specContext extends ParserRuleContext {
		public Parameter_nameContext parameter_name() {
			return getRuleContext(Parameter_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public Parameter_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parameter_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterParameter_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitParameter_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitParameter_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Parameter_specContext parameter_spec() throws RecognitionException {
		Parameter_specContext _localctx = new Parameter_specContext(_ctx, getState());
		enterRule(_localctx, 246, RULE_parameter_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2098);
			parameter_name();
			setState(2103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIGINT) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (IN - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SECONDDATE - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(2100);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IN) {
					{
					setState(2099);
					match(IN);
					}
				}

				setState(2102);
				type_spec();
				}
			}

			setState(2106);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2105);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_declarationContext extends ParserRuleContext {
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public TerminalNode EXCEPTION() { return getToken(HanaParser.EXCEPTION, 0); }
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Exception_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterException_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitException_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitException_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_declarationContext exception_declaration() throws RecognitionException {
		Exception_declarationContext _localctx = new Exception_declarationContext(_ctx, getState());
		enterRule(_localctx, 248, RULE_exception_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2108);
			exception_name();
			setState(2109);
			match(EXCEPTION);
			setState(2110);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pragma_declarationContext extends ParserRuleContext {
		public IdContext id1;
		public TerminalNode PRAGMA() { return getToken(HanaParser.PRAGMA, 0); }
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(HanaParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(HanaParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(HanaParser.EXCEPTION_INIT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Numeric_negativeContext numeric_negative() {
			return getRuleContext(Numeric_negativeContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode INLINE() { return getToken(HanaParser.INLINE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RESTRICT_REFERENCES() { return getToken(HanaParser.RESTRICT_REFERENCES, 0); }
		public List<IdContext> id() {
			return getRuleContexts(IdContext.class);
		}
		public IdContext id(int i) {
			return getRuleContext(IdContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		public Pragma_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pragma_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPragma_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPragma_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPragma_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pragma_declarationContext pragma_declaration() throws RecognitionException {
		Pragma_declarationContext _localctx = new Pragma_declarationContext(_ctx, getState());
		enterRule(_localctx, 250, RULE_pragma_declaration);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2112);
			match(PRAGMA);
			setState(2143);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SERIALLY_REUSABLE:
				{
				setState(2113);
				match(SERIALLY_REUSABLE);
				}
				break;
			case AUTONOMOUS_TRANSACTION:
				{
				setState(2114);
				match(AUTONOMOUS_TRANSACTION);
				}
				break;
			case EXCEPTION_INIT:
				{
				setState(2115);
				match(EXCEPTION_INIT);
				setState(2116);
				match(LEFT_PAREN);
				setState(2117);
				exception_name();
				setState(2118);
				match(COMMA);
				setState(2119);
				numeric_negative();
				setState(2120);
				match(RIGHT_PAREN);
				}
				break;
			case INLINE:
				{
				setState(2122);
				match(INLINE);
				setState(2123);
				match(LEFT_PAREN);
				setState(2124);
				((Pragma_declarationContext)_localctx).id1 = id();
				setState(2125);
				match(COMMA);
				setState(2126);
				expression();
				setState(2127);
				match(RIGHT_PAREN);
				}
				break;
			case RESTRICT_REFERENCES:
				{
				setState(2129);
				match(RESTRICT_REFERENCES);
				setState(2130);
				match(LEFT_PAREN);
				setState(2133);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNS:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2131);
					id();
					}
					break;
				case DEFAULT:
					{
					setState(2132);
					match(DEFAULT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(2137); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2135);
					match(COMMA);
					setState(2136);
					id();
					}
					}
					setState(2139); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==COMMA );
				setState(2141);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2145);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_declarationContext extends ParserRuleContext {
		public Record_type_decContext record_type_dec() {
			return getRuleContext(Record_type_decContext.class,0);
		}
		public Record_var_decContext record_var_dec() {
			return getRuleContext(Record_var_decContext.class,0);
		}
		public Record_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRecord_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRecord_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRecord_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_declarationContext record_declaration() throws RecognitionException {
		Record_declarationContext _localctx = new Record_declarationContext(_ctx, getState());
		enterRule(_localctx, 252, RULE_record_declaration);
		try {
			setState(2149);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,183,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2147);
				record_type_dec();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2148);
				record_var_dec();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(HanaParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public TerminalNode RECORD() { return getToken(HanaParser.RECORD, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Field_specContext> field_spec() {
			return getRuleContexts(Field_specContext.class);
		}
		public Field_specContext field_spec(int i) {
			return getRuleContext(Field_specContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode REF() { return getToken(HanaParser.REF, 0); }
		public TerminalNode CURSOR() { return getToken(HanaParser.CURSOR, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Record_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRecord_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRecord_type_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRecord_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_type_decContext record_type_dec() throws RecognitionException {
		Record_type_decContext _localctx = new Record_type_decContext(_ctx, getState());
		enterRule(_localctx, 254, RULE_record_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2151);
			match(TYPE);
			setState(2152);
			type_name();
			setState(2153);
			match(IS);
			setState(2172);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case RECORD:
				{
				setState(2154);
				match(RECORD);
				setState(2155);
				match(LEFT_PAREN);
				setState(2156);
				field_spec();
				setState(2161);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2157);
					match(COMMA);
					setState(2158);
					field_spec();
					}
					}
					setState(2163);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2164);
				match(RIGHT_PAREN);
				}
				break;
			case REF:
				{
				setState(2166);
				match(REF);
				setState(2167);
				match(CURSOR);
				setState(2170);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN) {
					{
					setState(2168);
					match(RETURN);
					setState(2169);
					type_spec();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2174);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Field_specContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Field_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_field_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterField_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitField_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitField_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Field_specContext field_spec() throws RecognitionException {
		Field_specContext _localctx = new Field_specContext(_ctx, getState());
		enterRule(_localctx, 256, RULE_field_spec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2176);
			column_name();
			setState(2178);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BIGINT) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SECONDDATE - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(2177);
				type_spec();
				}
			}

			setState(2182);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(2180);
				match(NOT);
				setState(2181);
				match(NULL);
				}
			}

			setState(2185);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(2184);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_var_decContext extends ParserRuleContext {
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(HanaParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(HanaParser.PERCENT_TYPE, 0); }
		public Record_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRecord_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRecord_var_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRecord_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_var_decContext record_var_dec() throws RecognitionException {
		Record_var_decContext _localctx = new Record_var_decContext(_ctx, getState());
		enterRule(_localctx, 258, RULE_record_var_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2187);
			record_name();
			setState(2188);
			type_name();
			setState(2189);
			_la = _input.LA(1);
			if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2190);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_declarationContext extends ParserRuleContext {
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Table_type_decContext table_type_dec() {
			return getRuleContext(Table_type_decContext.class,0);
		}
		public Table_var_decContext table_var_dec() {
			return getRuleContext(Table_var_decContext.class,0);
		}
		public Table_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_declarationContext table_declaration() throws RecognitionException {
		Table_declarationContext _localctx = new Table_declarationContext(_ctx, getState());
		enterRule(_localctx, 260, RULE_table_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,190,_ctx) ) {
			case 1:
				{
				setState(2192);
				table_type_dec();
				}
				break;
			case 2:
				{
				setState(2193);
				table_var_dec();
				}
				break;
			}
			setState(2196);
			match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_type_decContext extends ParserRuleContext {
		public TerminalNode TYPE() { return getToken(HanaParser.TYPE, 0); }
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Varray_type_defContext varray_type_def() {
			return getRuleContext(Varray_type_defContext.class,0);
		}
		public Table_indexed_by_partContext table_indexed_by_part() {
			return getRuleContext(Table_indexed_by_partContext.class,0);
		}
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		public Table_type_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_type_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_type_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_type_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_type_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_type_decContext table_type_dec() throws RecognitionException {
		Table_type_decContext _localctx = new Table_type_decContext(_ctx, getState());
		enterRule(_localctx, 262, RULE_table_type_dec);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2198);
			match(TYPE);
			setState(2199);
			type_name();
			setState(2200);
			match(IS);
			setState(2212);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
				{
				setState(2201);
				match(TABLE);
				setState(2202);
				match(OF);
				setState(2203);
				type_spec();
				setState(2205);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDEX || _la==INDEXED) {
					{
					setState(2204);
					table_indexed_by_part();
					}
				}

				setState(2209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(2207);
					match(NOT);
					setState(2208);
					match(NULL);
					}
				}

				}
				break;
			case VARRAY:
			case VARYING:
				{
				setState(2211);
				varray_type_def();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_indexed_by_partContext extends ParserRuleContext {
		public Token idx1;
		public Token idx2;
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode INDEXED() { return getToken(HanaParser.INDEXED, 0); }
		public TerminalNode INDEX() { return getToken(HanaParser.INDEX, 0); }
		public Table_indexed_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_indexed_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_indexed_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_indexed_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_indexed_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_indexed_by_partContext table_indexed_by_part() throws RecognitionException {
		Table_indexed_by_partContext _localctx = new Table_indexed_by_partContext(_ctx, getState());
		enterRule(_localctx, 264, RULE_table_indexed_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2216);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INDEXED:
				{
				setState(2214);
				((Table_indexed_by_partContext)_localctx).idx1 = match(INDEXED);
				}
				break;
			case INDEX:
				{
				setState(2215);
				((Table_indexed_by_partContext)_localctx).idx2 = match(INDEX);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2218);
			match(BY);
			setState(2219);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Varray_type_defContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode VARRAY() { return getToken(HanaParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(HanaParser.VARYING, 0); }
		public TerminalNode ARRAY() { return getToken(HanaParser.ARRAY, 0); }
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		public Varray_type_defContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varray_type_def; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterVarray_type_def(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitVarray_type_def(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitVarray_type_def(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Varray_type_defContext varray_type_def() throws RecognitionException {
		Varray_type_defContext _localctx = new Varray_type_defContext(_ctx, getState());
		enterRule(_localctx, 266, RULE_varray_type_def);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2224);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VARRAY:
				{
				setState(2221);
				match(VARRAY);
				}
				break;
			case VARYING:
				{
				setState(2222);
				match(VARYING);
				setState(2223);
				match(ARRAY);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2226);
			match(LEFT_PAREN);
			setState(2227);
			expression();
			setState(2228);
			match(RIGHT_PAREN);
			setState(2229);
			match(OF);
			setState(2230);
			type_spec();
			setState(2233);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,196,_ctx) ) {
			case 1:
				{
				setState(2231);
				match(NOT);
				setState(2232);
				match(NULL);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_decContext extends ParserRuleContext {
		public Table_var_nameContext table_var_name() {
			return getRuleContext(Table_var_nameContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Table_var_decContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_dec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_var_dec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_var_dec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_var_dec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_decContext table_var_dec() throws RecognitionException {
		Table_var_decContext _localctx = new Table_var_decContext(_ctx, getState());
		enterRule(_localctx, 268, RULE_table_var_dec);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2235);
			table_var_name();
			setState(2236);
			type_spec();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seq_of_statementsContext extends ParserRuleContext {
		public List<StatementContext> statement() {
			return getRuleContexts(StatementContext.class);
		}
		public StatementContext statement(int i) {
			return getRuleContext(StatementContext.class,i);
		}
		public List<Label_declarationContext> label_declaration() {
			return getRuleContexts(Label_declarationContext.class);
		}
		public Label_declarationContext label_declaration(int i) {
			return getRuleContext(Label_declarationContext.class,i);
		}
		public List<TerminalNode> SEMICOLON() { return getTokens(HanaParser.SEMICOLON); }
		public TerminalNode SEMICOLON(int i) {
			return getToken(HanaParser.SEMICOLON, i);
		}
		public List<TerminalNode> EOF() { return getTokens(HanaParser.EOF); }
		public TerminalNode EOF(int i) {
			return getToken(HanaParser.EOF, i);
		}
		public Seq_of_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seq_of_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSeq_of_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSeq_of_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSeq_of_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seq_of_statementsContext seq_of_statements() throws RecognitionException {
		Seq_of_statementsContext _localctx = new Seq_of_statementsContext(_ctx, getState());
		enterRule(_localctx, 270, RULE_seq_of_statements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2242); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				setState(2242);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case T__6:
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALTER:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BEGIN:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CREATE:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECLARE:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DELETE:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FETCH:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FOR:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GOTO:
				case GRANT:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IF:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSERT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCK:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNS:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELECT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATE:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITH:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case SQL_ERROR_CODE:
				case SQL_ERROR_MESSAGE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(2238);
					statement();
					setState(2239);
					_la = _input.LA(1);
					if ( !(_la==EOF || _la==SEMICOLON) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				case LESS_THAN_OP:
					{
					setState(2241);
					label_declaration();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2244); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALTER) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BEGIN) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DELETE - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FETCH - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FOR - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GOTO - 128)) | (1L << (GRANT - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IF - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSERT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCK - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULL - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELECT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATE - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITH - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (LESS_THAN_OP - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_declarationContext extends ParserRuleContext {
		public Token ltp1;
		public List<TerminalNode> LESS_THAN_OP() { return getTokens(HanaParser.LESS_THAN_OP); }
		public TerminalNode LESS_THAN_OP(int i) {
			return getToken(HanaParser.LESS_THAN_OP, i);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public List<TerminalNode> GREATER_THAN_OP() { return getTokens(HanaParser.GREATER_THAN_OP); }
		public TerminalNode GREATER_THAN_OP(int i) {
			return getToken(HanaParser.GREATER_THAN_OP, i);
		}
		public Label_declarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_declaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLabel_declaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLabel_declaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLabel_declaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_declarationContext label_declaration() throws RecognitionException {
		Label_declarationContext _localctx = new Label_declarationContext(_ctx, getState());
		enterRule(_localctx, 272, RULE_label_declaration);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2246);
			((Label_declarationContext)_localctx).ltp1 = match(LESS_THAN_OP);
			setState(2247);
			match(LESS_THAN_OP);
			setState(2248);
			label_name();
			setState(2249);
			match(GREATER_THAN_OP);
			setState(2250);
			match(GREATER_THAN_OP);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StatementContext extends ParserRuleContext {
		public TerminalNode CREATE() { return getToken(HanaParser.CREATE, 0); }
		public Swallow_to_semiContext swallow_to_semi() {
			return getRuleContext(Swallow_to_semiContext.class,0);
		}
		public TerminalNode ALTER() { return getToken(HanaParser.ALTER, 0); }
		public TerminalNode GRANT() { return getToken(HanaParser.GRANT, 0); }
		public TerminalNode TRUNCATE() { return getToken(HanaParser.TRUNCATE, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public BlockContext block() {
			return getRuleContext(BlockContext.class,0);
		}
		public Assignment_statementContext assignment_statement() {
			return getRuleContext(Assignment_statementContext.class,0);
		}
		public Continue_statementContext continue_statement() {
			return getRuleContext(Continue_statementContext.class,0);
		}
		public Exit_statementContext exit_statement() {
			return getRuleContext(Exit_statementContext.class,0);
		}
		public Goto_statementContext goto_statement() {
			return getRuleContext(Goto_statementContext.class,0);
		}
		public If_statementContext if_statement() {
			return getRuleContext(If_statementContext.class,0);
		}
		public Loop_statementContext loop_statement() {
			return getRuleContext(Loop_statementContext.class,0);
		}
		public Forall_statementContext forall_statement() {
			return getRuleContext(Forall_statementContext.class,0);
		}
		public Null_statementContext null_statement() {
			return getRuleContext(Null_statementContext.class,0);
		}
		public Raise_statementContext raise_statement() {
			return getRuleContext(Raise_statementContext.class,0);
		}
		public Return_statementContext return_statement() {
			return getRuleContext(Return_statementContext.class,0);
		}
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public Function_callContext function_call() {
			return getRuleContext(Function_callContext.class,0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterStatement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitStatement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitStatement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StatementContext statement() throws RecognitionException {
		StatementContext _localctx = new StatementContext(_ctx, getState());
		enterRule(_localctx, 274, RULE_statement);
		try {
			setState(2275);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,199,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2252);
				match(CREATE);
				setState(2253);
				swallow_to_semi();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2254);
				match(ALTER);
				setState(2255);
				swallow_to_semi();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2256);
				match(GRANT);
				setState(2257);
				swallow_to_semi();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2258);
				match(TRUNCATE);
				setState(2259);
				swallow_to_semi();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2260);
				body();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2261);
				block();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2262);
				assignment_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2263);
				continue_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2264);
				exit_statement();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(2265);
				goto_statement();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(2266);
				if_statement();
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(2267);
				loop_statement();
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(2268);
				forall_statement();
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(2269);
				null_statement();
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(2270);
				raise_statement();
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(2271);
				return_statement();
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(2272);
				case_statement();
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(2273);
				sql_statement();
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(2274);
				function_call();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Assignment_statementContext extends ParserRuleContext {
		public TerminalNode ASSIGN_OP() { return getToken(HanaParser.ASSIGN_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Assignment_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_assignment_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAssignment_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAssignment_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAssignment_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Assignment_statementContext assignment_statement() throws RecognitionException {
		Assignment_statementContext _localctx = new Assignment_statementContext(_ctx, getState());
		enterRule(_localctx, 276, RULE_assignment_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2279);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2277);
				general_element();
				}
				break;
			case T__6:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case BINDVAR:
			case COLON:
				{
				setState(2278);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2281);
			match(ASSIGN_OP);
			setState(2282);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Continue_statementContext extends ParserRuleContext {
		public TerminalNode CONTINUE() { return getToken(HanaParser.CONTINUE, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Continue_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_continue_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterContinue_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitContinue_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitContinue_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Continue_statementContext continue_statement() throws RecognitionException {
		Continue_statementContext _localctx = new Continue_statementContext(_ctx, getState());
		enterRule(_localctx, 278, RULE_continue_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2284);
			match(CONTINUE);
			setState(2286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(2285);
				label_name();
				}
			}

			setState(2290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2288);
				match(WHEN);
				setState(2289);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_statementContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(HanaParser.EXIT, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Exit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_statementContext exit_statement() throws RecognitionException {
		Exit_statementContext _localctx = new Exit_statementContext(_ctx, getState());
		enterRule(_localctx, 280, RULE_exit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2292);
			match(EXIT);
			setState(2294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(2293);
				label_name();
				}
			}

			setState(2298);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHEN) {
				{
				setState(2296);
				match(WHEN);
				setState(2297);
				condition();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Goto_statementContext extends ParserRuleContext {
		public TerminalNode GOTO() { return getToken(HanaParser.GOTO, 0); }
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public Goto_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_goto_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGoto_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGoto_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGoto_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Goto_statementContext goto_statement() throws RecognitionException {
		Goto_statementContext _localctx = new Goto_statementContext(_ctx, getState());
		enterRule(_localctx, 282, RULE_goto_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2300);
			match(GOTO);
			setState(2301);
			label_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class If_statementContext extends ParserRuleContext {
		public List<TerminalNode> IF() { return getTokens(HanaParser.IF); }
		public TerminalNode IF(int i) {
			return getToken(HanaParser.IF, i);
		}
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		public List<Elsif_partContext> elsif_part() {
			return getRuleContexts(Elsif_partContext.class);
		}
		public Elsif_partContext elsif_part(int i) {
			return getRuleContext(Elsif_partContext.class,i);
		}
		public Else_partContext else_part() {
			return getRuleContext(Else_partContext.class,0);
		}
		public If_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_if_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterIf_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitIf_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitIf_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final If_statementContext if_statement() throws RecognitionException {
		If_statementContext _localctx = new If_statementContext(_ctx, getState());
		enterRule(_localctx, 284, RULE_if_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2303);
			match(IF);
			setState(2304);
			condition();
			setState(2305);
			match(THEN);
			setState(2306);
			seq_of_statements();
			setState(2310);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==ELSIF) {
				{
				{
				setState(2307);
				elsif_part();
				}
				}
				setState(2312);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2314);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(2313);
				else_part();
				}
			}

			setState(2316);
			match(END);
			setState(2317);
			match(IF);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Elsif_partContext extends ParserRuleContext {
		public TerminalNode ELSIF() { return getToken(HanaParser.ELSIF, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Elsif_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_elsif_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterElsif_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitElsif_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitElsif_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Elsif_partContext elsif_part() throws RecognitionException {
		Elsif_partContext _localctx = new Elsif_partContext(_ctx, getState());
		enterRule(_localctx, 286, RULE_elsif_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2319);
			match(ELSIF);
			setState(2320);
			condition();
			setState(2321);
			match(THEN);
			setState(2322);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(HanaParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterElse_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitElse_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitElse_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Else_partContext else_part() throws RecognitionException {
		Else_partContext _localctx = new Else_partContext(_ctx, getState());
		enterRule(_localctx, 288, RULE_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2324);
			match(ELSE);
			setState(2325);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Loop_statementContext extends ParserRuleContext {
		public List<TerminalNode> LOOP() { return getTokens(HanaParser.LOOP); }
		public TerminalNode LOOP(int i) {
			return getToken(HanaParser.LOOP, i);
		}
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public TerminalNode WHILE() { return getToken(HanaParser.WHILE, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public Cursor_loop_paramContext cursor_loop_param() {
			return getRuleContext(Cursor_loop_paramContext.class,0);
		}
		public Loop_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_loop_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLoop_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLoop_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLoop_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Loop_statementContext loop_statement() throws RecognitionException {
		Loop_statementContext _localctx = new Loop_statementContext(_ctx, getState());
		enterRule(_localctx, 290, RULE_loop_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2328);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,207,_ctx) ) {
			case 1:
				{
				setState(2327);
				label_name();
				}
				break;
			}
			setState(2334);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WHILE:
				{
				setState(2330);
				match(WHILE);
				setState(2331);
				condition();
				}
				break;
			case FOR:
				{
				setState(2332);
				match(FOR);
				setState(2333);
				cursor_loop_param();
				}
				break;
			case LOOP:
				break;
			default:
				break;
			}
			setState(2336);
			match(LOOP);
			setState(2337);
			seq_of_statements();
			setState(2338);
			match(END);
			setState(2339);
			match(LOOP);
			setState(2341);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(2340);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_loop_paramContext extends ParserRuleContext {
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode REVERSE() { return getToken(HanaParser.REVERSE, 0); }
		public Record_nameContext record_name() {
			return getRuleContext(Record_nameContext.class,0);
		}
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Cursor_loop_paramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_loop_param; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCursor_loop_param(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCursor_loop_param(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCursor_loop_param(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_loop_paramContext cursor_loop_param() throws RecognitionException {
		Cursor_loop_paramContext _localctx = new Cursor_loop_paramContext(_ctx, getState());
		enterRule(_localctx, 292, RULE_cursor_loop_param);
		int _la;
		try {
			setState(2364);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,213,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2343);
				index_name();
				setState(2344);
				match(IN);
				setState(2346);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,210,_ctx) ) {
				case 1:
					{
					setState(2345);
					match(REVERSE);
					}
					break;
				}
				setState(2348);
				lower_bound();
				setState(2349);
				match(T__3);
				setState(2350);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2352);
				record_name();
				setState(2353);
				match(IN);
				setState(2362);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNS:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case REGULAR_ID:
					{
					setState(2354);
					cursor_name();
					setState(2356);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LEFT_PAREN) {
						{
						setState(2355);
						expression_list();
						}
					}

					}
					break;
				case LEFT_PAREN:
					{
					setState(2358);
					match(LEFT_PAREN);
					setState(2359);
					select_statement();
					setState(2360);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Forall_statementContext extends ParserRuleContext {
		public TerminalNode FORALL() { return getToken(HanaParser.FORALL, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public Bounds_clauseContext bounds_clause() {
			return getRuleContext(Bounds_clauseContext.class,0);
		}
		public Sql_statementContext sql_statement() {
			return getRuleContext(Sql_statementContext.class,0);
		}
		public TerminalNode SAVE() { return getToken(HanaParser.SAVE, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(HanaParser.EXCEPTIONS, 0); }
		public Forall_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_forall_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterForall_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitForall_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitForall_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Forall_statementContext forall_statement() throws RecognitionException {
		Forall_statementContext _localctx = new Forall_statementContext(_ctx, getState());
		enterRule(_localctx, 294, RULE_forall_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2366);
			match(FORALL);
			setState(2367);
			index_name();
			setState(2368);
			match(IN);
			setState(2369);
			bounds_clause();
			setState(2370);
			sql_statement();
			setState(2373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SAVE) {
				{
				setState(2371);
				match(SAVE);
				setState(2372);
				match(EXCEPTIONS);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bounds_clauseContext extends ParserRuleContext {
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public TerminalNode INDICES() { return getToken(HanaParser.INDICES, 0); }
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		public Collection_nameContext collection_name() {
			return getRuleContext(Collection_nameContext.class,0);
		}
		public Between_boundContext between_bound() {
			return getRuleContext(Between_boundContext.class,0);
		}
		public TerminalNode VALUES() { return getToken(HanaParser.VALUES, 0); }
		public Index_nameContext index_name() {
			return getRuleContext(Index_nameContext.class,0);
		}
		public Bounds_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bounds_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBounds_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBounds_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBounds_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bounds_clauseContext bounds_clause() throws RecognitionException {
		Bounds_clauseContext _localctx = new Bounds_clauseContext(_ctx, getState());
		enterRule(_localctx, 296, RULE_bounds_clause);
		int _la;
		try {
			setState(2388);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,216,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2375);
				lower_bound();
				setState(2376);
				match(T__3);
				setState(2377);
				upper_bound();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2379);
				match(INDICES);
				setState(2380);
				match(OF);
				setState(2381);
				collection_name();
				setState(2383);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==BETWEEN) {
					{
					setState(2382);
					between_bound();
					}
				}

				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2385);
				match(VALUES);
				setState(2386);
				match(OF);
				setState(2387);
				index_name();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_boundContext extends ParserRuleContext {
		public TerminalNode BETWEEN() { return getToken(HanaParser.BETWEEN, 0); }
		public Lower_boundContext lower_bound() {
			return getRuleContext(Lower_boundContext.class,0);
		}
		public TerminalNode AND() { return getToken(HanaParser.AND, 0); }
		public Upper_boundContext upper_bound() {
			return getRuleContext(Upper_boundContext.class,0);
		}
		public Between_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBetween_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBetween_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBetween_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_boundContext between_bound() throws RecognitionException {
		Between_boundContext _localctx = new Between_boundContext(_ctx, getState());
		enterRule(_localctx, 298, RULE_between_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2390);
			match(BETWEEN);
			setState(2391);
			lower_bound();
			setState(2392);
			match(AND);
			setState(2393);
			upper_bound();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lower_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Lower_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lower_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLower_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLower_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLower_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lower_boundContext lower_bound() throws RecognitionException {
		Lower_boundContext _localctx = new Lower_boundContext(_ctx, getState());
		enterRule(_localctx, 300, RULE_lower_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2395);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Upper_boundContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Upper_boundContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_upper_bound; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUpper_bound(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUpper_bound(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUpper_bound(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Upper_boundContext upper_bound() throws RecognitionException {
		Upper_boundContext _localctx = new Upper_boundContext(_ctx, getState());
		enterRule(_localctx, 302, RULE_upper_bound);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2397);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_statementContext extends ParserRuleContext {
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		public Null_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNull_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNull_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNull_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_statementContext null_statement() throws RecognitionException {
		Null_statementContext _localctx = new Null_statementContext(_ctx, getState());
		enterRule(_localctx, 304, RULE_null_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2399);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Raise_statementContext extends ParserRuleContext {
		public TerminalNode RAISE() { return getToken(HanaParser.RAISE, 0); }
		public Exception_nameContext exception_name() {
			return getRuleContext(Exception_nameContext.class,0);
		}
		public Raise_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_raise_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRaise_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRaise_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRaise_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Raise_statementContext raise_statement() throws RecognitionException {
		Raise_statementContext _localctx = new Raise_statementContext(_ctx, getState());
		enterRule(_localctx, 306, RULE_raise_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2401);
			match(RAISE);
			setState(2403);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(2402);
				exception_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_statementContext extends ParserRuleContext {
		public ConditionContext cn1;
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Return_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterReturn_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitReturn_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitReturn_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_statementContext return_statement() throws RecognitionException {
		Return_statementContext _localctx = new Return_statementContext(_ctx, getState());
		enterRule(_localctx, 308, RULE_return_statement);
		int _la;
		try {
			setState(2411);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,219,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2405);
				match(RETURN);
				setState(2407);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NOT - 257)) | (1L << (NULL - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (PRIOR - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUE - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (UNSIGNED_INTEGER - 513)) | (1L << (APPROXIMATE_NUM_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (PLUS_SIGN - 513)) | (1L << (MINUS_SIGN - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
					{
					setState(2406);
					((Return_statementContext)_localctx).cn1 = condition();
					}
				}

				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2409);
				match(RETURN);
				setState(2410);
				select_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_callContext extends ParserRuleContext {
		public Routine_nameContext routine_name() {
			return getRuleContext(Routine_nameContext.class,0);
		}
		public TerminalNode CALL() { return getToken(HanaParser.CALL, 0); }
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public Function_callContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_call; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunction_call(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunction_call(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunction_call(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_callContext function_call() throws RecognitionException {
		Function_callContext _localctx = new Function_callContext(_ctx, getState());
		enterRule(_localctx, 310, RULE_function_call);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,220,_ctx) ) {
			case 1:
				{
				setState(2413);
				match(CALL);
				}
				break;
			}
			setState(2416);
			routine_name();
			setState(2418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2417);
				function_argument();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public TerminalNode BEGIN() { return getToken(HanaParser.BEGIN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		public Exception_clauseContext exception_clause() {
			return getRuleContext(Exception_clauseContext.class,0);
		}
		public Label_nameContext label_name() {
			return getRuleContext(Label_nameContext.class,0);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 312, RULE_body);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2420);
			match(BEGIN);
			setState(2421);
			seq_of_statements();
			setState(2423);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCEPTION) {
				{
				setState(2422);
				exception_clause();
				}
			}

			setState(2425);
			match(END);
			setState(2427);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(2426);
				label_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_clauseContext extends ParserRuleContext {
		public TerminalNode EXCEPTION() { return getToken(HanaParser.EXCEPTION, 0); }
		public List<Exception_handlerContext> exception_handler() {
			return getRuleContexts(Exception_handlerContext.class);
		}
		public Exception_handlerContext exception_handler(int i) {
			return getRuleContext(Exception_handlerContext.class,i);
		}
		public Exception_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterException_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitException_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitException_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_clauseContext exception_clause() throws RecognitionException {
		Exception_clauseContext _localctx = new Exception_clauseContext(_ctx, getState());
		enterRule(_localctx, 314, RULE_exception_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2429);
			match(EXCEPTION);
			setState(2431); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2430);
				exception_handler();
				}
				}
				setState(2433); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_handlerContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		public List<Exception_nameContext> exception_name() {
			return getRuleContexts(Exception_nameContext.class);
		}
		public Exception_nameContext exception_name(int i) {
			return getRuleContext(Exception_nameContext.class,i);
		}
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public List<TerminalNode> OR() { return getTokens(HanaParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(HanaParser.OR, i);
		}
		public Exception_handlerContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_handler; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterException_handler(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitException_handler(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitException_handler(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_handlerContext exception_handler() throws RecognitionException {
		Exception_handlerContext _localctx = new Exception_handlerContext(_ctx, getState());
		enterRule(_localctx, 316, RULE_exception_handler);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2435);
			match(WHEN);
			setState(2436);
			exception_name();
			setState(2441);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==OR) {
				{
				{
				setState(2437);
				match(OR);
				setState(2438);
				exception_name();
				}
				}
				setState(2443);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2444);
			match(THEN);
			setState(2445);
			seq_of_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_blockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public Trigger_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTrigger_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTrigger_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTrigger_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_blockContext trigger_block() throws RecognitionException {
		Trigger_blockContext _localctx = new Trigger_blockContext(_ctx, getState());
		enterRule(_localctx, 318, RULE_trigger_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2455);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECLARE - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(2448);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DECLARE) {
					{
					setState(2447);
					match(DECLARE);
					}
				}

				setState(2451); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(2450);
					declare_spec();
					}
					}
					setState(2453); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0) );
				}
			}

			setState(2457);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BlockContext extends ParserRuleContext {
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		public List<Declare_specContext> declare_spec() {
			return getRuleContexts(Declare_specContext.class);
		}
		public Declare_specContext declare_spec(int i) {
			return getRuleContext(Declare_specContext.class,i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBlock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBlock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBlock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BlockContext block() throws RecognitionException {
		BlockContext _localctx = new BlockContext(_ctx, getState());
		enterRule(_localctx, 320, RULE_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2460);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DECLARE) {
				{
				setState(2459);
				match(DECLARE);
				}
			}

			setState(2463); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(2462);
				declare_spec();
				}
				}
				setState(2465); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CREATE - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0) );
			setState(2467);
			body();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_statementContext extends ParserRuleContext {
		public Execute_immediateContext execute_immediate() {
			return getRuleContext(Execute_immediateContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Cursor_manipulation_statementsContext cursor_manipulation_statements() {
			return getRuleContext(Cursor_manipulation_statementsContext.class,0);
		}
		public Transaction_control_statementsContext transaction_control_statements() {
			return getRuleContext(Transaction_control_statementsContext.class,0);
		}
		public Sql_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSql_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSql_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSql_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_statementContext sql_statement() throws RecognitionException {
		Sql_statementContext _localctx = new Sql_statementContext(_ctx, getState());
		enterRule(_localctx, 322, RULE_sql_statement);
		try {
			setState(2473);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXECUTE:
				enterOuterAlt(_localctx, 1);
				{
				setState(2469);
				execute_immediate();
				}
				break;
			case DECLARE:
			case DELETE:
			case EXPLAIN:
			case INSERT:
			case LOCK:
			case MERGE:
			case SELECT:
			case UPDATE:
			case WITH:
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2470);
				data_manipulation_language_statements();
				}
				break;
			case CLOSE:
			case FETCH:
			case OPEN:
				enterOuterAlt(_localctx, 3);
				{
				setState(2471);
				cursor_manipulation_statements();
				}
				break;
			case COMMIT:
			case ROLLBACK:
			case SAVEPOINT:
			case SET:
				enterOuterAlt(_localctx, 4);
				{
				setState(2472);
				transaction_control_statements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Execute_immediateContext extends ParserRuleContext {
		public TerminalNode EXECUTE() { return getToken(HanaParser.EXECUTE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(HanaParser.IMMEDIATE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Dynamic_returning_clauseContext dynamic_returning_clause() {
			return getRuleContext(Dynamic_returning_clauseContext.class,0);
		}
		public Execute_immediateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_execute_immediate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExecute_immediate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExecute_immediate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExecute_immediate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Execute_immediateContext execute_immediate() throws RecognitionException {
		Execute_immediateContext _localctx = new Execute_immediateContext(_ctx, getState());
		enterRule(_localctx, 324, RULE_execute_immediate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2475);
			match(EXECUTE);
			setState(2476);
			match(IMMEDIATE);
			setState(2477);
			expression();
			setState(2487);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BULK:
			case INTO:
				{
				setState(2478);
				into_clause();
				setState(2480);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(2479);
					using_clause();
					}
				}

				}
				break;
			case USING:
				{
				setState(2482);
				using_clause();
				setState(2484);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(2483);
					dynamic_returning_clause();
					}
				}

				}
				break;
			case RETURN:
			case RETURNING:
				{
				setState(2486);
				dynamic_returning_clause();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dynamic_returning_clauseContext extends ParserRuleContext {
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(HanaParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		public Dynamic_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dynamic_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDynamic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDynamic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDynamic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dynamic_returning_clauseContext dynamic_returning_clause() throws RecognitionException {
		Dynamic_returning_clauseContext _localctx = new Dynamic_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 326, RULE_dynamic_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2489);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2490);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Data_manipulation_language_statementsContext extends ParserRuleContext {
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public Lock_table_statementContext lock_table_statement() {
			return getRuleContext(Lock_table_statementContext.class,0);
		}
		public Declare_statementContext declare_statement() {
			return getRuleContext(Declare_statementContext.class,0);
		}
		public Exception_statementContext exception_statement() {
			return getRuleContext(Exception_statementContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Explain_statementContext explain_statement() {
			return getRuleContext(Explain_statementContext.class,0);
		}
		public Data_manipulation_language_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_data_manipulation_language_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterData_manipulation_language_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitData_manipulation_language_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitData_manipulation_language_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Data_manipulation_language_statementsContext data_manipulation_language_statements() throws RecognitionException {
		Data_manipulation_language_statementsContext _localctx = new Data_manipulation_language_statementsContext(_ctx, getState());
		enterRule(_localctx, 328, RULE_data_manipulation_language_statements);
		try {
			setState(2501);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,235,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2492);
				merge_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2493);
				lock_table_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2494);
				declare_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2495);
				exception_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2496);
				select_statement();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(2497);
				update_statement();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(2498);
				delete_statement();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(2499);
				insert_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(2500);
				explain_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_manipulation_statementsContext extends ParserRuleContext {
		public Close_statementContext close_statement() {
			return getRuleContext(Close_statementContext.class,0);
		}
		public Open_statementContext open_statement() {
			return getRuleContext(Open_statementContext.class,0);
		}
		public Fetch_statementContext fetch_statement() {
			return getRuleContext(Fetch_statementContext.class,0);
		}
		public Open_for_statementContext open_for_statement() {
			return getRuleContext(Open_for_statementContext.class,0);
		}
		public Cursor_manipulation_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_manipulation_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCursor_manipulation_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCursor_manipulation_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCursor_manipulation_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_manipulation_statementsContext cursor_manipulation_statements() throws RecognitionException {
		Cursor_manipulation_statementsContext _localctx = new Cursor_manipulation_statementsContext(_ctx, getState());
		enterRule(_localctx, 330, RULE_cursor_manipulation_statements);
		try {
			setState(2507);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,236,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2503);
				close_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2504);
				open_statement();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2505);
				fetch_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2506);
				open_for_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Close_statementContext extends ParserRuleContext {
		public TerminalNode CLOSE() { return getToken(HanaParser.CLOSE, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Close_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_close_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterClose_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitClose_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitClose_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Close_statementContext close_statement() throws RecognitionException {
		Close_statementContext _localctx = new Close_statementContext(_ctx, getState());
		enterRule(_localctx, 332, RULE_close_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2509);
			match(CLOSE);
			setState(2510);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(HanaParser.OPEN, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Open_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOpen_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOpen_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOpen_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_statementContext open_statement() throws RecognitionException {
		Open_statementContext _localctx = new Open_statementContext(_ctx, getState());
		enterRule(_localctx, 334, RULE_open_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2512);
			match(OPEN);
			setState(2513);
			cursor_name();
			setState(2515);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2514);
				expression_list();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Fetch_statementContext extends ParserRuleContext {
		public Token it1;
		public TerminalNode FETCH() { return getToken(HanaParser.FETCH, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public TerminalNode BULK() { return getToken(HanaParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(HanaParser.COLLECT, 0); }
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Fetch_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_fetch_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFetch_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFetch_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFetch_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Fetch_statementContext fetch_statement() throws RecognitionException {
		Fetch_statementContext _localctx = new Fetch_statementContext(_ctx, getState());
		enterRule(_localctx, 336, RULE_fetch_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2517);
			match(FETCH);
			setState(2518);
			cursor_name();
			setState(2539);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(2519);
				((Fetch_statementContext)_localctx).it1 = match(INTO);
				setState(2520);
				variable_name();
				setState(2525);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2521);
					match(COMMA);
					setState(2522);
					variable_name();
					}
					}
					setState(2527);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				{
				setState(2528);
				match(BULK);
				setState(2529);
				match(COLLECT);
				setState(2530);
				match(INTO);
				setState(2531);
				variable_name();
				setState(2536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2532);
					match(COMMA);
					setState(2533);
					variable_name();
					}
					}
					setState(2538);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Open_for_statementContext extends ParserRuleContext {
		public TerminalNode OPEN() { return getToken(HanaParser.OPEN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public Open_for_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_open_for_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOpen_for_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOpen_for_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOpen_for_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Open_for_statementContext open_for_statement() throws RecognitionException {
		Open_for_statementContext _localctx = new Open_for_statementContext(_ctx, getState());
		enterRule(_localctx, 338, RULE_open_for_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2541);
			match(OPEN);
			setState(2542);
			variable_name();
			setState(2543);
			match(FOR);
			setState(2546);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,241,_ctx) ) {
			case 1:
				{
				setState(2544);
				select_statement();
				}
				break;
			case 2:
				{
				setState(2545);
				expression();
				}
				break;
			}
			setState(2549);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==USING) {
				{
				setState(2548);
				using_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Transaction_control_statementsContext extends ParserRuleContext {
		public Set_transaction_commandContext set_transaction_command() {
			return getRuleContext(Set_transaction_commandContext.class,0);
		}
		public Set_constraint_commandContext set_constraint_command() {
			return getRuleContext(Set_constraint_commandContext.class,0);
		}
		public Commit_statementContext commit_statement() {
			return getRuleContext(Commit_statementContext.class,0);
		}
		public Rollback_statementContext rollback_statement() {
			return getRuleContext(Rollback_statementContext.class,0);
		}
		public Savepoint_statementContext savepoint_statement() {
			return getRuleContext(Savepoint_statementContext.class,0);
		}
		public Transaction_control_statementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_transaction_control_statements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTransaction_control_statements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTransaction_control_statements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTransaction_control_statements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Transaction_control_statementsContext transaction_control_statements() throws RecognitionException {
		Transaction_control_statementsContext _localctx = new Transaction_control_statementsContext(_ctx, getState());
		enterRule(_localctx, 340, RULE_transaction_control_statements);
		try {
			setState(2556);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,243,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2551);
				set_transaction_command();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2552);
				set_constraint_command();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2553);
				commit_statement();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(2554);
				rollback_statement();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(2555);
				savepoint_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_transaction_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		public TerminalNode TRANSACTION() { return getToken(HanaParser.TRANSACTION, 0); }
		public TerminalNode READ() { return getToken(HanaParser.READ, 0); }
		public TerminalNode ISOLATION() { return getToken(HanaParser.ISOLATION, 0); }
		public TerminalNode LEVEL() { return getToken(HanaParser.LEVEL, 0); }
		public TerminalNode USE() { return getToken(HanaParser.USE, 0); }
		public TerminalNode ROLLBACK() { return getToken(HanaParser.ROLLBACK, 0); }
		public TerminalNode SEGMENT() { return getToken(HanaParser.SEGMENT, 0); }
		public Rollback_segment_nameContext rollback_segment_name() {
			return getRuleContext(Rollback_segment_nameContext.class,0);
		}
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(HanaParser.ONLY, 0); }
		public TerminalNode WRITE() { return getToken(HanaParser.WRITE, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(HanaParser.SERIALIZABLE, 0); }
		public TerminalNode COMMITTED() { return getToken(HanaParser.COMMITTED, 0); }
		public Set_transaction_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_transaction_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSet_transaction_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSet_transaction_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSet_transaction_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_transaction_commandContext set_transaction_command() throws RecognitionException {
		Set_transaction_commandContext _localctx = new Set_transaction_commandContext(_ctx, getState());
		enterRule(_localctx, 342, RULE_set_transaction_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2558);
			match(SET);
			setState(2559);
			match(TRANSACTION);
			setState(2573);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(2560);
				match(READ);
				setState(2561);
				_la = _input.LA(1);
				if ( !(_la==ONLY || _la==WRITE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case ISOLATION:
				{
				setState(2562);
				match(ISOLATION);
				setState(2563);
				match(LEVEL);
				setState(2567);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case SERIALIZABLE:
					{
					setState(2564);
					match(SERIALIZABLE);
					}
					break;
				case READ:
					{
					setState(2565);
					match(READ);
					setState(2566);
					match(COMMITTED);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case USE:
				{
				setState(2569);
				match(USE);
				setState(2570);
				match(ROLLBACK);
				setState(2571);
				match(SEGMENT);
				setState(2572);
				rollback_segment_name();
				}
				break;
			case EOF:
			case NAME:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(2577);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NAME) {
				{
				setState(2575);
				match(NAME);
				setState(2576);
				quoted_string();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_constraint_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		public TerminalNode CONSTRAINT() { return getToken(HanaParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(HanaParser.CONSTRAINTS, 0); }
		public TerminalNode IMMEDIATE() { return getToken(HanaParser.IMMEDIATE, 0); }
		public TerminalNode DEFERRED() { return getToken(HanaParser.DEFERRED, 0); }
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public List<Constraint_nameContext> constraint_name() {
			return getRuleContexts(Constraint_nameContext.class);
		}
		public Constraint_nameContext constraint_name(int i) {
			return getRuleContext(Constraint_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Set_constraint_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_constraint_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSet_constraint_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSet_constraint_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSet_constraint_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_constraint_commandContext set_constraint_command() throws RecognitionException {
		Set_constraint_commandContext _localctx = new Set_constraint_commandContext(_ctx, getState());
		enterRule(_localctx, 344, RULE_set_constraint_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2579);
			match(SET);
			setState(2580);
			_la = _input.LA(1);
			if ( !(_la==CONSTRAINT || _la==CONSTRAINTS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2590);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ALL:
				{
				setState(2581);
				match(ALL);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2582);
				constraint_name();
				setState(2587);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2583);
					match(COMMA);
					setState(2584);
					constraint_name();
					}
					}
					setState(2589);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2592);
			_la = _input.LA(1);
			if ( !(_la==DEFERRED || _la==IMMEDIATE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Commit_statementContext extends ParserRuleContext {
		public TerminalNode COMMIT() { return getToken(HanaParser.COMMIT, 0); }
		public TerminalNode WORK() { return getToken(HanaParser.WORK, 0); }
		public TerminalNode COMMENT() { return getToken(HanaParser.COMMENT, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode FORCE() { return getToken(HanaParser.FORCE, 0); }
		public Write_clauseContext write_clause() {
			return getRuleContext(Write_clauseContext.class,0);
		}
		public TerminalNode CORRUPT_XID() { return getToken(HanaParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(HanaParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		public Commit_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_commit_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCommit_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCommit_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCommit_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Commit_statementContext commit_statement() throws RecognitionException {
		Commit_statementContext _localctx = new Commit_statementContext(_ctx, getState());
		enterRule(_localctx, 346, RULE_commit_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2594);
			match(COMMIT);
			setState(2596);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2595);
				match(WORK);
				}
			}

			setState(2611);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case COMMENT:
				{
				setState(2598);
				match(COMMENT);
				setState(2599);
				expression();
				}
				break;
			case FORCE:
				{
				setState(2600);
				match(FORCE);
				setState(2609);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,251,_ctx) ) {
				case 1:
					{
					setState(2601);
					match(CORRUPT_XID);
					setState(2602);
					expression();
					}
					break;
				case 2:
					{
					setState(2603);
					match(CORRUPT_XID_ALL);
					}
					break;
				case 3:
					{
					setState(2604);
					expression();
					setState(2607);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(2605);
						match(COMMA);
						setState(2606);
						expression();
						}
					}

					}
					break;
				}
				}
				break;
			case EOF:
			case SAVE:
			case WRITE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			setState(2614);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WRITE) {
				{
				setState(2613);
				write_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Write_clauseContext extends ParserRuleContext {
		public TerminalNode WRITE() { return getToken(HanaParser.WRITE, 0); }
		public TerminalNode WAIT() { return getToken(HanaParser.WAIT, 0); }
		public TerminalNode NOWAIT() { return getToken(HanaParser.NOWAIT, 0); }
		public TerminalNode IMMEDIATE() { return getToken(HanaParser.IMMEDIATE, 0); }
		public TerminalNode BATCH() { return getToken(HanaParser.BATCH, 0); }
		public Write_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_write_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWrite_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWrite_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWrite_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Write_clauseContext write_clause() throws RecognitionException {
		Write_clauseContext _localctx = new Write_clauseContext(_ctx, getState());
		enterRule(_localctx, 348, RULE_write_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2616);
			match(WRITE);
			setState(2618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(2617);
				_la = _input.LA(1);
				if ( !(_la==NOWAIT || _la==WAIT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2621);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BATCH || _la==IMMEDIATE) {
				{
				setState(2620);
				_la = _input.LA(1);
				if ( !(_la==BATCH || _la==IMMEDIATE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_statementContext extends ParserRuleContext {
		public TerminalNode ROLLBACK() { return getToken(HanaParser.ROLLBACK, 0); }
		public TerminalNode WORK() { return getToken(HanaParser.WORK, 0); }
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public TerminalNode FORCE() { return getToken(HanaParser.FORCE, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode SAVEPOINT() { return getToken(HanaParser.SAVEPOINT, 0); }
		public Rollback_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRollback_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRollback_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRollback_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_statementContext rollback_statement() throws RecognitionException {
		Rollback_statementContext _localctx = new Rollback_statementContext(_ctx, getState());
		enterRule(_localctx, 350, RULE_rollback_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2623);
			match(ROLLBACK);
			setState(2625);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WORK) {
				{
				setState(2624);
				match(WORK);
				}
			}

			setState(2634);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TO:
				{
				setState(2627);
				match(TO);
				setState(2629);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,257,_ctx) ) {
				case 1:
					{
					setState(2628);
					match(SAVEPOINT);
					}
					break;
				}
				setState(2631);
				savepoint_name();
				}
				break;
			case FORCE:
				{
				setState(2632);
				match(FORCE);
				setState(2633);
				quoted_string();
				}
				break;
			case EOF:
			case SAVE:
			case SEMICOLON:
				break;
			default:
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_statementContext extends ParserRuleContext {
		public TerminalNode SAVEPOINT() { return getToken(HanaParser.SAVEPOINT, 0); }
		public Savepoint_nameContext savepoint_name() {
			return getRuleContext(Savepoint_nameContext.class,0);
		}
		public Savepoint_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSavepoint_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSavepoint_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSavepoint_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_statementContext savepoint_statement() throws RecognitionException {
		Savepoint_statementContext _localctx = new Savepoint_statementContext(_ctx, getState());
		enterRule(_localctx, 352, RULE_savepoint_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2636);
			match(SAVEPOINT);
			setState(2637);
			savepoint_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Explain_statementContext extends ParserRuleContext {
		public TerminalNode EXPLAIN() { return getToken(HanaParser.EXPLAIN, 0); }
		public TerminalNode PLAN() { return getToken(HanaParser.PLAN, 0); }
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Update_statementContext update_statement() {
			return getRuleContext(Update_statementContext.class,0);
		}
		public Delete_statementContext delete_statement() {
			return getRuleContext(Delete_statementContext.class,0);
		}
		public Insert_statementContext insert_statement() {
			return getRuleContext(Insert_statementContext.class,0);
		}
		public Merge_statementContext merge_statement() {
			return getRuleContext(Merge_statementContext.class,0);
		}
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(HanaParser.STATEMENT_ID, 0); }
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Explain_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_explain_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExplain_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExplain_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExplain_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Explain_statementContext explain_statement() throws RecognitionException {
		Explain_statementContext _localctx = new Explain_statementContext(_ctx, getState());
		enterRule(_localctx, 354, RULE_explain_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2639);
			match(EXPLAIN);
			setState(2640);
			match(PLAN);
			setState(2645);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SET) {
				{
				setState(2641);
				match(SET);
				setState(2642);
				match(STATEMENT_ID);
				setState(2643);
				match(EQUALS_OP);
				setState(2644);
				quoted_string();
				}
			}

			setState(2649);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTO) {
				{
				setState(2647);
				match(INTO);
				setState(2648);
				tableview_name();
				}
			}

			setState(2651);
			match(FOR);
			setState(2657);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(2652);
				select_statement();
				}
				break;
			case UPDATE:
				{
				setState(2653);
				update_statement();
				}
				break;
			case DELETE:
				{
				setState(2654);
				delete_statement();
				}
				break;
			case INSERT:
				{
				setState(2655);
				insert_statement();
				}
				break;
			case MERGE:
				{
				setState(2656);
				merge_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_statementContext extends ParserRuleContext {
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public Subquery_factoring_clauseContext subquery_factoring_clause() {
			return getRuleContext(Subquery_factoring_clauseContext.class,0);
		}
		public List<For_update_clauseContext> for_update_clause() {
			return getRuleContexts(For_update_clauseContext.class);
		}
		public For_update_clauseContext for_update_clause(int i) {
			return getRuleContext(For_update_clauseContext.class,i);
		}
		public List<Order_by_clauseContext> order_by_clause() {
			return getRuleContexts(Order_by_clauseContext.class);
		}
		public Order_by_clauseContext order_by_clause(int i) {
			return getRuleContext(Order_by_clauseContext.class,i);
		}
		public Select_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSelect_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSelect_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSelect_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_statementContext select_statement() throws RecognitionException {
		Select_statementContext _localctx = new Select_statementContext(_ctx, getState());
		enterRule(_localctx, 356, RULE_select_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2660);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WITH) {
				{
				setState(2659);
				subquery_factoring_clause();
				}
			}

			setState(2662);
			subquery();
			setState(2667);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==FOR || _la==ORDER) {
				{
				setState(2665);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case FOR:
					{
					setState(2663);
					for_update_clause();
					}
					break;
				case ORDER:
					{
					setState(2664);
					order_by_clause();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				setState(2669);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_factoring_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		public List<Factoring_elementContext> factoring_element() {
			return getRuleContexts(Factoring_elementContext.class);
		}
		public Factoring_elementContext factoring_element(int i) {
			return getRuleContext(Factoring_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Subquery_factoring_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_factoring_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubquery_factoring_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubquery_factoring_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubquery_factoring_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_factoring_clauseContext subquery_factoring_clause() throws RecognitionException {
		Subquery_factoring_clauseContext _localctx = new Subquery_factoring_clauseContext(_ctx, getState());
		enterRule(_localctx, 358, RULE_subquery_factoring_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2670);
			match(WITH);
			setState(2671);
			factoring_element();
			setState(2676);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2672);
				match(COMMA);
				setState(2673);
				factoring_element();
				}
				}
				setState(2678);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Factoring_elementContext extends ParserRuleContext {
		public Query_nameContext query_name() {
			return getRuleContext(Query_nameContext.class,0);
		}
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Search_clauseContext search_clause() {
			return getRuleContext(Search_clauseContext.class,0);
		}
		public Cycle_clauseContext cycle_clause() {
			return getRuleContext(Cycle_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Factoring_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_factoring_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFactoring_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFactoring_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFactoring_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Factoring_elementContext factoring_element() throws RecognitionException {
		Factoring_elementContext _localctx = new Factoring_elementContext(_ctx, getState());
		enterRule(_localctx, 360, RULE_factoring_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2679);
			query_name();
			setState(2691);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(2680);
				match(LEFT_PAREN);
				setState(2681);
				column_name();
				setState(2686);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2682);
					match(COMMA);
					setState(2683);
					column_name();
					}
					}
					setState(2688);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(2689);
				match(RIGHT_PAREN);
				}
			}

			setState(2693);
			match(AS);
			setState(2694);
			match(LEFT_PAREN);
			setState(2695);
			subquery();
			setState(2697);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(2696);
				order_by_clause();
				}
			}

			setState(2699);
			match(RIGHT_PAREN);
			setState(2701);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEARCH) {
				{
				setState(2700);
				search_clause();
				}
			}

			setState(2704);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CYCLE) {
				{
				setState(2703);
				cycle_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_clauseContext extends ParserRuleContext {
		public TerminalNode SEARCH() { return getToken(HanaParser.SEARCH, 0); }
		public List<TerminalNode> FIRST() { return getTokens(HanaParser.FIRST); }
		public TerminalNode FIRST(int i) {
			return getToken(HanaParser.FIRST, i);
		}
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		public TerminalNode DEPTH() { return getToken(HanaParser.DEPTH, 0); }
		public TerminalNode BREADTH() { return getToken(HanaParser.BREADTH, 0); }
		public List<TerminalNode> ASC() { return getTokens(HanaParser.ASC); }
		public TerminalNode ASC(int i) {
			return getToken(HanaParser.ASC, i);
		}
		public List<TerminalNode> DESC() { return getTokens(HanaParser.DESC); }
		public TerminalNode DESC(int i) {
			return getToken(HanaParser.DESC, i);
		}
		public List<TerminalNode> NULLS() { return getTokens(HanaParser.NULLS); }
		public TerminalNode NULLS(int i) {
			return getToken(HanaParser.NULLS, i);
		}
		public List<TerminalNode> LAST() { return getTokens(HanaParser.LAST); }
		public TerminalNode LAST(int i) {
			return getToken(HanaParser.LAST, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Search_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSearch_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSearch_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSearch_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_clauseContext search_clause() throws RecognitionException {
		Search_clauseContext _localctx = new Search_clauseContext(_ctx, getState());
		enterRule(_localctx, 362, RULE_search_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2706);
			match(SEARCH);
			setState(2707);
			_la = _input.LA(1);
			if ( !(_la==BREADTH || _la==DEPTH) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2708);
			match(FIRST);
			setState(2709);
			match(BY);
			setState(2710);
			column_name();
			setState(2712);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC) {
				{
				setState(2711);
				match(ASC);
				}
			}

			setState(2715);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DESC) {
				{
				setState(2714);
				match(DESC);
				}
			}

			setState(2719);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,273,_ctx) ) {
			case 1:
				{
				setState(2717);
				match(NULLS);
				setState(2718);
				match(FIRST);
				}
				break;
			}
			setState(2723);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(2721);
				match(NULLS);
				setState(2722);
				match(LAST);
				}
			}

			setState(2743);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2725);
				match(COMMA);
				setState(2726);
				column_name();
				setState(2728);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ASC) {
					{
					setState(2727);
					match(ASC);
					}
				}

				setState(2731);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DESC) {
					{
					setState(2730);
					match(DESC);
					}
				}

				setState(2735);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,277,_ctx) ) {
				case 1:
					{
					setState(2733);
					match(NULLS);
					setState(2734);
					match(FIRST);
					}
					break;
				}
				setState(2739);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULLS) {
					{
					setState(2737);
					match(NULLS);
					setState(2738);
					match(LAST);
					}
				}

				}
				}
				setState(2745);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2746);
			match(SET);
			setState(2747);
			column_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cycle_clauseContext extends ParserRuleContext {
		public TerminalNode CYCLE() { return getToken(HanaParser.CYCLE, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Cycle_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cycle_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCycle_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCycle_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCycle_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cycle_clauseContext cycle_clause() throws RecognitionException {
		Cycle_clauseContext _localctx = new Cycle_clauseContext(_ctx, getState());
		enterRule(_localctx, 364, RULE_cycle_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2749);
			match(CYCLE);
			setState(2750);
			column_name();
			setState(2755);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2751);
				match(COMMA);
				setState(2752);
				column_name();
				}
				}
				setState(2757);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2758);
			match(SET);
			setState(2759);
			column_name();
			setState(2760);
			match(TO);
			setState(2761);
			expression();
			setState(2762);
			match(DEFAULT);
			setState(2763);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class SubqueryContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public SubqueryContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubquery(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubquery(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubquery(this);
			else return visitor.visitChildren(this);
		}
	}

	public final SubqueryContext subquery() throws RecognitionException {
		SubqueryContext _localctx = new SubqueryContext(_ctx, getState());
		enterRule(_localctx, 366, RULE_subquery);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2765);
			subquery_basic_elements();
			setState(2769);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,281,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2766);
					subquery_operation_part();
					}
					} 
				}
				setState(2771);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,281,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_operation_partContext extends ParserRuleContext {
		public Subquery_basic_elementsContext subquery_basic_elements() {
			return getRuleContext(Subquery_basic_elementsContext.class,0);
		}
		public TerminalNode UNION() { return getToken(HanaParser.UNION, 0); }
		public TerminalNode INTERSECT() { return getToken(HanaParser.INTERSECT, 0); }
		public TerminalNode MINUS() { return getToken(HanaParser.MINUS, 0); }
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public Subquery_operation_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_operation_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubquery_operation_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubquery_operation_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubquery_operation_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_operation_partContext subquery_operation_part() throws RecognitionException {
		Subquery_operation_partContext _localctx = new Subquery_operation_partContext(_ctx, getState());
		enterRule(_localctx, 368, RULE_subquery_operation_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2778);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UNION:
				{
				setState(2772);
				match(UNION);
				setState(2774);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(2773);
					match(ALL);
					}
				}

				}
				break;
			case INTERSECT:
				{
				setState(2776);
				match(INTERSECT);
				}
				break;
			case MINUS:
				{
				setState(2777);
				match(MINUS);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2780);
			subquery_basic_elements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_basic_elementsContext extends ParserRuleContext {
		public Query_blockContext query_block() {
			return getRuleContext(Query_blockContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Subquery_basic_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_basic_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubquery_basic_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubquery_basic_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubquery_basic_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_basic_elementsContext subquery_basic_elements() throws RecognitionException {
		Subquery_basic_elementsContext _localctx = new Subquery_basic_elementsContext(_ctx, getState());
		enterRule(_localctx, 370, RULE_subquery_basic_elements);
		try {
			setState(2787);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SELECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(2782);
				query_block();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(2783);
				match(LEFT_PAREN);
				setState(2784);
				subquery();
				setState(2785);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_blockContext extends ParserRuleContext {
		public TerminalNode SELECT() { return getToken(HanaParser.SELECT, 0); }
		public From_clauseContext from_clause() {
			return getRuleContext(From_clauseContext.class,0);
		}
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		public List<Selected_elementContext> selected_element() {
			return getRuleContexts(Selected_elementContext.class);
		}
		public Selected_elementContext selected_element(int i) {
			return getRuleContext(Selected_elementContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Hierarchical_query_clauseContext hierarchical_query_clause() {
			return getRuleContext(Hierarchical_query_clauseContext.class,0);
		}
		public Group_by_clauseContext group_by_clause() {
			return getRuleContext(Group_by_clauseContext.class,0);
		}
		public Model_clauseContext model_clause() {
			return getRuleContext(Model_clauseContext.class,0);
		}
		public TerminalNode DISTINCT() { return getToken(HanaParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(HanaParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Query_blockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_block; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterQuery_block(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitQuery_block(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitQuery_block(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_blockContext query_block() throws RecognitionException {
		Query_blockContext _localctx = new Query_blockContext(_ctx, getState());
		enterRule(_localctx, 372, RULE_query_block);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2789);
			match(SELECT);
			setState(2791);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,285,_ctx) ) {
			case 1:
				{
				setState(2790);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(2802);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(2793);
				match(ASTERISK);
				}
				break;
			case T__6:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case STRING_AGG:
			case CORR_SPEARMAN:
			case VAR:
			case STDDEV_POP:
			case VAR_POP:
			case STDDEV_SAMP:
			case VAR_SAMP:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(2794);
				selected_element();
				setState(2799);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(2795);
					match(COMMA);
					setState(2796);
					selected_element();
					}
					}
					setState(2801);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(2805);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BULK || _la==INTO) {
				{
				setState(2804);
				into_clause();
				}
			}

			setState(2807);
			from_clause();
			setState(2809);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,289,_ctx) ) {
			case 1:
				{
				setState(2808);
				where_clause();
				}
				break;
			}
			setState(2812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,290,_ctx) ) {
			case 1:
				{
				setState(2811);
				hierarchical_query_clause();
				}
				break;
			}
			setState(2815);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,291,_ctx) ) {
			case 1:
				{
				setState(2814);
				group_by_clause();
				}
				break;
			}
			setState(2818);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,292,_ctx) ) {
			case 1:
				{
				setState(2817);
				model_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Selected_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSelected_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSelected_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSelected_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_elementContext selected_element() throws RecognitionException {
		Selected_elementContext _localctx = new Selected_elementContext(_ctx, getState());
		enterRule(_localctx, 374, RULE_selected_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2820);
			select_list_elements();
			setState(2822);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,293,_ctx) ) {
			case 1:
				{
				setState(2821);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class From_clauseContext extends ParserRuleContext {
		public TerminalNode FROM() { return getToken(HanaParser.FROM, 0); }
		public Table_ref_listContext table_ref_list() {
			return getRuleContext(Table_ref_listContext.class,0);
		}
		public From_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_from_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFrom_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFrom_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFrom_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final From_clauseContext from_clause() throws RecognitionException {
		From_clauseContext _localctx = new From_clauseContext(_ctx, getState());
		enterRule(_localctx, 376, RULE_from_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2824);
			match(FROM);
			setState(2825);
			table_ref_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Select_list_elementsContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_Context expression_() {
			return getRuleContext(Expression_Context.class,0);
		}
		public Select_list_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_select_list_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSelect_list_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSelect_list_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSelect_list_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Select_list_elementsContext select_list_elements() throws RecognitionException {
		Select_list_elementsContext _localctx = new Select_list_elementsContext(_ctx, getState());
		enterRule(_localctx, 378, RULE_select_list_elements);
		try {
			setState(2833);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,294,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(2827);
				tableview_name();
				setState(2828);
				match(PERIOD);
				setState(2829);
				match(ASTERISK);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(2831);
				expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(2832);
				expression_(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_listContext extends ParserRuleContext {
		public List<Table_refContext> table_ref() {
			return getRuleContexts(Table_refContext.class);
		}
		public Table_refContext table_ref(int i) {
			return getRuleContext(Table_refContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Table_ref_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_ref_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_ref_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_ref_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_listContext table_ref_list() throws RecognitionException {
		Table_ref_listContext _localctx = new Table_ref_listContext(_ctx, getState());
		enterRule(_localctx, 380, RULE_table_ref_list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2835);
			table_ref();
			setState(2840);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,295,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2836);
					match(COMMA);
					setState(2837);
					table_ref();
					}
					} 
				}
				setState(2842);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,295,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_refContext extends ParserRuleContext {
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Join_clauseContext> join_clause() {
			return getRuleContexts(Join_clauseContext.class);
		}
		public Join_clauseContext join_clause(int i) {
			return getRuleContext(Join_clauseContext.class,i);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public Table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_refContext table_ref() throws RecognitionException {
		Table_refContext _localctx = new Table_refContext(_ctx, getState());
		enterRule(_localctx, 382, RULE_table_ref);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2843);
			table_ref_aux();
			setState(2847);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,296,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(2844);
					join_clause();
					}
					} 
				}
				setState(2849);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,296,_ctx);
			}
			setState(2852);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,297,_ctx) ) {
			case 1:
				{
				setState(2850);
				pivot_clause();
				}
				break;
			case 2:
				{
				setState(2851);
				unpivot_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_ref_auxContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public Table_refContext table_ref() {
			return getRuleContext(Table_refContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode ONLY() { return getToken(HanaParser.ONLY, 0); }
		public List<Flashback_query_clauseContext> flashback_query_clause() {
			return getRuleContexts(Flashback_query_clauseContext.class);
		}
		public Flashback_query_clauseContext flashback_query_clause(int i) {
			return getRuleContext(Flashback_query_clauseContext.class,i);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Pivot_clauseContext pivot_clause() {
			return getRuleContext(Pivot_clauseContext.class,0);
		}
		public Unpivot_clauseContext unpivot_clause() {
			return getRuleContext(Unpivot_clauseContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public TerminalNode BINDVAR() { return getToken(HanaParser.BINDVAR, 0); }
		public Table_ref_auxContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_ref_aux; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_ref_aux(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_ref_aux(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_ref_aux(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_ref_auxContext table_ref_aux() throws RecognitionException {
		Table_ref_auxContext _localctx = new Table_ref_auxContext(_ctx, getState());
		enterRule(_localctx, 384, RULE_table_ref_aux);
		int _la;
		try {
			int _alt;
			setState(2903);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TABLE:
			case THE:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(2882);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,302,_ctx) ) {
				case 1:
					{
					setState(2854);
					dml_table_expression_clause();
					setState(2857);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,298,_ctx) ) {
					case 1:
						{
						setState(2855);
						pivot_clause();
						}
						break;
					case 2:
						{
						setState(2856);
						unpivot_clause();
						}
						break;
					}
					}
					break;
				case 2:
					{
					setState(2859);
					match(LEFT_PAREN);
					setState(2860);
					table_ref();
					setState(2864);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==INTERSECT || _la==MINUS || _la==UNION) {
						{
						{
						setState(2861);
						subquery_operation_part();
						}
						}
						setState(2866);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(2867);
					match(RIGHT_PAREN);
					setState(2870);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,300,_ctx) ) {
					case 1:
						{
						setState(2868);
						pivot_clause();
						}
						break;
					case 2:
						{
						setState(2869);
						unpivot_clause();
						}
						break;
					}
					}
					break;
				case 3:
					{
					setState(2872);
					match(ONLY);
					setState(2873);
					match(LEFT_PAREN);
					setState(2874);
					dml_table_expression_clause();
					setState(2875);
					match(RIGHT_PAREN);
					}
					break;
				case 4:
					{
					setState(2877);
					dml_table_expression_clause();
					setState(2880);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,301,_ctx) ) {
					case 1:
						{
						setState(2878);
						pivot_clause();
						}
						break;
					case 2:
						{
						setState(2879);
						unpivot_clause();
						}
						break;
					}
					}
					break;
				}
				setState(2887);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2884);
						flashback_query_clause();
						}
						} 
					}
					setState(2889);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,303,_ctx);
				}
				setState(2894);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,305,_ctx) ) {
				case 1:
					{
					setState(2891);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2890);
						match(AS);
						}
					}

					setState(2893);
					table_alias();
					}
					break;
				}
				}
				break;
			case BINDVAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(2896);
				match(BINDVAR);
				setState(2901);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,307,_ctx) ) {
				case 1:
					{
					setState(2898);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==AS) {
						{
						setState(2897);
						match(AS);
						}
					}

					setState(2900);
					table_alias();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_clauseContext extends ParserRuleContext {
		public TerminalNode JOIN() { return getToken(HanaParser.JOIN, 0); }
		public Table_ref_auxContext table_ref_aux() {
			return getRuleContext(Table_ref_auxContext.class,0);
		}
		public List<Query_partition_clauseContext> query_partition_clause() {
			return getRuleContexts(Query_partition_clauseContext.class);
		}
		public Query_partition_clauseContext query_partition_clause(int i) {
			return getRuleContext(Query_partition_clauseContext.class,i);
		}
		public TerminalNode INNER() { return getToken(HanaParser.INNER, 0); }
		public Outer_join_typeContext outer_join_type() {
			return getRuleContext(Outer_join_typeContext.class,0);
		}
		public List<Join_on_partContext> join_on_part() {
			return getRuleContexts(Join_on_partContext.class);
		}
		public Join_on_partContext join_on_part(int i) {
			return getRuleContext(Join_on_partContext.class,i);
		}
		public List<Join_using_partContext> join_using_part() {
			return getRuleContexts(Join_using_partContext.class);
		}
		public Join_using_partContext join_using_part(int i) {
			return getRuleContext(Join_using_partContext.class,i);
		}
		public TerminalNode CROSS() { return getToken(HanaParser.CROSS, 0); }
		public TerminalNode NATURAL() { return getToken(HanaParser.NATURAL, 0); }
		public Join_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterJoin_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitJoin_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitJoin_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_clauseContext join_clause() throws RecognitionException {
		Join_clauseContext _localctx = new Join_clauseContext(_ctx, getState());
		enterRule(_localctx, 386, RULE_join_clause);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2906);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(2905);
				query_partition_clause();
				}
			}

			setState(2909);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==CROSS || _la==NATURAL) {
				{
				setState(2908);
				_la = _input.LA(1);
				if ( !(_la==CROSS || _la==NATURAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(2913);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INNER:
				{
				setState(2911);
				match(INNER);
				}
				break;
			case FULL:
			case LEFT:
			case RIGHT:
				{
				setState(2912);
				outer_join_type();
				}
				break;
			case JOIN:
				break;
			default:
				break;
			}
			setState(2915);
			match(JOIN);
			setState(2916);
			table_ref_aux();
			setState(2918);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,312,_ctx) ) {
			case 1:
				{
				setState(2917);
				query_partition_clause();
				}
				break;
			}
			setState(2924);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,314,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					setState(2922);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case ON:
						{
						setState(2920);
						join_on_part();
						}
						break;
					case USING:
						{
						setState(2921);
						join_using_part();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					} 
				}
				setState(2926);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,314,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_on_partContext extends ParserRuleContext {
		public TerminalNode ON() { return getToken(HanaParser.ON, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Join_on_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_on_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterJoin_on_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitJoin_on_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitJoin_on_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_on_partContext join_on_part() throws RecognitionException {
		Join_on_partContext _localctx = new Join_on_partContext(_ctx, getState());
		enterRule(_localctx, 388, RULE_join_on_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2927);
			match(ON);
			setState(2928);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Join_using_partContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(HanaParser.USING, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Join_using_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_join_using_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterJoin_using_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitJoin_using_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitJoin_using_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Join_using_partContext join_using_part() throws RecognitionException {
		Join_using_partContext _localctx = new Join_using_partContext(_ctx, getState());
		enterRule(_localctx, 390, RULE_join_using_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2930);
			match(USING);
			setState(2931);
			match(LEFT_PAREN);
			setState(2932);
			column_name();
			setState(2937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2933);
				match(COMMA);
				setState(2934);
				column_name();
				}
				}
				setState(2939);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2940);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_typeContext extends ParserRuleContext {
		public TerminalNode FULL() { return getToken(HanaParser.FULL, 0); }
		public TerminalNode LEFT() { return getToken(HanaParser.LEFT, 0); }
		public TerminalNode RIGHT() { return getToken(HanaParser.RIGHT, 0); }
		public TerminalNode OUTER() { return getToken(HanaParser.OUTER, 0); }
		public Outer_join_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOuter_join_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOuter_join_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOuter_join_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_typeContext outer_join_type() throws RecognitionException {
		Outer_join_typeContext _localctx = new Outer_join_typeContext(_ctx, getState());
		enterRule(_localctx, 392, RULE_outer_join_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2942);
			_la = _input.LA(1);
			if ( !(_la==FULL || _la==LEFT || _la==RIGHT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(2944);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OUTER) {
				{
				setState(2943);
				match(OUTER);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_partition_clauseContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(HanaParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Query_partition_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_partition_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterQuery_partition_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitQuery_partition_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitQuery_partition_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_partition_clauseContext query_partition_clause() throws RecognitionException {
		Query_partition_clauseContext _localctx = new Query_partition_clauseContext(_ctx, getState());
		enterRule(_localctx, 394, RULE_query_partition_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(2946);
			match(PARTITION);
			setState(2947);
			match(BY);
			setState(2961);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,318,_ctx) ) {
			case 1:
				{
				setState(2948);
				match(LEFT_PAREN);
				setState(2949);
				subquery();
				setState(2950);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(2952);
				expression_list();
				}
				break;
			case 3:
				{
				setState(2953);
				expression();
				setState(2958);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(2954);
						match(COMMA);
						setState(2955);
						expression();
						}
						} 
					}
					setState(2960);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,317,_ctx);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Flashback_query_clauseContext extends ParserRuleContext {
		public TerminalNode VERSIONS() { return getToken(HanaParser.VERSIONS, 0); }
		public TerminalNode BETWEEN() { return getToken(HanaParser.BETWEEN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode SCN() { return getToken(HanaParser.SCN, 0); }
		public TerminalNode TIMESTAMP() { return getToken(HanaParser.TIMESTAMP, 0); }
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		public TerminalNode SNAPSHOT() { return getToken(HanaParser.SNAPSHOT, 0); }
		public Flashback_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_flashback_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFlashback_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFlashback_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFlashback_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Flashback_query_clauseContext flashback_query_clause() throws RecognitionException {
		Flashback_query_clauseContext _localctx = new Flashback_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 396, RULE_flashback_query_clause);
		int _la;
		try {
			setState(2971);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VERSIONS:
				enterOuterAlt(_localctx, 1);
				{
				setState(2963);
				match(VERSIONS);
				setState(2964);
				match(BETWEEN);
				setState(2965);
				_la = _input.LA(1);
				if ( !(_la==SCN || _la==TIMESTAMP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2966);
				expression();
				}
				break;
			case AS:
				enterOuterAlt(_localctx, 2);
				{
				setState(2967);
				match(AS);
				setState(2968);
				match(OF);
				setState(2969);
				_la = _input.LA(1);
				if ( !(((((_la - 340)) & ~0x3f) == 0 && ((1L << (_la - 340)) & ((1L << (SCN - 340)) | (1L << (SNAPSHOT - 340)) | (1L << (TIMESTAMP - 340)))) != 0)) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(2970);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_clauseContext extends ParserRuleContext {
		public TerminalNode PIVOT() { return getToken(HanaParser.PIVOT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Pivot_elementContext> pivot_element() {
			return getRuleContexts(Pivot_elementContext.class);
		}
		public Pivot_elementContext pivot_element(int i) {
			return getRuleContext(Pivot_elementContext.class,i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Pivot_in_clauseContext pivot_in_clause() {
			return getRuleContext(Pivot_in_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode XML() { return getToken(HanaParser.XML, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Pivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_clauseContext pivot_clause() throws RecognitionException {
		Pivot_clauseContext _localctx = new Pivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 398, RULE_pivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2973);
			match(PIVOT);
			setState(2975);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==XML) {
				{
				setState(2974);
				match(XML);
				}
			}

			setState(2977);
			match(LEFT_PAREN);
			setState(2978);
			pivot_element();
			setState(2983);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(2979);
				match(COMMA);
				setState(2980);
				pivot_element();
				}
				}
				setState(2985);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(2986);
			pivot_for_clause();
			setState(2987);
			pivot_in_clause();
			setState(2988);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_elementContext extends ParserRuleContext {
		public Aggregate_function_nameContext aggregate_function_name() {
			return getRuleContext(Aggregate_function_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPivot_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPivot_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPivot_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_elementContext pivot_element() throws RecognitionException {
		Pivot_elementContext _localctx = new Pivot_elementContext(_ctx, getState());
		enterRule(_localctx, 400, RULE_pivot_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2990);
			aggregate_function_name();
			setState(2991);
			match(LEFT_PAREN);
			setState(2992);
			expression();
			setState(2993);
			match(RIGHT_PAREN);
			setState(2995);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(2994);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_for_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Pivot_for_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_for_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPivot_for_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPivot_for_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPivot_for_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_for_clauseContext pivot_for_clause() throws RecognitionException {
		Pivot_for_clauseContext _localctx = new Pivot_for_clauseContext(_ctx, getState());
		enterRule(_localctx, 402, RULE_pivot_for_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(2997);
			match(FOR);
			setState(3010);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,324,_ctx) ) {
			case 1:
				{
				setState(2998);
				column_name();
				}
				break;
			case 2:
				{
				setState(2999);
				match(LEFT_PAREN);
				setState(3000);
				column_name();
				setState(3005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3001);
					match(COMMA);
					setState(3002);
					column_name();
					}
					}
					setState(3007);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3008);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> ANY() { return getTokens(HanaParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(HanaParser.ANY, i);
		}
		public List<Pivot_in_clause_elementContext> pivot_in_clause_element() {
			return getRuleContexts(Pivot_in_clause_elementContext.class);
		}
		public Pivot_in_clause_elementContext pivot_in_clause_element(int i) {
			return getRuleContext(Pivot_in_clause_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Pivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clauseContext pivot_in_clause() throws RecognitionException {
		Pivot_in_clauseContext _localctx = new Pivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 404, RULE_pivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3012);
			match(IN);
			setState(3013);
			match(LEFT_PAREN);
			setState(3031);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,327,_ctx) ) {
			case 1:
				{
				setState(3014);
				subquery();
				}
				break;
			case 2:
				{
				setState(3015);
				match(ANY);
				setState(3020);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3016);
					match(COMMA);
					setState(3017);
					match(ANY);
					}
					}
					setState(3022);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				{
				setState(3023);
				pivot_in_clause_element();
				setState(3028);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3024);
					match(COMMA);
					setState(3025);
					pivot_in_clause_element();
					}
					}
					setState(3030);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(3033);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementContext extends ParserRuleContext {
		public Pivot_in_clause_elementsContext pivot_in_clause_elements() {
			return getRuleContext(Pivot_in_clause_elementsContext.class,0);
		}
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Pivot_in_clause_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPivot_in_clause_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPivot_in_clause_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPivot_in_clause_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementContext pivot_in_clause_element() throws RecognitionException {
		Pivot_in_clause_elementContext _localctx = new Pivot_in_clause_elementContext(_ctx, getState());
		enterRule(_localctx, 406, RULE_pivot_in_clause_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3035);
			pivot_in_clause_elements();
			setState(3037);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(3036);
				column_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Pivot_in_clause_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Pivot_in_clause_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_pivot_in_clause_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPivot_in_clause_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPivot_in_clause_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPivot_in_clause_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Pivot_in_clause_elementsContext pivot_in_clause_elements() throws RecognitionException {
		Pivot_in_clause_elementsContext _localctx = new Pivot_in_clause_elementsContext(_ctx, getState());
		enterRule(_localctx, 408, RULE_pivot_in_clause_elements);
		try {
			setState(3041);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,329,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3039);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3040);
				expression_list();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_clauseContext extends ParserRuleContext {
		public TerminalNode UNPIVOT() { return getToken(HanaParser.UNPIVOT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		public Pivot_for_clauseContext pivot_for_clause() {
			return getRuleContext(Pivot_for_clauseContext.class,0);
		}
		public Unpivot_in_clauseContext unpivot_in_clause() {
			return getRuleContext(Unpivot_in_clauseContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode NULLS() { return getToken(HanaParser.NULLS, 0); }
		public TerminalNode INCLUDE() { return getToken(HanaParser.INCLUDE, 0); }
		public TerminalNode EXCLUDE() { return getToken(HanaParser.EXCLUDE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Unpivot_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUnpivot_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUnpivot_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUnpivot_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_clauseContext unpivot_clause() throws RecognitionException {
		Unpivot_clauseContext _localctx = new Unpivot_clauseContext(_ctx, getState());
		enterRule(_localctx, 410, RULE_unpivot_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3043);
			match(UNPIVOT);
			setState(3046);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==EXCLUDE || _la==INCLUDE) {
				{
				setState(3044);
				_la = _input.LA(1);
				if ( !(_la==EXCLUDE || _la==INCLUDE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3045);
				match(NULLS);
				}
			}

			setState(3048);
			match(LEFT_PAREN);
			setState(3061);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,332,_ctx) ) {
			case 1:
				{
				setState(3049);
				column_name();
				}
				break;
			case 2:
				{
				setState(3050);
				match(LEFT_PAREN);
				setState(3051);
				column_name();
				setState(3056);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3052);
					match(COMMA);
					setState(3053);
					column_name();
					}
					}
					setState(3058);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3059);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3063);
			pivot_for_clause();
			setState(3064);
			unpivot_in_clause();
			setState(3065);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_clauseContext extends ParserRuleContext {
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Unpivot_in_elementsContext> unpivot_in_elements() {
			return getRuleContexts(Unpivot_in_elementsContext.class);
		}
		public Unpivot_in_elementsContext unpivot_in_elements(int i) {
			return getRuleContext(Unpivot_in_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Unpivot_in_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUnpivot_in_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUnpivot_in_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUnpivot_in_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_clauseContext unpivot_in_clause() throws RecognitionException {
		Unpivot_in_clauseContext _localctx = new Unpivot_in_clauseContext(_ctx, getState());
		enterRule(_localctx, 412, RULE_unpivot_in_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3067);
			match(IN);
			setState(3068);
			match(LEFT_PAREN);
			setState(3069);
			unpivot_in_elements();
			setState(3074);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3070);
				match(COMMA);
				setState(3071);
				unpivot_in_elements();
				}
				}
				setState(3076);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3077);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unpivot_in_elementsContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public List<ConstantContext> constant() {
			return getRuleContexts(ConstantContext.class);
		}
		public ConstantContext constant(int i) {
			return getRuleContext(ConstantContext.class,i);
		}
		public Unpivot_in_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unpivot_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUnpivot_in_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUnpivot_in_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUnpivot_in_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unpivot_in_elementsContext unpivot_in_elements() throws RecognitionException {
		Unpivot_in_elementsContext _localctx = new Unpivot_in_elementsContext(_ctx, getState());
		enterRule(_localctx, 414, RULE_unpivot_in_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3091);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,335,_ctx) ) {
			case 1:
				{
				setState(3079);
				column_name();
				}
				break;
			case 2:
				{
				setState(3080);
				match(LEFT_PAREN);
				setState(3081);
				column_name();
				setState(3086);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3082);
					match(COMMA);
					setState(3083);
					column_name();
					}
					}
					setState(3088);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3089);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3108);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(3093);
				match(AS);
				setState(3106);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DATE:
				case DBTIMEZONE:
				case DEFAULT:
				case FALSE:
				case INTERVAL:
				case MAXVALUE:
				case MINVALUE:
				case NULL:
				case SESSIONTIMEZONE:
				case TIMESTAMP:
				case TRUE:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
					{
					setState(3094);
					constant();
					}
					break;
				case LEFT_PAREN:
					{
					setState(3095);
					match(LEFT_PAREN);
					setState(3096);
					constant();
					setState(3101);
					_errHandler.sync(this);
					_la = _input.LA(1);
					while (_la==COMMA) {
						{
						{
						setState(3097);
						match(COMMA);
						setState(3098);
						constant();
						}
						}
						setState(3103);
						_errHandler.sync(this);
						_la = _input.LA(1);
					}
					setState(3104);
					match(RIGHT_PAREN);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Hierarchical_query_clauseContext extends ParserRuleContext {
		public TerminalNode CONNECT() { return getToken(HanaParser.CONNECT, 0); }
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode NOCYCLE() { return getToken(HanaParser.NOCYCLE, 0); }
		public Start_partContext start_part() {
			return getRuleContext(Start_partContext.class,0);
		}
		public Hierarchical_query_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_hierarchical_query_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterHierarchical_query_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitHierarchical_query_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitHierarchical_query_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Hierarchical_query_clauseContext hierarchical_query_clause() throws RecognitionException {
		Hierarchical_query_clauseContext _localctx = new Hierarchical_query_clauseContext(_ctx, getState());
		enterRule(_localctx, 416, RULE_hierarchical_query_clause);
		try {
			setState(3127);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONNECT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3110);
				match(CONNECT);
				setState(3111);
				match(BY);
				setState(3113);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,339,_ctx) ) {
				case 1:
					{
					setState(3112);
					match(NOCYCLE);
					}
					break;
				}
				setState(3115);
				condition();
				setState(3117);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,340,_ctx) ) {
				case 1:
					{
					setState(3116);
					start_part();
					}
					break;
				}
				}
				break;
			case START:
				enterOuterAlt(_localctx, 2);
				{
				setState(3119);
				start_part();
				setState(3120);
				match(CONNECT);
				setState(3121);
				match(BY);
				setState(3123);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,341,_ctx) ) {
				case 1:
					{
					setState(3122);
					match(NOCYCLE);
					}
					break;
				}
				setState(3125);
				condition();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Start_partContext extends ParserRuleContext {
		public TerminalNode START() { return getToken(HanaParser.START, 0); }
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Start_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_start_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterStart_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitStart_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitStart_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Start_partContext start_part() throws RecognitionException {
		Start_partContext _localctx = new Start_partContext(_ctx, getState());
		enterRule(_localctx, 418, RULE_start_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3129);
			match(START);
			setState(3130);
			match(WITH);
			setState(3131);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_clauseContext extends ParserRuleContext {
		public TerminalNode GROUP() { return getToken(HanaParser.GROUP, 0); }
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		public List<Group_by_elementsContext> group_by_elements() {
			return getRuleContexts(Group_by_elementsContext.class);
		}
		public Group_by_elementsContext group_by_elements(int i) {
			return getRuleContext(Group_by_elementsContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Having_clauseContext having_clause() {
			return getRuleContext(Having_clauseContext.class,0);
		}
		public Group_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGroup_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGroup_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGroup_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_clauseContext group_by_clause() throws RecognitionException {
		Group_by_clauseContext _localctx = new Group_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 420, RULE_group_by_clause);
		try {
			int _alt;
			setState(3159);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GROUP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3133);
				match(GROUP);
				setState(3134);
				match(BY);
				setState(3135);
				group_by_elements();
				setState(3140);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,343,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(3136);
						match(COMMA);
						setState(3137);
						group_by_elements();
						}
						} 
					}
					setState(3142);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,343,_ctx);
				}
				setState(3144);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,344,_ctx) ) {
				case 1:
					{
					setState(3143);
					having_clause();
					}
					break;
				}
				}
				break;
			case HAVING:
				enterOuterAlt(_localctx, 2);
				{
				setState(3146);
				having_clause();
				setState(3157);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,346,_ctx) ) {
				case 1:
					{
					setState(3147);
					match(GROUP);
					setState(3148);
					match(BY);
					setState(3149);
					group_by_elements();
					setState(3154);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,345,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(3150);
							match(COMMA);
							setState(3151);
							group_by_elements();
							}
							} 
						}
						setState(3156);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,345,_ctx);
					}
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Group_by_elementsContext extends ParserRuleContext {
		public Grouping_sets_clauseContext grouping_sets_clause() {
			return getRuleContext(Grouping_sets_clauseContext.class,0);
		}
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Group_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_group_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGroup_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGroup_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGroup_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Group_by_elementsContext group_by_elements() throws RecognitionException {
		Group_by_elementsContext _localctx = new Group_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 422, RULE_group_by_elements);
		try {
			setState(3164);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,348,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3161);
				grouping_sets_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3162);
				rollup_cube_clause();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3163);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollup_cube_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode ROLLUP() { return getToken(HanaParser.ROLLUP, 0); }
		public TerminalNode CUBE() { return getToken(HanaParser.CUBE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Rollup_cube_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollup_cube_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRollup_cube_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRollup_cube_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRollup_cube_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollup_cube_clauseContext rollup_cube_clause() throws RecognitionException {
		Rollup_cube_clauseContext _localctx = new Rollup_cube_clauseContext(_ctx, getState());
		enterRule(_localctx, 424, RULE_rollup_cube_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3166);
			_la = _input.LA(1);
			if ( !(_la==CUBE || _la==ROLLUP) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3167);
			match(LEFT_PAREN);
			setState(3168);
			grouping_sets_elements();
			setState(3173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3169);
				match(COMMA);
				setState(3170);
				grouping_sets_elements();
				}
				}
				setState(3175);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3176);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_clauseContext extends ParserRuleContext {
		public TerminalNode GROUPING() { return getToken(HanaParser.GROUPING, 0); }
		public TerminalNode SETS() { return getToken(HanaParser.SETS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Grouping_sets_elementsContext> grouping_sets_elements() {
			return getRuleContexts(Grouping_sets_elementsContext.class);
		}
		public Grouping_sets_elementsContext grouping_sets_elements(int i) {
			return getRuleContext(Grouping_sets_elementsContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Grouping_sets_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGrouping_sets_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGrouping_sets_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGrouping_sets_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_clauseContext grouping_sets_clause() throws RecognitionException {
		Grouping_sets_clauseContext _localctx = new Grouping_sets_clauseContext(_ctx, getState());
		enterRule(_localctx, 426, RULE_grouping_sets_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3178);
			match(GROUPING);
			setState(3179);
			match(SETS);
			setState(3180);
			match(LEFT_PAREN);
			setState(3181);
			grouping_sets_elements();
			setState(3186);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3182);
				match(COMMA);
				setState(3183);
				grouping_sets_elements();
				}
				}
				setState(3188);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3189);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Grouping_sets_elementsContext extends ParserRuleContext {
		public Rollup_cube_clauseContext rollup_cube_clause() {
			return getRuleContext(Rollup_cube_clauseContext.class,0);
		}
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Grouping_sets_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_grouping_sets_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGrouping_sets_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGrouping_sets_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGrouping_sets_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Grouping_sets_elementsContext grouping_sets_elements() throws RecognitionException {
		Grouping_sets_elementsContext _localctx = new Grouping_sets_elementsContext(_ctx, getState());
		enterRule(_localctx, 428, RULE_grouping_sets_elements);
		try {
			setState(3194);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,351,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3191);
				rollup_cube_clause();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3192);
				expression_list();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3193);
				expression();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Having_clauseContext extends ParserRuleContext {
		public TerminalNode HAVING() { return getToken(HanaParser.HAVING, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public Having_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_having_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterHaving_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitHaving_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitHaving_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Having_clauseContext having_clause() throws RecognitionException {
		Having_clauseContext _localctx = new Having_clauseContext(_ctx, getState());
		enterRule(_localctx, 430, RULE_having_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3196);
			match(HAVING);
			setState(3197);
			condition();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_clauseContext extends ParserRuleContext {
		public TerminalNode MODEL() { return getToken(HanaParser.MODEL, 0); }
		public Main_modelContext main_model() {
			return getRuleContext(Main_modelContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Return_rows_clauseContext return_rows_clause() {
			return getRuleContext(Return_rows_clauseContext.class,0);
		}
		public List<Reference_modelContext> reference_model() {
			return getRuleContexts(Reference_modelContext.class);
		}
		public Reference_modelContext reference_model(int i) {
			return getRuleContext(Reference_modelContext.class,i);
		}
		public Model_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_clauseContext model_clause() throws RecognitionException {
		Model_clauseContext _localctx = new Model_clauseContext(_ctx, getState());
		enterRule(_localctx, 432, RULE_model_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3199);
			match(MODEL);
			setState(3203);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3200);
				cell_reference_options();
				}
				}
				setState(3205);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3207);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN) {
				{
				setState(3206);
				return_rows_clause();
				}
			}

			setState(3212);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==REFERENCE) {
				{
				{
				setState(3209);
				reference_model();
				}
				}
				setState(3214);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3215);
			main_model();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_reference_optionsContext extends ParserRuleContext {
		public TerminalNode NAV() { return getToken(HanaParser.NAV, 0); }
		public TerminalNode IGNORE() { return getToken(HanaParser.IGNORE, 0); }
		public TerminalNode KEEP() { return getToken(HanaParser.KEEP, 0); }
		public TerminalNode UNIQUE() { return getToken(HanaParser.UNIQUE, 0); }
		public TerminalNode DIMENSION() { return getToken(HanaParser.DIMENSION, 0); }
		public TerminalNode SINGLE() { return getToken(HanaParser.SINGLE, 0); }
		public TerminalNode REFERENCE() { return getToken(HanaParser.REFERENCE, 0); }
		public Cell_reference_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_reference_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCell_reference_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCell_reference_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCell_reference_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_reference_optionsContext cell_reference_options() throws RecognitionException {
		Cell_reference_optionsContext _localctx = new Cell_reference_optionsContext(_ctx, getState());
		enterRule(_localctx, 434, RULE_cell_reference_options);
		int _la;
		try {
			setState(3225);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IGNORE:
			case KEEP:
				enterOuterAlt(_localctx, 1);
				{
				setState(3217);
				_la = _input.LA(1);
				if ( !(_la==IGNORE || _la==KEEP) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3218);
				match(NAV);
				}
				break;
			case UNIQUE:
				enterOuterAlt(_localctx, 2);
				{
				setState(3219);
				match(UNIQUE);
				setState(3223);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case DIMENSION:
					{
					setState(3220);
					match(DIMENSION);
					}
					break;
				case SINGLE:
					{
					setState(3221);
					match(SINGLE);
					setState(3222);
					match(REFERENCE);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Return_rows_clauseContext extends ParserRuleContext {
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		public TerminalNode ROWS() { return getToken(HanaParser.ROWS, 0); }
		public TerminalNode UPDATED() { return getToken(HanaParser.UPDATED, 0); }
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public Return_rows_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_return_rows_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterReturn_rows_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitReturn_rows_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitReturn_rows_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Return_rows_clauseContext return_rows_clause() throws RecognitionException {
		Return_rows_clauseContext _localctx = new Return_rows_clauseContext(_ctx, getState());
		enterRule(_localctx, 436, RULE_return_rows_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3227);
			match(RETURN);
			setState(3228);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==UPDATED) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3229);
			match(ROWS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_modelContext extends ParserRuleContext {
		public TerminalNode REFERENCE() { return getToken(HanaParser.REFERENCE, 0); }
		public Reference_model_nameContext reference_model_name() {
			return getRuleContext(Reference_model_nameContext.class,0);
		}
		public TerminalNode ON() { return getToken(HanaParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Reference_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterReference_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitReference_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitReference_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_modelContext reference_model() throws RecognitionException {
		Reference_modelContext _localctx = new Reference_modelContext(_ctx, getState());
		enterRule(_localctx, 438, RULE_reference_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3231);
			match(REFERENCE);
			setState(3232);
			reference_model_name();
			setState(3233);
			match(ON);
			setState(3234);
			match(LEFT_PAREN);
			setState(3235);
			subquery();
			setState(3236);
			match(RIGHT_PAREN);
			setState(3237);
			model_column_clauses();
			setState(3241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3238);
				cell_reference_options();
				}
				}
				setState(3243);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_modelContext extends ParserRuleContext {
		public Model_column_clausesContext model_column_clauses() {
			return getRuleContext(Model_column_clausesContext.class,0);
		}
		public Model_rules_clauseContext model_rules_clause() {
			return getRuleContext(Model_rules_clauseContext.class,0);
		}
		public TerminalNode MAIN() { return getToken(HanaParser.MAIN, 0); }
		public Main_model_nameContext main_model_name() {
			return getRuleContext(Main_model_nameContext.class,0);
		}
		public List<Cell_reference_optionsContext> cell_reference_options() {
			return getRuleContexts(Cell_reference_optionsContext.class);
		}
		public Cell_reference_optionsContext cell_reference_options(int i) {
			return getRuleContext(Cell_reference_optionsContext.class,i);
		}
		public Main_modelContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMain_model(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMain_model(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMain_model(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_modelContext main_model() throws RecognitionException {
		Main_modelContext _localctx = new Main_modelContext(_ctx, getState());
		enterRule(_localctx, 440, RULE_main_model);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3246);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==MAIN) {
				{
				setState(3244);
				match(MAIN);
				setState(3245);
				main_model_name();
				}
			}

			setState(3248);
			model_column_clauses();
			setState(3252);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==IGNORE || _la==KEEP || _la==UNIQUE) {
				{
				{
				setState(3249);
				cell_reference_options();
				}
				}
				setState(3254);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3255);
			model_rules_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_clausesContext extends ParserRuleContext {
		public TerminalNode DIMENSION() { return getToken(HanaParser.DIMENSION, 0); }
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		public List<Model_column_listContext> model_column_list() {
			return getRuleContexts(Model_column_listContext.class);
		}
		public Model_column_listContext model_column_list(int i) {
			return getRuleContext(Model_column_listContext.class,i);
		}
		public TerminalNode MEASURES() { return getToken(HanaParser.MEASURES, 0); }
		public Model_column_partition_partContext model_column_partition_part() {
			return getRuleContext(Model_column_partition_partContext.class,0);
		}
		public Model_column_clausesContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_clauses; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_column_clauses(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_column_clauses(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_column_clauses(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_clausesContext model_column_clauses() throws RecognitionException {
		Model_column_clausesContext _localctx = new Model_column_clausesContext(_ctx, getState());
		enterRule(_localctx, 442, RULE_model_column_clauses);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3258);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(3257);
				model_column_partition_part();
				}
			}

			setState(3260);
			match(DIMENSION);
			setState(3261);
			match(BY);
			setState(3262);
			model_column_list();
			setState(3263);
			match(MEASURES);
			setState(3264);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_partition_partContext extends ParserRuleContext {
		public TerminalNode PARTITION() { return getToken(HanaParser.PARTITION, 0); }
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		public Model_column_listContext model_column_list() {
			return getRuleContext(Model_column_listContext.class,0);
		}
		public Model_column_partition_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_partition_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_column_partition_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_column_partition_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_column_partition_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_partition_partContext model_column_partition_part() throws RecognitionException {
		Model_column_partition_partContext _localctx = new Model_column_partition_partContext(_ctx, getState());
		enterRule(_localctx, 444, RULE_model_column_partition_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3266);
			match(PARTITION);
			setState(3267);
			match(BY);
			setState(3268);
			model_column_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_column_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Model_columnContext> model_column() {
			return getRuleContexts(Model_columnContext.class);
		}
		public Model_columnContext model_column(int i) {
			return getRuleContext(Model_columnContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Model_column_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_column_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_column_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_column_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_column_listContext model_column_list() throws RecognitionException {
		Model_column_listContext _localctx = new Model_column_listContext(_ctx, getState());
		enterRule(_localctx, 446, RULE_model_column_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3270);
			match(LEFT_PAREN);
			setState(3271);
			model_column();
			setState(3276);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3272);
				match(COMMA);
				setState(3273);
				model_column();
				}
				}
				setState(3278);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3279);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_columnContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Model_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_columnContext model_column() throws RecognitionException {
		Model_columnContext _localctx = new Model_columnContext(_ctx, getState());
		enterRule(_localctx, 448, RULE_model_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3281);
			expression();
			setState(3283);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(3282);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_clauseContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Model_rules_elementContext> model_rules_element() {
			return getRuleContexts(Model_rules_elementContext.class);
		}
		public Model_rules_elementContext model_rules_element(int i) {
			return getRuleContext(Model_rules_elementContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Model_rules_partContext model_rules_part() {
			return getRuleContext(Model_rules_partContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Model_rules_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_rules_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_rules_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_rules_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_clauseContext model_rules_clause() throws RecognitionException {
		Model_rules_clauseContext _localctx = new Model_rules_clauseContext(_ctx, getState());
		enterRule(_localctx, 450, RULE_model_rules_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3286);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RULES) {
				{
				setState(3285);
				model_rules_part();
				}
			}

			setState(3288);
			match(LEFT_PAREN);
			setState(3289);
			model_rules_element();
			setState(3294);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3290);
				match(COMMA);
				setState(3291);
				model_rules_element();
				}
				}
				setState(3296);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3297);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_partContext extends ParserRuleContext {
		public TerminalNode RULES() { return getToken(HanaParser.RULES, 0); }
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(HanaParser.UPSERT, 0); }
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		public Model_iterate_clauseContext model_iterate_clause() {
			return getRuleContext(Model_iterate_clauseContext.class,0);
		}
		public TerminalNode AUTOMATIC() { return getToken(HanaParser.AUTOMATIC, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(HanaParser.SEQUENTIAL, 0); }
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public Model_rules_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_rules_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_rules_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_rules_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_partContext model_rules_part() throws RecognitionException {
		Model_rules_partContext _localctx = new Model_rules_partContext(_ctx, getState());
		enterRule(_localctx, 452, RULE_model_rules_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3299);
			match(RULES);
			setState(3305);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case UPDATE:
				{
				setState(3300);
				match(UPDATE);
				}
				break;
			case UPSERT:
				{
				setState(3301);
				match(UPSERT);
				setState(3303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ALL) {
					{
					setState(3302);
					match(ALL);
					}
				}

				}
				break;
			case AUTOMATIC:
			case ITERATE:
			case SEQUENTIAL:
			case LEFT_PAREN:
				break;
			default:
				break;
			}
			setState(3309);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AUTOMATIC || _la==SEQUENTIAL) {
				{
				setState(3307);
				_la = _input.LA(1);
				if ( !(_la==AUTOMATIC || _la==SEQUENTIAL) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(3308);
				match(ORDER);
				}
			}

			setState(3312);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ITERATE) {
				{
				setState(3311);
				model_iterate_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_rules_elementContext extends ParserRuleContext {
		public Cell_assignmentContext cell_assignment() {
			return getRuleContext(Cell_assignmentContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		public TerminalNode UPSERT() { return getToken(HanaParser.UPSERT, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public Model_rules_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_rules_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_rules_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_rules_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_rules_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_rules_elementContext model_rules_element() throws RecognitionException {
		Model_rules_elementContext _localctx = new Model_rules_elementContext(_ctx, getState());
		enterRule(_localctx, 454, RULE_model_rules_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3319);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,370,_ctx) ) {
			case 1:
				{
				setState(3314);
				match(UPDATE);
				}
				break;
			case 2:
				{
				setState(3315);
				match(UPSERT);
				setState(3317);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,369,_ctx) ) {
				case 1:
					{
					setState(3316);
					match(ALL);
					}
					break;
				}
				}
				break;
			}
			setState(3321);
			cell_assignment();
			setState(3323);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(3322);
				order_by_clause();
				}
			}

			setState(3325);
			match(EQUALS_OP);
			setState(3326);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cell_assignmentContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public Cell_assignmentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cell_assignment; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCell_assignment(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCell_assignment(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCell_assignment(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cell_assignmentContext cell_assignment() throws RecognitionException {
		Cell_assignmentContext _localctx = new Cell_assignmentContext(_ctx, getState());
		enterRule(_localctx, 456, RULE_cell_assignment);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3328);
			model_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_iterate_clauseContext extends ParserRuleContext {
		public TerminalNode ITERATE() { return getToken(HanaParser.ITERATE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Until_partContext until_part() {
			return getRuleContext(Until_partContext.class,0);
		}
		public Model_iterate_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_iterate_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_iterate_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_iterate_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_iterate_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_iterate_clauseContext model_iterate_clause() throws RecognitionException {
		Model_iterate_clauseContext _localctx = new Model_iterate_clauseContext(_ctx, getState());
		enterRule(_localctx, 458, RULE_model_iterate_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3330);
			match(ITERATE);
			setState(3331);
			match(LEFT_PAREN);
			setState(3332);
			expression();
			setState(3333);
			match(RIGHT_PAREN);
			setState(3335);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==UNTIL) {
				{
				setState(3334);
				until_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Until_partContext extends ParserRuleContext {
		public TerminalNode UNTIL() { return getToken(HanaParser.UNTIL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Until_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_until_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUntil_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUntil_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUntil_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Until_partContext until_part() throws RecognitionException {
		Until_partContext _localctx = new Until_partContext(_ctx, getState());
		enterRule(_localctx, 460, RULE_until_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3337);
			match(UNTIL);
			setState(3338);
			match(LEFT_PAREN);
			setState(3339);
			condition();
			setState(3340);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		public List<Order_by_elementsContext> order_by_elements() {
			return getRuleContexts(Order_by_elementsContext.class);
		}
		public Order_by_elementsContext order_by_elements(int i) {
			return getRuleContext(Order_by_elementsContext.class,i);
		}
		public TerminalNode SIBLINGS() { return getToken(HanaParser.SIBLINGS, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOrder_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOrder_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOrder_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_clauseContext order_by_clause() throws RecognitionException {
		Order_by_clauseContext _localctx = new Order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 462, RULE_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3342);
			match(ORDER);
			setState(3344);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SIBLINGS) {
				{
				setState(3343);
				match(SIBLINGS);
				}
			}

			setState(3346);
			match(BY);
			setState(3347);
			order_by_elements();
			setState(3352);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3348);
				match(COMMA);
				setState(3349);
				order_by_elements();
				}
				}
				setState(3354);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Order_by_elementsContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NULLS() { return getToken(HanaParser.NULLS, 0); }
		public TerminalNode ASC() { return getToken(HanaParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(HanaParser.DESC, 0); }
		public TerminalNode FIRST() { return getToken(HanaParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(HanaParser.LAST, 0); }
		public Order_by_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_order_by_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOrder_by_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOrder_by_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOrder_by_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Order_by_elementsContext order_by_elements() throws RecognitionException {
		Order_by_elementsContext _localctx = new Order_by_elementsContext(_ctx, getState());
		enterRule(_localctx, 464, RULE_order_by_elements);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3355);
			expression();
			setState(3357);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(3356);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3361);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NULLS) {
				{
				setState(3359);
				match(NULLS);
				setState(3360);
				_la = _input.LA(1);
				if ( !(_la==FIRST || _la==LAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_clauseContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		public For_update_of_partContext for_update_of_part() {
			return getRuleContext(For_update_of_partContext.class,0);
		}
		public For_update_optionsContext for_update_options() {
			return getRuleContext(For_update_optionsContext.class,0);
		}
		public For_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFor_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFor_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFor_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_clauseContext for_update_clause() throws RecognitionException {
		For_update_clauseContext _localctx = new For_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 466, RULE_for_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3363);
			match(FOR);
			setState(3364);
			match(UPDATE);
			setState(3366);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==OF) {
				{
				setState(3365);
				for_update_of_part();
				}
			}

			setState(3369);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==SKIP_ || _la==WAIT) {
				{
				setState(3368);
				for_update_options();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_of_partContext extends ParserRuleContext {
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public For_update_of_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_of_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFor_update_of_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFor_update_of_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFor_update_of_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_of_partContext for_update_of_part() throws RecognitionException {
		For_update_of_partContext _localctx = new For_update_of_partContext(_ctx, getState());
		enterRule(_localctx, 468, RULE_for_update_of_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3371);
			match(OF);
			setState(3372);
			column_name();
			setState(3377);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3373);
				match(COMMA);
				setState(3374);
				column_name();
				}
				}
				setState(3379);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_update_optionsContext extends ParserRuleContext {
		public TerminalNode SKIP_() { return getToken(HanaParser.SKIP_, 0); }
		public TerminalNode LOCKED() { return getToken(HanaParser.LOCKED, 0); }
		public TerminalNode NOWAIT() { return getToken(HanaParser.NOWAIT, 0); }
		public TerminalNode WAIT() { return getToken(HanaParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_update_optionsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_update_options; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFor_update_options(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFor_update_options(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFor_update_options(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_update_optionsContext for_update_options() throws RecognitionException {
		For_update_optionsContext _localctx = new For_update_optionsContext(_ctx, getState());
		enterRule(_localctx, 470, RULE_for_update_options);
		try {
			setState(3385);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SKIP_:
				enterOuterAlt(_localctx, 1);
				{
				setState(3380);
				match(SKIP_);
				setState(3381);
				match(LOCKED);
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3382);
				match(NOWAIT);
				}
				break;
			case WAIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(3383);
				match(WAIT);
				setState(3384);
				expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_statementContext extends ParserRuleContext {
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public Update_set_clauseContext update_set_clause() {
			return getRuleContext(Update_set_clauseContext.class,0);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Update_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUpdate_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUpdate_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUpdate_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_statementContext update_statement() throws RecognitionException {
		Update_statementContext _localctx = new Update_statementContext(_ctx, getState());
		enterRule(_localctx, 472, RULE_update_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3387);
			match(UPDATE);
			setState(3388);
			general_table_ref();
			setState(3389);
			update_set_clause();
			setState(3391);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3390);
				where_clause();
				}
			}

			setState(3394);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3393);
				static_returning_clause();
				}
			}

			setState(3397);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3396);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Update_set_clauseContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		public List<Column_based_update_set_clauseContext> column_based_update_set_clause() {
			return getRuleContexts(Column_based_update_set_clauseContext.class);
		}
		public Column_based_update_set_clauseContext column_based_update_set_clause(int i) {
			return getRuleContext(Column_based_update_set_clauseContext.class,i);
		}
		public TerminalNode VALUE() { return getToken(HanaParser.VALUE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUpdate_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUpdate_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUpdate_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Update_set_clauseContext update_set_clause() throws RecognitionException {
		Update_set_clauseContext _localctx = new Update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 474, RULE_update_set_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3399);
			match(SET);
			setState(3415);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,385,_ctx) ) {
			case 1:
				{
				setState(3400);
				column_based_update_set_clause();
				setState(3405);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3401);
					match(COMMA);
					setState(3402);
					column_based_update_set_clause();
					}
					}
					setState(3407);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				{
				setState(3408);
				match(VALUE);
				setState(3409);
				match(LEFT_PAREN);
				setState(3410);
				id();
				setState(3411);
				match(RIGHT_PAREN);
				setState(3412);
				match(EQUALS_OP);
				setState(3413);
				expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_based_update_set_clauseContext extends ParserRuleContext {
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Column_based_update_set_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_based_update_set_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_based_update_set_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_based_update_set_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_based_update_set_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_based_update_set_clauseContext column_based_update_set_clause() throws RecognitionException {
		Column_based_update_set_clauseContext _localctx = new Column_based_update_set_clauseContext(_ctx, getState());
		enterRule(_localctx, 476, RULE_column_based_update_set_clause);
		int _la;
		try {
			setState(3434);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,387,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3417);
				column_name();
				setState(3418);
				match(EQUALS_OP);
				setState(3419);
				expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3421);
				match(LEFT_PAREN);
				setState(3422);
				column_name();
				setState(3427);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3423);
					match(COMMA);
					setState(3424);
					column_name();
					}
					}
					setState(3429);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3430);
				match(RIGHT_PAREN);
				setState(3431);
				match(EQUALS_OP);
				setState(3432);
				subquery();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Delete_statementContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(HanaParser.DELETE, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode FROM() { return getToken(HanaParser.FROM, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Delete_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delete_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDelete_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDelete_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDelete_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Delete_statementContext delete_statement() throws RecognitionException {
		Delete_statementContext _localctx = new Delete_statementContext(_ctx, getState());
		enterRule(_localctx, 478, RULE_delete_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3436);
			match(DELETE);
			setState(3438);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FROM) {
				{
				setState(3437);
				match(FROM);
				}
			}

			setState(3440);
			general_table_ref();
			setState(3442);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3441);
				where_clause();
				}
			}

			setState(3445);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==RETURN || _la==RETURNING) {
				{
				setState(3444);
				static_returning_clause();
				}
			}

			setState(3448);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3447);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_statementContext extends ParserRuleContext {
		public TerminalNode INSERT() { return getToken(HanaParser.INSERT, 0); }
		public Single_table_insertContext single_table_insert() {
			return getRuleContext(Single_table_insertContext.class,0);
		}
		public Multi_table_insertContext multi_table_insert() {
			return getRuleContext(Multi_table_insertContext.class,0);
		}
		public Insert_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterInsert_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitInsert_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitInsert_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_statementContext insert_statement() throws RecognitionException {
		Insert_statementContext _localctx = new Insert_statementContext(_ctx, getState());
		enterRule(_localctx, 480, RULE_insert_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3450);
			match(INSERT);
			setState(3453);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				{
				setState(3451);
				single_table_insert();
				}
				break;
			case ALL:
			case FIRST:
			case WHEN:
				{
				setState(3452);
				multi_table_insert();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Declare_statementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public Default_value_partContext default_value_part() {
			return getRuleContext(Default_value_partContext.class,0);
		}
		public Declare_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_declare_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDeclare_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDeclare_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDeclare_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Declare_statementContext declare_statement() throws RecognitionException {
		Declare_statementContext _localctx = new Declare_statementContext(_ctx, getState());
		enterRule(_localctx, 482, RULE_declare_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3455);
			match(DECLARE);
			setState(3456);
			id();
			setState(3458);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,393,_ctx) ) {
			case 1:
				{
				setState(3457);
				type_spec();
				}
				break;
			}
			setState(3461);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT || _la==ASSIGN_OP) {
				{
				setState(3460);
				default_value_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_statementContext extends ParserRuleContext {
		public TerminalNode DECLARE() { return getToken(HanaParser.DECLARE, 0); }
		public TerminalNode EXIT() { return getToken(HanaParser.EXIT, 0); }
		public TerminalNode HANDLER() { return getToken(HanaParser.HANDLER, 0); }
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public Proc_condition_valueContext proc_condition_value() {
			return getRuleContext(Proc_condition_valueContext.class,0);
		}
		public Data_manipulation_language_statementsContext data_manipulation_language_statements() {
			return getRuleContext(Data_manipulation_language_statementsContext.class,0);
		}
		public Exception_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterException_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitException_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitException_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_statementContext exception_statement() throws RecognitionException {
		Exception_statementContext _localctx = new Exception_statementContext(_ctx, getState());
		enterRule(_localctx, 484, RULE_exception_statement);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3463);
			match(DECLARE);
			setState(3464);
			match(EXIT);
			setState(3465);
			match(HANDLER);
			setState(3466);
			match(FOR);
			setState(3467);
			proc_condition_value();
			setState(3468);
			data_manipulation_language_statements();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_condition_value_Context extends ParserRuleContext {
		public TerminalNode SQLEXCEPTION() { return getToken(HanaParser.SQLEXCEPTION, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Proc_condition_value_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_condition_value_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_condition_value_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_condition_value_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_condition_value_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_condition_value_Context proc_condition_value_() throws RecognitionException {
		Proc_condition_value_Context _localctx = new Proc_condition_value_Context(_ctx, getState());
		enterRule(_localctx, 486, RULE_proc_condition_value_);
		try {
			setState(3472);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SQLEXCEPTION:
				enterOuterAlt(_localctx, 1);
				{
				setState(3470);
				match(SQLEXCEPTION);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(3471);
				id();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_table_insertContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Static_returning_clauseContext static_returning_clause() {
			return getRuleContext(Static_returning_clauseContext.class,0);
		}
		public Single_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSingle_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSingle_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSingle_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_table_insertContext single_table_insert() throws RecognitionException {
		Single_table_insertContext _localctx = new Single_table_insertContext(_ctx, getState());
		enterRule(_localctx, 488, RULE_single_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3474);
			insert_into_clause();
			setState(3480);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case VALUES:
				{
				setState(3475);
				values_clause();
				setState(3477);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RETURN || _la==RETURNING) {
					{
					setState(3476);
					static_returning_clause();
					}
				}

				}
				break;
			case SELECT:
			case WITH:
			case LEFT_PAREN:
				{
				setState(3479);
				select_statement();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3483);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3482);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_insertContext extends ParserRuleContext {
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public Conditional_insert_clauseContext conditional_insert_clause() {
			return getRuleContext(Conditional_insert_clauseContext.class,0);
		}
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Multi_table_insertContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_insert; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMulti_table_insert(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMulti_table_insert(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMulti_table_insert(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_insertContext multi_table_insert() throws RecognitionException {
		Multi_table_insertContext _localctx = new Multi_table_insertContext(_ctx, getState());
		enterRule(_localctx, 490, RULE_multi_table_insert);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3492);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,400,_ctx) ) {
			case 1:
				{
				setState(3485);
				match(ALL);
				setState(3487); 
				_errHandler.sync(this);
				_la = _input.LA(1);
				do {
					{
					{
					setState(3486);
					multi_table_element();
					}
					}
					setState(3489); 
					_errHandler.sync(this);
					_la = _input.LA(1);
				} while ( _la==INTO );
				}
				break;
			case 2:
				{
				setState(3491);
				conditional_insert_clause();
				}
				break;
			}
			setState(3494);
			select_statement();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_table_elementContext extends ParserRuleContext {
		public Insert_into_clauseContext insert_into_clause() {
			return getRuleContext(Insert_into_clauseContext.class,0);
		}
		public Values_clauseContext values_clause() {
			return getRuleContext(Values_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Multi_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMulti_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMulti_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMulti_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_table_elementContext multi_table_element() throws RecognitionException {
		Multi_table_elementContext _localctx = new Multi_table_elementContext(_ctx, getState());
		enterRule(_localctx, 492, RULE_multi_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3496);
			insert_into_clause();
			setState(3498);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==VALUES) {
				{
				setState(3497);
				values_clause();
				}
			}

			setState(3501);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3500);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_clauseContext extends ParserRuleContext {
		public List<Conditional_insert_when_partContext> conditional_insert_when_part() {
			return getRuleContexts(Conditional_insert_when_partContext.class);
		}
		public Conditional_insert_when_partContext conditional_insert_when_part(int i) {
			return getRuleContext(Conditional_insert_when_partContext.class,i);
		}
		public Conditional_insert_else_partContext conditional_insert_else_part() {
			return getRuleContext(Conditional_insert_else_partContext.class,0);
		}
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public TerminalNode FIRST() { return getToken(HanaParser.FIRST, 0); }
		public Conditional_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConditional_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConditional_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConditional_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_clauseContext conditional_insert_clause() throws RecognitionException {
		Conditional_insert_clauseContext _localctx = new Conditional_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 494, RULE_conditional_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3504);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ALL || _la==FIRST) {
				{
				setState(3503);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==FIRST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(3507); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3506);
				conditional_insert_when_part();
				}
				}
				setState(3509); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(3512);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3511);
				conditional_insert_else_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConditional_insert_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConditional_insert_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConditional_insert_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_when_partContext conditional_insert_when_part() throws RecognitionException {
		Conditional_insert_when_partContext _localctx = new Conditional_insert_when_partContext(_ctx, getState());
		enterRule(_localctx, 496, RULE_conditional_insert_when_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3514);
			match(WHEN);
			setState(3515);
			condition();
			setState(3516);
			match(THEN);
			setState(3518); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3517);
				multi_table_element();
				}
				}
				setState(3520); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Conditional_insert_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(HanaParser.ELSE, 0); }
		public List<Multi_table_elementContext> multi_table_element() {
			return getRuleContexts(Multi_table_elementContext.class);
		}
		public Multi_table_elementContext multi_table_element(int i) {
			return getRuleContext(Multi_table_elementContext.class,i);
		}
		public Conditional_insert_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_conditional_insert_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConditional_insert_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConditional_insert_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConditional_insert_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Conditional_insert_else_partContext conditional_insert_else_part() throws RecognitionException {
		Conditional_insert_else_partContext _localctx = new Conditional_insert_else_partContext(_ctx, getState());
		enterRule(_localctx, 498, RULE_conditional_insert_else_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3522);
			match(ELSE);
			setState(3524); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(3523);
				multi_table_element();
				}
				}
				setState(3526); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==INTO );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Insert_into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		public General_table_refContext general_table_ref() {
			return getRuleContext(General_table_refContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Insert_into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_insert_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterInsert_into_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitInsert_into_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitInsert_into_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Insert_into_clauseContext insert_into_clause() throws RecognitionException {
		Insert_into_clauseContext _localctx = new Insert_into_clauseContext(_ctx, getState());
		enterRule(_localctx, 500, RULE_insert_into_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3528);
			match(INTO);
			setState(3529);
			general_table_ref();
			setState(3541);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,409,_ctx) ) {
			case 1:
				{
				setState(3530);
				match(LEFT_PAREN);
				setState(3531);
				column_name();
				setState(3536);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3532);
					match(COMMA);
					setState(3533);
					column_name();
					}
					}
					setState(3538);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3539);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Values_clauseContext extends ParserRuleContext {
		public TerminalNode VALUES() { return getToken(HanaParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public Values_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_values_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterValues_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitValues_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitValues_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Values_clauseContext values_clause() throws RecognitionException {
		Values_clauseContext _localctx = new Values_clauseContext(_ctx, getState());
		enterRule(_localctx, 502, RULE_values_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3543);
			match(VALUES);
			setState(3544);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_statementContext extends ParserRuleContext {
		public TerminalNode MERGE() { return getToken(HanaParser.MERGE, 0); }
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(HanaParser.USING, 0); }
		public Selected_tableviewContext selected_tableview() {
			return getRuleContext(Selected_tableviewContext.class,0);
		}
		public TerminalNode ON() { return getToken(HanaParser.ON, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public ConditionContext condition() {
			return getRuleContext(ConditionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Merge_update_clauseContext merge_update_clause() {
			return getRuleContext(Merge_update_clauseContext.class,0);
		}
		public Merge_insert_clauseContext merge_insert_clause() {
			return getRuleContext(Merge_insert_clauseContext.class,0);
		}
		public Error_logging_clauseContext error_logging_clause() {
			return getRuleContext(Error_logging_clauseContext.class,0);
		}
		public Merge_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMerge_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMerge_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMerge_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_statementContext merge_statement() throws RecognitionException {
		Merge_statementContext _localctx = new Merge_statementContext(_ctx, getState());
		enterRule(_localctx, 504, RULE_merge_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3546);
			match(MERGE);
			setState(3547);
			match(INTO);
			setState(3548);
			tableview_name();
			setState(3550);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(3549);
				table_alias();
				}
			}

			setState(3552);
			match(USING);
			setState(3553);
			selected_tableview();
			setState(3554);
			match(ON);
			setState(3555);
			match(LEFT_PAREN);
			setState(3556);
			condition();
			setState(3557);
			match(RIGHT_PAREN);
			setState(3566);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,413,_ctx) ) {
			case 1:
				{
				setState(3558);
				merge_update_clause();
				setState(3560);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3559);
					merge_insert_clause();
					}
				}

				}
				break;
			case 2:
				{
				setState(3562);
				merge_insert_clause();
				setState(3564);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WHEN) {
					{
					setState(3563);
					merge_update_clause();
					}
				}

				}
				break;
			}
			setState(3569);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LOG) {
				{
				setState(3568);
				error_logging_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		public TerminalNode MATCHED() { return getToken(HanaParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		public List<Merge_elementContext> merge_element() {
			return getRuleContexts(Merge_elementContext.class);
		}
		public Merge_elementContext merge_element(int i) {
			return getRuleContext(Merge_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext merge_update_delete_part() {
			return getRuleContext(Merge_update_delete_partContext.class,0);
		}
		public Merge_update_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMerge_update_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMerge_update_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMerge_update_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_clauseContext merge_update_clause() throws RecognitionException {
		Merge_update_clauseContext _localctx = new Merge_update_clauseContext(_ctx, getState());
		enterRule(_localctx, 506, RULE_merge_update_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3571);
			match(WHEN);
			setState(3572);
			match(MATCHED);
			setState(3573);
			match(THEN);
			setState(3574);
			match(UPDATE);
			setState(3575);
			match(SET);
			setState(3576);
			merge_element();
			setState(3581);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3577);
				match(COMMA);
				setState(3578);
				merge_element();
				}
				}
				setState(3583);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3585);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3584);
				where_clause();
				}
			}

			setState(3588);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,417,_ctx) ) {
			case 1:
				{
				setState(3587);
				merge_update_delete_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_elementContext extends ParserRuleContext {
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Merge_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMerge_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMerge_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMerge_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_elementContext merge_element() throws RecognitionException {
		Merge_elementContext _localctx = new Merge_elementContext(_ctx, getState());
		enterRule(_localctx, 508, RULE_merge_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3590);
			column_name();
			setState(3591);
			match(EQUALS_OP);
			setState(3592);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_update_delete_partContext extends ParserRuleContext {
		public TerminalNode DELETE() { return getToken(HanaParser.DELETE, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public Merge_update_delete_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_update_delete_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMerge_update_delete_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMerge_update_delete_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMerge_update_delete_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_update_delete_partContext merge_update_delete_part() throws RecognitionException {
		Merge_update_delete_partContext _localctx = new Merge_update_delete_partContext(_ctx, getState());
		enterRule(_localctx, 510, RULE_merge_update_delete_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3594);
			match(DELETE);
			setState(3595);
			where_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Merge_insert_clauseContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public TerminalNode MATCHED() { return getToken(HanaParser.MATCHED, 0); }
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		public TerminalNode INSERT() { return getToken(HanaParser.INSERT, 0); }
		public TerminalNode VALUES() { return getToken(HanaParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Where_clauseContext where_clause() {
			return getRuleContext(Where_clauseContext.class,0);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Merge_insert_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_merge_insert_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMerge_insert_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMerge_insert_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMerge_insert_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Merge_insert_clauseContext merge_insert_clause() throws RecognitionException {
		Merge_insert_clauseContext _localctx = new Merge_insert_clauseContext(_ctx, getState());
		enterRule(_localctx, 512, RULE_merge_insert_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3597);
			match(WHEN);
			setState(3598);
			match(NOT);
			setState(3599);
			match(MATCHED);
			setState(3600);
			match(THEN);
			setState(3601);
			match(INSERT);
			setState(3613);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==LEFT_PAREN) {
				{
				setState(3602);
				match(LEFT_PAREN);
				setState(3603);
				column_name();
				setState(3608);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(3604);
					match(COMMA);
					setState(3605);
					column_name();
					}
					}
					setState(3610);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(3611);
				match(RIGHT_PAREN);
				}
			}

			setState(3615);
			match(VALUES);
			setState(3616);
			expression_list();
			setState(3618);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==WHERE) {
				{
				setState(3617);
				where_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Selected_tableviewContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public Selected_tableviewContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_selected_tableview; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSelected_tableview(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSelected_tableview(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSelected_tableview(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Selected_tableviewContext selected_tableview() throws RecognitionException {
		Selected_tableviewContext _localctx = new Selected_tableviewContext(_ctx, getState());
		enterRule(_localctx, 514, RULE_selected_tableview);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3625);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(3620);
				tableview_name();
				}
				break;
			case LEFT_PAREN:
				{
				setState(3621);
				match(LEFT_PAREN);
				setState(3622);
				select_statement();
				setState(3623);
				match(RIGHT_PAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(3628);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(3627);
				table_alias();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_statementContext extends ParserRuleContext {
		public TerminalNode LOCK() { return getToken(HanaParser.LOCK, 0); }
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		public List<Lock_table_elementContext> lock_table_element() {
			return getRuleContexts(Lock_table_elementContext.class);
		}
		public Lock_table_elementContext lock_table_element(int i) {
			return getRuleContext(Lock_table_elementContext.class,i);
		}
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public Lock_modeContext lock_mode() {
			return getRuleContext(Lock_modeContext.class,0);
		}
		public TerminalNode MODE() { return getToken(HanaParser.MODE, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Wait_nowait_partContext wait_nowait_part() {
			return getRuleContext(Wait_nowait_partContext.class,0);
		}
		public Lock_table_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLock_table_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLock_table_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLock_table_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_statementContext lock_table_statement() throws RecognitionException {
		Lock_table_statementContext _localctx = new Lock_table_statementContext(_ctx, getState());
		enterRule(_localctx, 516, RULE_lock_table_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3630);
			match(LOCK);
			setState(3631);
			match(TABLE);
			setState(3632);
			lock_table_element();
			setState(3637);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3633);
				match(COMMA);
				setState(3634);
				lock_table_element();
				}
				}
				setState(3639);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3640);
			match(IN);
			setState(3641);
			lock_mode();
			setState(3642);
			match(MODE);
			setState(3644);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOWAIT || _la==WAIT) {
				{
				setState(3643);
				wait_nowait_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Wait_nowait_partContext extends ParserRuleContext {
		public TerminalNode WAIT() { return getToken(HanaParser.WAIT, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode NOWAIT() { return getToken(HanaParser.NOWAIT, 0); }
		public Wait_nowait_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_wait_nowait_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWait_nowait_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWait_nowait_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWait_nowait_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Wait_nowait_partContext wait_nowait_part() throws RecognitionException {
		Wait_nowait_partContext _localctx = new Wait_nowait_partContext(_ctx, getState());
		enterRule(_localctx, 518, RULE_wait_nowait_part);
		try {
			setState(3649);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WAIT:
				enterOuterAlt(_localctx, 1);
				{
				setState(3646);
				match(WAIT);
				setState(3647);
				expression();
				}
				break;
			case NOWAIT:
				enterOuterAlt(_localctx, 2);
				{
				setState(3648);
				match(NOWAIT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_table_elementContext extends ParserRuleContext {
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Lock_table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLock_table_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLock_table_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLock_table_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_table_elementContext lock_table_element() throws RecognitionException {
		Lock_table_elementContext _localctx = new Lock_table_elementContext(_ctx, getState());
		enterRule(_localctx, 520, RULE_lock_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3651);
			tableview_name();
			setState(3653);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION || _la==SUBPARTITION) {
				{
				setState(3652);
				partition_extension_clause();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Lock_modeContext extends ParserRuleContext {
		public TerminalNode ROW() { return getToken(HanaParser.ROW, 0); }
		public TerminalNode SHARE() { return getToken(HanaParser.SHARE, 0); }
		public TerminalNode EXCLUSIVE() { return getToken(HanaParser.EXCLUSIVE, 0); }
		public TerminalNode UPDATE() { return getToken(HanaParser.UPDATE, 0); }
		public Lock_modeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lock_mode; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLock_mode(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLock_mode(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLock_mode(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Lock_modeContext lock_mode() throws RecognitionException {
		Lock_modeContext _localctx = new Lock_modeContext(_ctx, getState());
		enterRule(_localctx, 522, RULE_lock_mode);
		int _la;
		try {
			setState(3667);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,428,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3655);
				match(ROW);
				setState(3656);
				match(SHARE);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3657);
				match(ROW);
				setState(3658);
				match(EXCLUSIVE);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3659);
				match(SHARE);
				setState(3661);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==UPDATE) {
					{
					setState(3660);
					match(UPDATE);
					}
				}

				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3663);
				match(SHARE);
				setState(3664);
				match(ROW);
				setState(3665);
				match(EXCLUSIVE);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3666);
				match(EXCLUSIVE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_table_refContext extends ParserRuleContext {
		public Dml_table_expression_clauseContext dml_table_expression_clause() {
			return getRuleContext(Dml_table_expression_clauseContext.class,0);
		}
		public TerminalNode ONLY() { return getToken(HanaParser.ONLY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Table_aliasContext table_alias() {
			return getRuleContext(Table_aliasContext.class,0);
		}
		public General_table_refContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_table_ref; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGeneral_table_ref(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGeneral_table_ref(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGeneral_table_ref(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_table_refContext general_table_ref() throws RecognitionException {
		General_table_refContext _localctx = new General_table_refContext(_ctx, getState());
		enterRule(_localctx, 524, RULE_general_table_ref);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3675);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,429,_ctx) ) {
			case 1:
				{
				setState(3669);
				dml_table_expression_clause();
				}
				break;
			case 2:
				{
				setState(3670);
				match(ONLY);
				setState(3671);
				match(LEFT_PAREN);
				setState(3672);
				dml_table_expression_clause();
				setState(3673);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(3678);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,430,_ctx) ) {
			case 1:
				{
				setState(3677);
				table_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Static_returning_clauseContext extends ParserRuleContext {
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Into_clauseContext into_clause() {
			return getRuleContext(Into_clauseContext.class,0);
		}
		public TerminalNode RETURNING() { return getToken(HanaParser.RETURNING, 0); }
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Static_returning_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_static_returning_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterStatic_returning_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitStatic_returning_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitStatic_returning_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Static_returning_clauseContext static_returning_clause() throws RecognitionException {
		Static_returning_clauseContext _localctx = new Static_returning_clauseContext(_ctx, getState());
		enterRule(_localctx, 526, RULE_static_returning_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3680);
			_la = _input.LA(1);
			if ( !(_la==RETURN || _la==RETURNING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3681);
			expression();
			setState(3686);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3682);
				match(COMMA);
				setState(3683);
				expression();
				}
				}
				setState(3688);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3689);
			into_clause();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_clauseContext extends ParserRuleContext {
		public TerminalNode LOG() { return getToken(HanaParser.LOG, 0); }
		public TerminalNode ERRORS() { return getToken(HanaParser.ERRORS, 0); }
		public Error_logging_into_partContext error_logging_into_part() {
			return getRuleContext(Error_logging_into_partContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext error_logging_reject_part() {
			return getRuleContext(Error_logging_reject_partContext.class,0);
		}
		public Error_logging_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterError_logging_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitError_logging_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitError_logging_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_clauseContext error_logging_clause() throws RecognitionException {
		Error_logging_clauseContext _localctx = new Error_logging_clauseContext(_ctx, getState());
		enterRule(_localctx, 528, RULE_error_logging_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3691);
			match(LOG);
			setState(3692);
			match(ERRORS);
			setState(3694);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,432,_ctx) ) {
			case 1:
				{
				setState(3693);
				error_logging_into_part();
				}
				break;
			}
			setState(3697);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,433,_ctx) ) {
			case 1:
				{
				setState(3696);
				expression_wrapper();
				}
				break;
			}
			setState(3700);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==REJECT) {
				{
				setState(3699);
				error_logging_reject_part();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_into_partContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Error_logging_into_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_into_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterError_logging_into_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitError_logging_into_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitError_logging_into_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_into_partContext error_logging_into_part() throws RecognitionException {
		Error_logging_into_partContext _localctx = new Error_logging_into_partContext(_ctx, getState());
		enterRule(_localctx, 530, RULE_error_logging_into_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3702);
			match(INTO);
			setState(3703);
			tableview_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Error_logging_reject_partContext extends ParserRuleContext {
		public TerminalNode REJECT() { return getToken(HanaParser.REJECT, 0); }
		public TerminalNode LIMIT() { return getToken(HanaParser.LIMIT, 0); }
		public TerminalNode UNLIMITED() { return getToken(HanaParser.UNLIMITED, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Error_logging_reject_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_error_logging_reject_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterError_logging_reject_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitError_logging_reject_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitError_logging_reject_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Error_logging_reject_partContext error_logging_reject_part() throws RecognitionException {
		Error_logging_reject_partContext _localctx = new Error_logging_reject_partContext(_ctx, getState());
		enterRule(_localctx, 532, RULE_error_logging_reject_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3705);
			match(REJECT);
			setState(3706);
			match(LIMIT);
			setState(3709);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,435,_ctx) ) {
			case 1:
				{
				setState(3707);
				match(UNLIMITED);
				}
				break;
			case 2:
				{
				setState(3708);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Dml_table_expression_clauseContext extends ParserRuleContext {
		public Table_collection_expressionContext table_collection_expression() {
			return getRuleContext(Table_collection_expressionContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public Select_statementContext select_statement() {
			return getRuleContext(Select_statementContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Subquery_restriction_clauseContext subquery_restriction_clause() {
			return getRuleContext(Subquery_restriction_clauseContext.class,0);
		}
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public Sample_clauseContext sample_clause() {
			return getRuleContext(Sample_clauseContext.class,0);
		}
		public Dml_table_expression_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_dml_table_expression_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDml_table_expression_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDml_table_expression_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDml_table_expression_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Dml_table_expression_clauseContext dml_table_expression_clause() throws RecognitionException {
		Dml_table_expression_clauseContext _localctx = new Dml_table_expression_clauseContext(_ctx, getState());
		enterRule(_localctx, 534, RULE_dml_table_expression_clause);
		int _la;
		try {
			setState(3723);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TABLE:
			case THE:
				enterOuterAlt(_localctx, 1);
				{
				setState(3711);
				table_collection_expression();
				}
				break;
			case LEFT_PAREN:
				enterOuterAlt(_localctx, 2);
				{
				setState(3712);
				match(LEFT_PAREN);
				setState(3713);
				select_statement();
				setState(3715);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WITH) {
					{
					setState(3714);
					subquery_restriction_clause();
					}
				}

				setState(3717);
				match(RIGHT_PAREN);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 3);
				{
				setState(3719);
				tableview_name();
				setState(3721);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,437,_ctx) ) {
				case 1:
					{
					setState(3720);
					sample_clause();
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_collection_expressionContext extends ParserRuleContext {
		public TerminalNode TABLE() { return getToken(HanaParser.TABLE, 0); }
		public TerminalNode THE() { return getToken(HanaParser.THE, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(HanaParser.PLUS_SIGN, 0); }
		public Table_collection_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_collection_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_collection_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_collection_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_collection_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_collection_expressionContext table_collection_expression() throws RecognitionException {
		Table_collection_expressionContext _localctx = new Table_collection_expressionContext(_ctx, getState());
		enterRule(_localctx, 536, RULE_table_collection_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3725);
			_la = _input.LA(1);
			if ( !(_la==TABLE || _la==THE) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(3738);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,440,_ctx) ) {
			case 1:
				{
				setState(3726);
				match(LEFT_PAREN);
				setState(3727);
				subquery();
				setState(3728);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(3730);
				match(LEFT_PAREN);
				setState(3731);
				expression();
				setState(3732);
				match(RIGHT_PAREN);
				setState(3736);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,439,_ctx) ) {
				case 1:
					{
					setState(3733);
					match(LEFT_PAREN);
					setState(3734);
					match(PLUS_SIGN);
					setState(3735);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Subquery_restriction_clauseContext extends ParserRuleContext {
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		public TerminalNode READ() { return getToken(HanaParser.READ, 0); }
		public TerminalNode ONLY() { return getToken(HanaParser.ONLY, 0); }
		public TerminalNode CHECK() { return getToken(HanaParser.CHECK, 0); }
		public TerminalNode OPTION() { return getToken(HanaParser.OPTION, 0); }
		public TerminalNode CONSTRAINT() { return getToken(HanaParser.CONSTRAINT, 0); }
		public Constraint_nameContext constraint_name() {
			return getRuleContext(Constraint_nameContext.class,0);
		}
		public Subquery_restriction_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_subquery_restriction_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSubquery_restriction_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSubquery_restriction_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSubquery_restriction_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Subquery_restriction_clauseContext subquery_restriction_clause() throws RecognitionException {
		Subquery_restriction_clauseContext _localctx = new Subquery_restriction_clauseContext(_ctx, getState());
		enterRule(_localctx, 538, RULE_subquery_restriction_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3740);
			match(WITH);
			setState(3749);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case READ:
				{
				setState(3741);
				match(READ);
				setState(3742);
				match(ONLY);
				}
				break;
			case CHECK:
				{
				setState(3743);
				match(CHECK);
				setState(3744);
				match(OPTION);
				setState(3747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CONSTRAINT) {
					{
					setState(3745);
					match(CONSTRAINT);
					setState(3746);
					constraint_name();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sample_clauseContext extends ParserRuleContext {
		public TerminalNode SAMPLE() { return getToken(HanaParser.SAMPLE, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode BLOCK() { return getToken(HanaParser.BLOCK, 0); }
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		public Seed_partContext seed_part() {
			return getRuleContext(Seed_partContext.class,0);
		}
		public Sample_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sample_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSample_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSample_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSample_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sample_clauseContext sample_clause() throws RecognitionException {
		Sample_clauseContext _localctx = new Sample_clauseContext(_ctx, getState());
		enterRule(_localctx, 540, RULE_sample_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3751);
			match(SAMPLE);
			setState(3753);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BLOCK) {
				{
				setState(3752);
				match(BLOCK);
				}
			}

			setState(3755);
			match(LEFT_PAREN);
			setState(3756);
			expression();
			setState(3759);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(3757);
				match(COMMA);
				setState(3758);
				expression();
				}
			}

			setState(3761);
			match(RIGHT_PAREN);
			setState(3763);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,445,_ctx) ) {
			case 1:
				{
				setState(3762);
				seed_part();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Seed_partContext extends ParserRuleContext {
		public TerminalNode SEED() { return getToken(HanaParser.SEED, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Seed_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_seed_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSeed_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSeed_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSeed_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Seed_partContext seed_part() throws RecognitionException {
		Seed_partContext _localctx = new Seed_partContext(_ctx, getState());
		enterRule(_localctx, 542, RULE_seed_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3765);
			match(SEED);
			setState(3766);
			match(LEFT_PAREN);
			setState(3767);
			expression();
			setState(3768);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_expressionContext extends ParserRuleContext {
		public TerminalNode CURSOR() { return getToken(HanaParser.CURSOR, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Cursor_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCursor_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCursor_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCursor_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_expressionContext cursor_expression() throws RecognitionException {
		Cursor_expressionContext _localctx = new Cursor_expressionContext(_ctx, getState());
		enterRule(_localctx, 544, RULE_cursor_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3770);
			match(CURSOR);
			setState(3771);
			match(LEFT_PAREN);
			setState(3772);
			subquery();
			setState(3773);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_listContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Expression_listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExpression_list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExpression_list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExpression_list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_listContext expression_list() throws RecognitionException {
		Expression_listContext _localctx = new Expression_listContext(_ctx, getState());
		enterRule(_localctx, 546, RULE_expression_list);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3775);
			match(LEFT_PAREN);
			setState(3777);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NOT - 257)) | (1L << (NULL - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (PRIOR - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUE - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (UNSIGNED_INTEGER - 513)) | (1L << (APPROXIMATE_NUM_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (PLUS_SIGN - 513)) | (1L << (MINUS_SIGN - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(3776);
				expression();
				}
			}

			setState(3783);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3779);
				match(COMMA);
				setState(3780);
				expression();
				}
				}
				setState(3785);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3786);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConditionContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCondition(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCondition(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCondition(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConditionContext condition() throws RecognitionException {
		ConditionContext _localctx = new ConditionContext(_ctx, getState());
		enterRule(_localctx, 548, RULE_condition);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3788);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_wrapperContext extends ParserRuleContext {
		public Condition_Context condition_() {
			return getRuleContext(Condition_Context.class,0);
		}
		public Condition_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCondition_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCondition_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCondition_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_wrapperContext condition_wrapper() throws RecognitionException {
		Condition_wrapperContext _localctx = new Condition_wrapperContext(_ctx, getState());
		enterRule(_localctx, 550, RULE_condition_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3790);
			condition_(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Condition_Context extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public List<Condition_Context> condition_() {
			return getRuleContexts(Condition_Context.class);
		}
		public Condition_Context condition_(int i) {
			return getRuleContext(Condition_Context.class,i);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public PredicateContext predicate() {
			return getRuleContext(PredicateContext.class,0);
		}
		public TerminalNode OR() { return getToken(HanaParser.OR, 0); }
		public TerminalNode AND() { return getToken(HanaParser.AND, 0); }
		public Condition_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_condition_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCondition_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCondition_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCondition_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Condition_Context condition_() throws RecognitionException {
		return condition_(0);
	}

	private Condition_Context condition_(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Condition_Context _localctx = new Condition_Context(_ctx, _parentState);
		Condition_Context _prevctx = _localctx;
		int _startState = 552;
		enterRecursionRule(_localctx, 552, RULE_condition_, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3800);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,448,_ctx) ) {
			case 1:
				{
				setState(3793);
				match(NOT);
				setState(3794);
				condition_(3);
				}
				break;
			case 2:
				{
				setState(3795);
				match(LEFT_PAREN);
				setState(3796);
				condition_(0);
				setState(3797);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				{
				setState(3799);
				predicate();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3810);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,450,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(3808);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,449,_ctx) ) {
					case 1:
						{
						_localctx = new Condition_Context(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_condition_);
						setState(3802);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(3803);
						match(OR);
						setState(3804);
						condition_(6);
						}
						break;
					case 2:
						{
						_localctx = new Condition_Context(_parentctx, _parentState);
						pushNewRecursionContext(_localctx, _startState, RULE_condition_);
						setState(3805);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(3806);
						match(AND);
						setState(3807);
						condition_(5);
						}
						break;
					}
					} 
				}
				setState(3812);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,450,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class PredicateContext extends ParserRuleContext {
		public Comparison_predicateContext comparison_predicate() {
			return getRuleContext(Comparison_predicateContext.class,0);
		}
		public Range_predicateContext range_predicate() {
			return getRuleContext(Range_predicateContext.class,0);
		}
		public In_predicateContext in_predicate() {
			return getRuleContext(In_predicateContext.class,0);
		}
		public Exist_predicateContext exist_predicate() {
			return getRuleContext(Exist_predicateContext.class,0);
		}
		public Like_predicateContext like_predicate() {
			return getRuleContext(Like_predicateContext.class,0);
		}
		public Null_predicateContext null_predicate() {
			return getRuleContext(Null_predicateContext.class,0);
		}
		public PredicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPredicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPredicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPredicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final PredicateContext predicate() throws RecognitionException {
		PredicateContext _localctx = new PredicateContext(_ctx, getState());
		enterRule(_localctx, 554, RULE_predicate);
		try {
			setState(3819);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,451,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3813);
				comparison_predicate();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3814);
				range_predicate();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3815);
				in_predicate();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3816);
				exist_predicate();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(3817);
				like_predicate();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(3818);
				null_predicate();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Comparison_predicateContext extends ParserRuleContext {
		public Expression_Context expression_() {
			return getRuleContext(Expression_Context.class,0);
		}
		public Relational_operatorContext relational_operator() {
			return getRuleContext(Relational_operatorContext.class,0);
		}
		public Expression__listContext expression__list() {
			return getRuleContext(Expression__listContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode ANY() { return getToken(HanaParser.ANY, 0); }
		public TerminalNode SOME() { return getToken(HanaParser.SOME, 0); }
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public Comparison_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_comparison_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterComparison_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitComparison_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitComparison_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Comparison_predicateContext comparison_predicate() throws RecognitionException {
		Comparison_predicateContext _localctx = new Comparison_predicateContext(_ctx, getState());
		enterRule(_localctx, 556, RULE_comparison_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3821);
			expression_(0);
			setState(3822);
			relational_operator();
			setState(3824);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,452,_ctx) ) {
			case 1:
				{
				setState(3823);
				_la = _input.LA(1);
				if ( !(_la==ALL || _la==ANY || _la==SOME) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(3828);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,453,_ctx) ) {
			case 1:
				{
				setState(3826);
				expression__list();
				}
				break;
			case 2:
				{
				setState(3827);
				subquery();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_operatorContext extends ParserRuleContext {
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(HanaParser.GREATER_THAN_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(HanaParser.LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OR_EQUALS_OP() { return getToken(HanaParser.GREATER_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode LESS_THAN_OR_EQUALS_OP() { return getToken(HanaParser.LESS_THAN_OR_EQUALS_OP, 0); }
		public Relational_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRelational_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRelational_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRelational_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_operatorContext relational_operator() throws RecognitionException {
		Relational_operatorContext _localctx = new Relational_operatorContext(_ctx, getState());
		enterRule(_localctx, 558, RULE_relational_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3830);
			_la = _input.LA(1);
			if ( !(_la==T__4 || _la==T__5 || ((((_la - 543)) & ~0x3f) == 0 && ((1L << (_la - 543)) & ((1L << (LESS_THAN_OR_EQUALS_OP - 543)) | (1L << (LESS_THAN_OP - 543)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 543)) | (1L << (GREATER_THAN_OP - 543)) | (1L << (EQUALS_OP - 543)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Range_predicateContext extends ParserRuleContext {
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		public TerminalNode BETWEEN() { return getToken(HanaParser.BETWEEN, 0); }
		public TerminalNode AND() { return getToken(HanaParser.AND, 0); }
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public Range_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_range_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRange_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRange_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRange_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Range_predicateContext range_predicate() throws RecognitionException {
		Range_predicateContext _localctx = new Range_predicateContext(_ctx, getState());
		enterRule(_localctx, 560, RULE_range_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3832);
			expression_(0);
			setState(3834);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3833);
				match(NOT);
				}
			}

			setState(3836);
			match(BETWEEN);
			setState(3837);
			expression_(0);
			setState(3838);
			match(AND);
			setState(3839);
			expression_(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_predicateContext extends ParserRuleContext {
		public Expression_Context expression_() {
			return getRuleContext(Expression_Context.class,0);
		}
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public Expression__listContext expression__list() {
			return getRuleContext(Expression__listContext.class,0);
		}
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public In_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterIn_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitIn_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitIn_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_predicateContext in_predicate() throws RecognitionException {
		In_predicateContext _localctx = new In_predicateContext(_ctx, getState());
		enterRule(_localctx, 562, RULE_in_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3841);
			expression_(0);
			setState(3843);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3842);
				match(NOT);
				}
			}

			setState(3845);
			match(IN);
			setState(3848);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,456,_ctx) ) {
			case 1:
				{
				setState(3846);
				expression__list();
				}
				break;
			case 2:
				{
				setState(3847);
				subquery();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exist_predicateContext extends ParserRuleContext {
		public TerminalNode EXISTS() { return getToken(HanaParser.EXISTS, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public Exist_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exist_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExist_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExist_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExist_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exist_predicateContext exist_predicate() throws RecognitionException {
		Exist_predicateContext _localctx = new Exist_predicateContext(_ctx, getState());
		enterRule(_localctx, 564, RULE_exist_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3851);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3850);
				match(NOT);
				}
			}

			setState(3853);
			match(EXISTS);
			setState(3854);
			match(LEFT_PAREN);
			setState(3855);
			subquery();
			setState(3856);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_predicateContext extends ParserRuleContext {
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		public TerminalNode LIKE() { return getToken(HanaParser.LIKE, 0); }
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public TerminalNode ESCAPE() { return getToken(HanaParser.ESCAPE, 0); }
		public Like_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLike_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLike_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLike_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_predicateContext like_predicate() throws RecognitionException {
		Like_predicateContext _localctx = new Like_predicateContext(_ctx, getState());
		enterRule(_localctx, 566, RULE_like_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3858);
			expression_(0);
			setState(3860);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3859);
				match(NOT);
				}
			}

			setState(3862);
			match(LIKE);
			setState(3863);
			expression_(0);
			setState(3866);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,459,_ctx) ) {
			case 1:
				{
				setState(3864);
				match(ESCAPE);
				setState(3865);
				expression_(0);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Null_predicateContext extends ParserRuleContext {
		public Expression_Context expression_() {
			return getRuleContext(Expression_Context.class,0);
		}
		public TerminalNode IS() { return getToken(HanaParser.IS, 0); }
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public Null_predicateContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_null_predicate; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNull_predicate(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNull_predicate(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNull_predicate(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Null_predicateContext null_predicate() throws RecognitionException {
		Null_predicateContext _localctx = new Null_predicateContext(_ctx, getState());
		enterRule(_localctx, 568, RULE_null_predicate);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3868);
			expression_(0);
			setState(3869);
			match(IS);
			setState(3871);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==NOT) {
				{
				setState(3870);
				match(NOT);
				}
			}

			setState(3873);
			match(NULL);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression__listContext extends ParserRuleContext {
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Expression__listContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression__list; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExpression__list(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExpression__list(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExpression__list(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression__listContext expression__list() throws RecognitionException {
		Expression__listContext _localctx = new Expression__listContext(_ctx, getState());
		enterRule(_localctx, 570, RULE_expression__list);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3875);
			expression_(0);
			setState(3880);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,461,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(3876);
					match(COMMA);
					setState(3877);
					expression_(0);
					}
					} 
				}
				setState(3882);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,461,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_Context extends ParserRuleContext {
		public Case_expression_Context case_expression_() {
			return getRuleContext(Case_expression_Context.class,0);
		}
		public Function_expression_Context function_expression_() {
			return getRuleContext(Function_expression_Context.class,0);
		}
		public Aggregate_expression_Context aggregate_expression_() {
			return getRuleContext(Aggregate_expression_Context.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode MINUS_SIGN() { return getToken(HanaParser.MINUS_SIGN, 0); }
		public Variable_nameContext variable_name() {
			return getRuleContext(Variable_nameContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public Correlation_nameContext correlation_name() {
			return getRuleContext(Correlation_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		public OperatorContext operator() {
			return getRuleContext(OperatorContext.class,0);
		}
		public Expression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExpression_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExpression_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExpression_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_Context expression_() throws RecognitionException {
		return expression_(0);
	}

	private Expression_Context expression_(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		Expression_Context _localctx = new Expression_Context(_ctx, _parentState);
		Expression_Context _prevctx = _localctx;
		int _startState = 572;
		enterRecursionRule(_localctx, 572, RULE_expression_, _p);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(3905);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,463,_ctx) ) {
			case 1:
				{
				setState(3884);
				case_expression_();
				}
				break;
			case 2:
				{
				setState(3885);
				function_expression_();
				}
				break;
			case 3:
				{
				setState(3886);
				aggregate_expression_();
				}
				break;
			case 4:
				{
				setState(3887);
				match(LEFT_PAREN);
				setState(3888);
				expression_(0);
				setState(3889);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				{
				setState(3891);
				match(LEFT_PAREN);
				setState(3892);
				subquery();
				setState(3893);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				{
				setState(3895);
				match(MINUS_SIGN);
				setState(3896);
				expression_(5);
				}
				break;
			case 7:
				{
				setState(3897);
				variable_name();
				}
				break;
			case 8:
				{
				setState(3898);
				constant();
				}
				break;
			case 9:
				{
				setState(3902);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,462,_ctx) ) {
				case 1:
					{
					setState(3899);
					correlation_name();
					setState(3900);
					match(PERIOD);
					}
					break;
				}
				setState(3904);
				column_name();
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(3913);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,464,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Expression_Context(_parentctx, _parentState);
					pushNewRecursionContext(_localctx, _startState, RULE_expression_);
					setState(3907);
					if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
					setState(3908);
					operator();
					setState(3909);
					expression_(5);
					}
					} 
				}
				setState(3915);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,464,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class Correlation_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Correlation_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_correlation_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCorrelation_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCorrelation_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCorrelation_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Correlation_nameContext correlation_name() throws RecognitionException {
		Correlation_nameContext _localctx = new Correlation_nameContext(_ctx, getState());
		enterRule(_localctx, 574, RULE_correlation_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3916);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class OperatorContext extends ParserRuleContext {
		public TerminalNode PLUS_SIGN() { return getToken(HanaParser.PLUS_SIGN, 0); }
		public TerminalNode MINUS_SIGN() { return getToken(HanaParser.MINUS_SIGN, 0); }
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		public TerminalNode SOLIDUS() { return getToken(HanaParser.SOLIDUS, 0); }
		public TerminalNode CONCATENATION_OP() { return getToken(HanaParser.CONCATENATION_OP, 0); }
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(HanaParser.LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(HanaParser.GREATER_THAN_OP, 0); }
		public TerminalNode LESS_THAN_OR_EQUALS_OP() { return getToken(HanaParser.LESS_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode GREATER_THAN_OR_EQUALS_OP() { return getToken(HanaParser.GREATER_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode AND() { return getToken(HanaParser.AND, 0); }
		public TerminalNode OR() { return getToken(HanaParser.OR, 0); }
		public OperatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOperator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOperator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOperator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final OperatorContext operator() throws RecognitionException {
		OperatorContext _localctx = new OperatorContext(_ctx, getState());
		enterRule(_localctx, 576, RULE_operator);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3918);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << AND))) != 0) || _la==OR || ((((_la - 533)) & ~0x3f) == 0 && ((1L << (_la - 533)) & ((1L << (ASTERISK - 533)) | (1L << (PLUS_SIGN - 533)) | (1L << (MINUS_SIGN - 533)) | (1L << (SOLIDUS - 533)) | (1L << (LESS_THAN_OR_EQUALS_OP - 533)) | (1L << (LESS_THAN_OP - 533)) | (1L << (GREATER_THAN_OR_EQUALS_OP - 533)) | (1L << (GREATER_THAN_OP - 533)) | (1L << (CONCATENATION_OP - 533)) | (1L << (EQUALS_OP - 533)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_expression_Context extends ParserRuleContext {
		public Simple_case_expression_Context simple_case_expression_() {
			return getRuleContext(Simple_case_expression_Context.class,0);
		}
		public Search_case_expression_Context search_case_expression_() {
			return getRuleContext(Search_case_expression_Context.class,0);
		}
		public Case_expression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_expression_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCase_expression_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCase_expression_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCase_expression_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_expression_Context case_expression_() throws RecognitionException {
		Case_expression_Context _localctx = new Case_expression_Context(_ctx, getState());
		enterRule(_localctx, 578, RULE_case_expression_);
		try {
			setState(3922);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,465,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3920);
				simple_case_expression_();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3921);
				search_case_expression_();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_expression_Context extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(HanaParser.CASE, 0); }
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		public List<TerminalNode> WHEN() { return getTokens(HanaParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(HanaParser.WHEN, i);
		}
		public List<TerminalNode> THEN() { return getTokens(HanaParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(HanaParser.THEN, i);
		}
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		public TerminalNode ELSE() { return getToken(HanaParser.ELSE, 0); }
		public Simple_case_expression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_expression_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSimple_case_expression_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSimple_case_expression_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSimple_case_expression_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_expression_Context simple_case_expression_() throws RecognitionException {
		Simple_case_expression_Context _localctx = new Simple_case_expression_Context(_ctx, getState());
		enterRule(_localctx, 580, RULE_simple_case_expression_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3924);
			match(CASE);
			setState(3925);
			expression_(0);
			setState(3926);
			match(WHEN);
			setState(3927);
			expression_(0);
			setState(3928);
			match(THEN);
			setState(3929);
			expression_(0);
			setState(3937);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WHEN) {
				{
				{
				setState(3930);
				match(WHEN);
				setState(3931);
				expression_(0);
				setState(3932);
				match(THEN);
				setState(3933);
				expression_(0);
				}
				}
				setState(3939);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3942);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3940);
				match(ELSE);
				setState(3941);
				expression_(0);
				}
			}

			setState(3944);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Search_case_expression_Context extends ParserRuleContext {
		public TerminalNode CASE() { return getToken(HanaParser.CASE, 0); }
		public List<TerminalNode> WHEN() { return getTokens(HanaParser.WHEN); }
		public TerminalNode WHEN(int i) {
			return getToken(HanaParser.WHEN, i);
		}
		public List<Condition_Context> condition_() {
			return getRuleContexts(Condition_Context.class);
		}
		public Condition_Context condition_(int i) {
			return getRuleContext(Condition_Context.class,i);
		}
		public List<TerminalNode> THEN() { return getTokens(HanaParser.THEN); }
		public TerminalNode THEN(int i) {
			return getToken(HanaParser.THEN, i);
		}
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		public TerminalNode ELSE() { return getToken(HanaParser.ELSE, 0); }
		public Search_case_expression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_search_case_expression_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSearch_case_expression_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSearch_case_expression_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSearch_case_expression_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Search_case_expression_Context search_case_expression_() throws RecognitionException {
		Search_case_expression_Context _localctx = new Search_case_expression_Context(_ctx, getState());
		enterRule(_localctx, 582, RULE_search_case_expression_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3946);
			match(CASE);
			setState(3947);
			match(WHEN);
			setState(3948);
			condition_(0);
			setState(3949);
			match(THEN);
			setState(3950);
			expression_(0);
			setState(3958);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==WHEN) {
				{
				{
				setState(3951);
				match(WHEN);
				setState(3952);
				condition_(0);
				setState(3953);
				match(THEN);
				setState(3954);
				expression_(0);
				}
				}
				setState(3960);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3963);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(3961);
				match(ELSE);
				setState(3962);
				expression_(0);
				}
			}

			setState(3965);
			match(END);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_expression_Context extends ParserRuleContext {
		public Function_nameContext function_name() {
			return getRuleContext(Function_nameContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Expression_Context> expression_() {
			return getRuleContexts(Expression_Context.class);
		}
		public Expression_Context expression_(int i) {
			return getRuleContext(Expression_Context.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Function_expression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_expression_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunction_expression_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunction_expression_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunction_expression_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_expression_Context function_expression_() throws RecognitionException {
		Function_expression_Context _localctx = new Function_expression_Context(_ctx, getState());
		enterRule(_localctx, 584, RULE_function_expression_);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(3967);
			function_name();
			setState(3968);
			match(LEFT_PAREN);
			setState(3969);
			expression_(0);
			setState(3974);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(3970);
				match(COMMA);
				setState(3971);
				expression_(0);
				}
				}
				setState(3976);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(3977);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_expression_Context extends ParserRuleContext {
		public TerminalNode COUNT() { return getToken(HanaParser.COUNT, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode DISTINCT() { return getToken(HanaParser.DISTINCT, 0); }
		public Expression__listContext expression__list() {
			return getRuleContext(Expression__listContext.class,0);
		}
		public Agg_nameContext agg_name() {
			return getRuleContext(Agg_nameContext.class,0);
		}
		public Expression_Context expression_() {
			return getRuleContext(Expression_Context.class,0);
		}
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public TerminalNode STRING_AGG() { return getToken(HanaParser.STRING_AGG, 0); }
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		public DelimiterContext delimiter() {
			return getRuleContext(DelimiterContext.class,0);
		}
		public Aggregate_order_by_clauseContext aggregate_order_by_clause() {
			return getRuleContext(Aggregate_order_by_clauseContext.class,0);
		}
		public Aggregate_expression_Context(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_expression_; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAggregate_expression_(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAggregate_expression_(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAggregate_expression_(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_expression_Context aggregate_expression_() throws RecognitionException {
		Aggregate_expression_Context _localctx = new Aggregate_expression_Context(_ctx, getState());
		enterRule(_localctx, 586, RULE_aggregate_expression_);
		int _la;
		try {
			setState(4009);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,474,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(3979);
				match(COUNT);
				setState(3980);
				match(LEFT_PAREN);
				setState(3981);
				match(ASTERISK);
				setState(3982);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(3983);
				match(COUNT);
				setState(3984);
				match(LEFT_PAREN);
				setState(3985);
				match(DISTINCT);
				setState(3986);
				expression__list();
				setState(3987);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(3989);
				agg_name();
				setState(3990);
				match(LEFT_PAREN);
				setState(3992);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,471,_ctx) ) {
				case 1:
					{
					setState(3991);
					_la = _input.LA(1);
					if ( !(_la==ALL || _la==DISTINCT) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(3994);
				expression_(0);
				setState(3995);
				match(RIGHT_PAREN);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(3997);
				match(STRING_AGG);
				setState(3998);
				match(LEFT_PAREN);
				setState(3999);
				expression_(0);
				setState(4002);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4000);
					match(COMMA);
					setState(4001);
					delimiter();
					}
				}

				setState(4005);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4004);
					aggregate_order_by_clause();
					}
				}

				setState(4007);
				match(RIGHT_PAREN);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Agg_nameContext extends ParserRuleContext {
		public TerminalNode CORR() { return getToken(HanaParser.CORR, 0); }
		public TerminalNode CORR_SPEARMAN() { return getToken(HanaParser.CORR_SPEARMAN, 0); }
		public TerminalNode COUNT() { return getToken(HanaParser.COUNT, 0); }
		public TerminalNode MIN() { return getToken(HanaParser.MIN, 0); }
		public TerminalNode MEDIAN() { return getToken(HanaParser.MEDIAN, 0); }
		public TerminalNode MAX() { return getToken(HanaParser.MAX, 0); }
		public TerminalNode SUM() { return getToken(HanaParser.SUM, 0); }
		public TerminalNode AVG() { return getToken(HanaParser.AVG, 0); }
		public TerminalNode STDDEV() { return getToken(HanaParser.STDDEV, 0); }
		public TerminalNode VAR() { return getToken(HanaParser.VAR, 0); }
		public TerminalNode STDDEV_POP() { return getToken(HanaParser.STDDEV_POP, 0); }
		public TerminalNode VAR_POP() { return getToken(HanaParser.VAR_POP, 0); }
		public TerminalNode STDDEV_SAMP() { return getToken(HanaParser.STDDEV_SAMP, 0); }
		public TerminalNode VAR_SAMP() { return getToken(HanaParser.VAR_SAMP, 0); }
		public Agg_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_agg_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAgg_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAgg_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAgg_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Agg_nameContext agg_name() throws RecognitionException {
		Agg_nameContext _localctx = new Agg_nameContext(_ctx, getState());
		enterRule(_localctx, 588, RULE_agg_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4011);
			_la = _input.LA(1);
			if ( !(_la==COUNT || ((((_la - 484)) & ~0x3f) == 0 && ((1L << (_la - 484)) & ((1L << (CORR_SPEARMAN - 484)) | (1L << (VAR - 484)) | (1L << (STDDEV_POP - 484)) | (1L << (VAR_POP - 484)) | (1L << (STDDEV_SAMP - 484)) | (1L << (VAR_SAMP - 484)) | (1L << (AVG - 484)) | (1L << (CORR - 484)) | (1L << (MAX - 484)) | (1L << (MEDIAN - 484)) | (1L << (MIN - 484)) | (1L << (SUM - 484)) | (1L << (STDDEV - 484)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DelimiterContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public DelimiterContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_delimiter; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDelimiter(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDelimiter(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDelimiter(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DelimiterContext delimiter() throws RecognitionException {
		DelimiterContext _localctx = new DelimiterContext(_ctx, getState());
		enterRule(_localctx, 590, RULE_delimiter);
		try {
			setState(4015);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(4013);
				id_expression();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(4014);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_order_by_clauseContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		public Expression_Context expression_() {
			return getRuleContext(Expression_Context.class,0);
		}
		public TerminalNode NULLS() { return getToken(HanaParser.NULLS, 0); }
		public TerminalNode FIRST() { return getToken(HanaParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(HanaParser.LAST, 0); }
		public TerminalNode ASC() { return getToken(HanaParser.ASC, 0); }
		public TerminalNode DESC() { return getToken(HanaParser.DESC, 0); }
		public Aggregate_order_by_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_order_by_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAggregate_order_by_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAggregate_order_by_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAggregate_order_by_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_order_by_clauseContext aggregate_order_by_clause() throws RecognitionException {
		Aggregate_order_by_clauseContext _localctx = new Aggregate_order_by_clauseContext(_ctx, getState());
		enterRule(_localctx, 592, RULE_aggregate_order_by_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4017);
			match(ORDER);
			setState(4018);
			match(BY);
			setState(4019);
			expression_(0);
			setState(4021);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ASC || _la==DESC) {
				{
				setState(4020);
				_la = _input.LA(1);
				if ( !(_la==ASC || _la==DESC) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(4027);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,477,_ctx) ) {
			case 1:
				{
				setState(4023);
				match(NULLS);
				setState(4024);
				match(FIRST);
				}
				break;
			case 2:
				{
				setState(4025);
				match(NULLS);
				setState(4026);
				match(LAST);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Cursor_expressionContext cursor_expression() {
			return getRuleContext(Cursor_expressionContext.class,0);
		}
		public List<Logical_and_expressionContext> logical_and_expression() {
			return getRuleContexts(Logical_and_expressionContext.class);
		}
		public Logical_and_expressionContext logical_and_expression(int i) {
			return getRuleContext(Logical_and_expressionContext.class,i);
		}
		public List<TerminalNode> OR() { return getTokens(HanaParser.OR); }
		public TerminalNode OR(int i) {
			return getToken(HanaParser.OR, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 594, RULE_expression);
		try {
			int _alt;
			setState(4038);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,479,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4029);
				cursor_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4030);
				logical_and_expression();
				setState(4035);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,478,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4031);
						match(OR);
						setState(4032);
						logical_and_expression();
						}
						} 
					}
					setState(4037);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,478,_ctx);
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_wrapperContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Expression_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExpression_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExpression_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExpression_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_wrapperContext expression_wrapper() throws RecognitionException {
		Expression_wrapperContext _localctx = new Expression_wrapperContext(_ctx, getState());
		enterRule(_localctx, 596, RULE_expression_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4040);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Logical_and_expressionContext extends ParserRuleContext {
		public List<Negated_expressionContext> negated_expression() {
			return getRuleContexts(Negated_expressionContext.class);
		}
		public Negated_expressionContext negated_expression(int i) {
			return getRuleContext(Negated_expressionContext.class,i);
		}
		public List<TerminalNode> AND() { return getTokens(HanaParser.AND); }
		public TerminalNode AND(int i) {
			return getToken(HanaParser.AND, i);
		}
		public Logical_and_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_logical_and_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLogical_and_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLogical_and_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLogical_and_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Logical_and_expressionContext logical_and_expression() throws RecognitionException {
		Logical_and_expressionContext _localctx = new Logical_and_expressionContext(_ctx, getState());
		enterRule(_localctx, 598, RULE_logical_and_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4042);
			negated_expression();
			setState(4047);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,480,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4043);
					match(AND);
					setState(4044);
					negated_expression();
					}
					} 
				}
				setState(4049);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,480,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Negated_expressionContext extends ParserRuleContext {
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public Negated_expressionContext negated_expression() {
			return getRuleContext(Negated_expressionContext.class,0);
		}
		public Equality_expressionContext equality_expression() {
			return getRuleContext(Equality_expressionContext.class,0);
		}
		public Negated_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_negated_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNegated_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNegated_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNegated_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Negated_expressionContext negated_expression() throws RecognitionException {
		Negated_expressionContext _localctx = new Negated_expressionContext(_ctx, getState());
		enterRule(_localctx, 600, RULE_negated_expression);
		try {
			setState(4053);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT:
				enterOuterAlt(_localctx, 1);
				{
				setState(4050);
				match(NOT);
				setState(4051);
				negated_expression();
				}
				break;
			case T__6:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(4052);
				equality_expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Equality_expressionContext extends ParserRuleContext {
		public Multiset_expressionContext multiset_expression() {
			return getRuleContext(Multiset_expressionContext.class,0);
		}
		public List<TerminalNode> IS() { return getTokens(HanaParser.IS); }
		public TerminalNode IS(int i) {
			return getToken(HanaParser.IS, i);
		}
		public List<TerminalNode> NULL() { return getTokens(HanaParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(HanaParser.NULL, i);
		}
		public List<TerminalNode> NAN() { return getTokens(HanaParser.NAN); }
		public TerminalNode NAN(int i) {
			return getToken(HanaParser.NAN, i);
		}
		public List<TerminalNode> PRESENT() { return getTokens(HanaParser.PRESENT); }
		public TerminalNode PRESENT(int i) {
			return getToken(HanaParser.PRESENT, i);
		}
		public List<TerminalNode> INFINITE() { return getTokens(HanaParser.INFINITE); }
		public TerminalNode INFINITE(int i) {
			return getToken(HanaParser.INFINITE, i);
		}
		public List<TerminalNode> A_LETTER() { return getTokens(HanaParser.A_LETTER); }
		public TerminalNode A_LETTER(int i) {
			return getToken(HanaParser.A_LETTER, i);
		}
		public List<TerminalNode> SET() { return getTokens(HanaParser.SET); }
		public TerminalNode SET(int i) {
			return getToken(HanaParser.SET, i);
		}
		public List<TerminalNode> EMPTY() { return getTokens(HanaParser.EMPTY); }
		public TerminalNode EMPTY(int i) {
			return getToken(HanaParser.EMPTY, i);
		}
		public List<TerminalNode> OF() { return getTokens(HanaParser.OF); }
		public TerminalNode OF(int i) {
			return getToken(HanaParser.OF, i);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		public List<Type_specContext> type_spec() {
			return getRuleContexts(Type_specContext.class);
		}
		public Type_specContext type_spec(int i) {
			return getRuleContext(Type_specContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		public List<TerminalNode> NOT() { return getTokens(HanaParser.NOT); }
		public TerminalNode NOT(int i) {
			return getToken(HanaParser.NOT, i);
		}
		public List<TerminalNode> TYPE() { return getTokens(HanaParser.TYPE); }
		public TerminalNode TYPE(int i) {
			return getToken(HanaParser.TYPE, i);
		}
		public List<TerminalNode> ONLY() { return getTokens(HanaParser.ONLY); }
		public TerminalNode ONLY(int i) {
			return getToken(HanaParser.ONLY, i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Equality_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_equality_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterEquality_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitEquality_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitEquality_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Equality_expressionContext equality_expression() throws RecognitionException {
		Equality_expressionContext _localctx = new Equality_expressionContext(_ctx, getState());
		enterRule(_localctx, 602, RULE_equality_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4055);
			multiset_expression();
			setState(4089);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4056);
					match(IS);
					setState(4058);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NOT) {
						{
						setState(4057);
						match(NOT);
						}
					}

					setState(4085);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case NULL:
						{
						setState(4060);
						match(NULL);
						}
						break;
					case NAN:
						{
						setState(4061);
						match(NAN);
						}
						break;
					case PRESENT:
						{
						setState(4062);
						match(PRESENT);
						}
						break;
					case INFINITE:
						{
						setState(4063);
						match(INFINITE);
						}
						break;
					case A_LETTER:
						{
						setState(4064);
						match(A_LETTER);
						setState(4065);
						match(SET);
						}
						break;
					case EMPTY:
						{
						setState(4066);
						match(EMPTY);
						}
						break;
					case OF:
						{
						setState(4067);
						match(OF);
						setState(4069);
						_errHandler.sync(this);
						_la = _input.LA(1);
						if (_la==TYPE) {
							{
							setState(4068);
							match(TYPE);
							}
						}

						setState(4071);
						match(LEFT_PAREN);
						setState(4073);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,484,_ctx) ) {
						case 1:
							{
							setState(4072);
							match(ONLY);
							}
							break;
						}
						setState(4075);
						type_spec();
						setState(4080);
						_errHandler.sync(this);
						_la = _input.LA(1);
						while (_la==COMMA) {
							{
							{
							setState(4076);
							match(COMMA);
							setState(4077);
							type_spec();
							}
							}
							setState(4082);
							_errHandler.sync(this);
							_la = _input.LA(1);
						}
						setState(4083);
						match(RIGHT_PAREN);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					} 
				}
				setState(4091);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,487,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_expressionContext extends ParserRuleContext {
		public Relational_expressionContext relational_expression() {
			return getRuleContext(Relational_expressionContext.class,0);
		}
		public Multiset_typeContext multiset_type() {
			return getRuleContext(Multiset_typeContext.class,0);
		}
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		public Multiset_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMultiset_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMultiset_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMultiset_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_expressionContext multiset_expression() throws RecognitionException {
		Multiset_expressionContext _localctx = new Multiset_expressionContext(_ctx, getState());
		enterRule(_localctx, 604, RULE_multiset_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4092);
			relational_expression();
			setState(4099);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,489,_ctx) ) {
			case 1:
				{
				setState(4093);
				multiset_type();
				setState(4095);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==OF) {
					{
					setState(4094);
					match(OF);
					}
				}

				setState(4097);
				concatenation();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiset_typeContext extends ParserRuleContext {
		public TerminalNode MEMBER() { return getToken(HanaParser.MEMBER, 0); }
		public TerminalNode SUBMULTISET() { return getToken(HanaParser.SUBMULTISET, 0); }
		public Multiset_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiset_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMultiset_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMultiset_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMultiset_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiset_typeContext multiset_type() throws RecognitionException {
		Multiset_typeContext _localctx = new Multiset_typeContext(_ctx, getState());
		enterRule(_localctx, 606, RULE_multiset_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4101);
			_la = _input.LA(1);
			if ( !(_la==MEMBER || _la==SUBMULTISET) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expressionContext extends ParserRuleContext {
		public List<Compound_expressionContext> compound_expression() {
			return getRuleContexts(Compound_expressionContext.class);
		}
		public Compound_expressionContext compound_expression(int i) {
			return getRuleContext(Compound_expressionContext.class,i);
		}
		public List<Relational_expression_operatorContext> relational_expression_operator() {
			return getRuleContexts(Relational_expression_operatorContext.class);
		}
		public Relational_expression_operatorContext relational_expression_operator(int i) {
			return getRuleContext(Relational_expression_operatorContext.class,i);
		}
		public Relational_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRelational_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRelational_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRelational_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_expressionContext relational_expression() throws RecognitionException {
		Relational_expressionContext _localctx = new Relational_expressionContext(_ctx, getState());
		enterRule(_localctx, 608, RULE_relational_expression);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4103);
			compound_expression();
			setState(4109);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4104);
					relational_expression_operator();
					setState(4105);
					compound_expression();
					}
					} 
				}
				setState(4111);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,490,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Relational_expression_operatorContext extends ParserRuleContext {
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public Not_equal_opContext not_equal_op() {
			return getRuleContext(Not_equal_opContext.class,0);
		}
		public TerminalNode LESS_THAN_OP() { return getToken(HanaParser.LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(HanaParser.GREATER_THAN_OP, 0); }
		public Less_than_or_equals_opContext less_than_or_equals_op() {
			return getRuleContext(Less_than_or_equals_opContext.class,0);
		}
		public Greater_than_or_equals_opContext greater_than_or_equals_op() {
			return getRuleContext(Greater_than_or_equals_opContext.class,0);
		}
		public Relational_expression_operatorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_relational_expression_operator; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRelational_expression_operator(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRelational_expression_operator(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRelational_expression_operator(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Relational_expression_operatorContext relational_expression_operator() throws RecognitionException {
		Relational_expression_operatorContext _localctx = new Relational_expression_operatorContext(_ctx, getState());
		enterRule(_localctx, 610, RULE_relational_expression_operator);
		try {
			setState(4118);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,491,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4112);
				match(EQUALS_OP);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4113);
				not_equal_op();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4114);
				match(LESS_THAN_OP);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4115);
				match(GREATER_THAN_OP);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4116);
				less_than_or_equals_op();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4117);
				greater_than_or_equals_op();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Compound_expressionContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public In_elementsContext in_elements() {
			return getRuleContext(In_elementsContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(HanaParser.BETWEEN, 0); }
		public Between_elementsContext between_elements() {
			return getRuleContext(Between_elementsContext.class,0);
		}
		public Like_typeContext like_type() {
			return getRuleContext(Like_typeContext.class,0);
		}
		public TerminalNode NOT() { return getToken(HanaParser.NOT, 0); }
		public Like_escape_partContext like_escape_part() {
			return getRuleContext(Like_escape_partContext.class,0);
		}
		public Compound_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_compound_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCompound_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCompound_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCompound_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Compound_expressionContext compound_expression() throws RecognitionException {
		Compound_expressionContext _localctx = new Compound_expressionContext(_ctx, getState());
		enterRule(_localctx, 612, RULE_compound_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4120);
			concatenation();
			setState(4135);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,495,_ctx) ) {
			case 1:
				{
				setState(4122);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NOT) {
					{
					setState(4121);
					match(NOT);
					}
				}

				setState(4133);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case IN:
					{
					setState(4124);
					match(IN);
					setState(4125);
					in_elements();
					}
					break;
				case BETWEEN:
					{
					setState(4126);
					match(BETWEEN);
					setState(4127);
					between_elements();
					}
					break;
				case LIKE:
				case LIKE2:
				case LIKE4:
				case LIKEC:
					{
					setState(4128);
					like_type();
					setState(4129);
					concatenation();
					setState(4131);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,493,_ctx) ) {
					case 1:
						{
						setState(4130);
						like_escape_part();
						}
						break;
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_typeContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(HanaParser.LIKE, 0); }
		public TerminalNode LIKEC() { return getToken(HanaParser.LIKEC, 0); }
		public TerminalNode LIKE2() { return getToken(HanaParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(HanaParser.LIKE4, 0); }
		public Like_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLike_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLike_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLike_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_typeContext like_type() throws RecognitionException {
		Like_typeContext _localctx = new Like_typeContext(_ctx, getState());
		enterRule(_localctx, 614, RULE_like_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4137);
			_la = _input.LA(1);
			if ( !(((((_la - 208)) & ~0x3f) == 0 && ((1L << (_la - 208)) & ((1L << (LIKE - 208)) | (1L << (LIKE2 - 208)) | (1L << (LIKE4 - 208)) | (1L << (LIKEC - 208)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Like_escape_partContext extends ParserRuleContext {
		public TerminalNode ESCAPE() { return getToken(HanaParser.ESCAPE, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Like_escape_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_like_escape_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLike_escape_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLike_escape_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLike_escape_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Like_escape_partContext like_escape_part() throws RecognitionException {
		Like_escape_partContext _localctx = new Like_escape_partContext(_ctx, getState());
		enterRule(_localctx, 616, RULE_like_escape_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4139);
			match(ESCAPE);
			setState(4140);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class In_elementsContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public In_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_in_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterIn_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitIn_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitIn_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final In_elementsContext in_elements() throws RecognitionException {
		In_elementsContext _localctx = new In_elementsContext(_ctx, getState());
		enterRule(_localctx, 618, RULE_in_elements);
		int _la;
		try {
			setState(4160);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,497,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4142);
				match(LEFT_PAREN);
				setState(4143);
				subquery();
				setState(4144);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4146);
				match(LEFT_PAREN);
				setState(4147);
				concatenation_wrapper();
				setState(4152);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4148);
					match(COMMA);
					setState(4149);
					concatenation_wrapper();
					}
					}
					setState(4154);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4155);
				match(RIGHT_PAREN);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4157);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4158);
				bind_variable();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4159);
				general_element();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Between_elementsContext extends ParserRuleContext {
		public List<ConcatenationContext> concatenation() {
			return getRuleContexts(ConcatenationContext.class);
		}
		public ConcatenationContext concatenation(int i) {
			return getRuleContext(ConcatenationContext.class,i);
		}
		public TerminalNode AND() { return getToken(HanaParser.AND, 0); }
		public Between_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_between_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBetween_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBetween_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBetween_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Between_elementsContext between_elements() throws RecognitionException {
		Between_elementsContext _localctx = new Between_elementsContext(_ctx, getState());
		enterRule(_localctx, 620, RULE_between_elements);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4162);
			concatenation();
			setState(4163);
			match(AND);
			setState(4164);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConcatenationContext extends ParserRuleContext {
		public List<Additive_expressionContext> additive_expression() {
			return getRuleContexts(Additive_expressionContext.class);
		}
		public Additive_expressionContext additive_expression(int i) {
			return getRuleContext(Additive_expressionContext.class,i);
		}
		public List<Concatenation_opContext> concatenation_op() {
			return getRuleContexts(Concatenation_opContext.class);
		}
		public Concatenation_opContext concatenation_op(int i) {
			return getRuleContext(Concatenation_opContext.class,i);
		}
		public ConcatenationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConcatenation(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConcatenation(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConcatenation(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConcatenationContext concatenation() throws RecognitionException {
		ConcatenationContext _localctx = new ConcatenationContext(_ctx, getState());
		enterRule(_localctx, 622, RULE_concatenation);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4166);
			additive_expression();
			setState(4172);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,498,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4167);
					concatenation_op();
					setState(4168);
					additive_expression();
					}
					} 
				}
				setState(4174);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,498,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_wrapperContext extends ParserRuleContext {
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Concatenation_wrapperContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_wrapper; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConcatenation_wrapper(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConcatenation_wrapper(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConcatenation_wrapper(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Concatenation_wrapperContext concatenation_wrapper() throws RecognitionException {
		Concatenation_wrapperContext _localctx = new Concatenation_wrapperContext(_ctx, getState());
		enterRule(_localctx, 624, RULE_concatenation_wrapper);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4175);
			concatenation();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Additive_expressionContext extends ParserRuleContext {
		public List<Multiply_expressionContext> multiply_expression() {
			return getRuleContexts(Multiply_expressionContext.class);
		}
		public Multiply_expressionContext multiply_expression(int i) {
			return getRuleContext(Multiply_expressionContext.class,i);
		}
		public List<TerminalNode> PLUS_SIGN() { return getTokens(HanaParser.PLUS_SIGN); }
		public TerminalNode PLUS_SIGN(int i) {
			return getToken(HanaParser.PLUS_SIGN, i);
		}
		public List<TerminalNode> MINUS_SIGN() { return getTokens(HanaParser.MINUS_SIGN); }
		public TerminalNode MINUS_SIGN(int i) {
			return getToken(HanaParser.MINUS_SIGN, i);
		}
		public Additive_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_additive_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAdditive_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAdditive_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAdditive_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Additive_expressionContext additive_expression() throws RecognitionException {
		Additive_expressionContext _localctx = new Additive_expressionContext(_ctx, getState());
		enterRule(_localctx, 626, RULE_additive_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4177);
			multiply_expression();
			setState(4182);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,499,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4178);
					_la = _input.LA(1);
					if ( !(_la==PLUS_SIGN || _la==MINUS_SIGN) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4179);
					multiply_expression();
					}
					} 
				}
				setState(4184);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,499,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multiply_expressionContext extends ParserRuleContext {
		public List<Datetime_expressionContext> datetime_expression() {
			return getRuleContexts(Datetime_expressionContext.class);
		}
		public Datetime_expressionContext datetime_expression(int i) {
			return getRuleContext(Datetime_expressionContext.class,i);
		}
		public List<TerminalNode> ASTERISK() { return getTokens(HanaParser.ASTERISK); }
		public TerminalNode ASTERISK(int i) {
			return getToken(HanaParser.ASTERISK, i);
		}
		public List<TerminalNode> SOLIDUS() { return getTokens(HanaParser.SOLIDUS); }
		public TerminalNode SOLIDUS(int i) {
			return getToken(HanaParser.SOLIDUS, i);
		}
		public Multiply_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multiply_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMultiply_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMultiply_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMultiply_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multiply_expressionContext multiply_expression() throws RecognitionException {
		Multiply_expressionContext _localctx = new Multiply_expressionContext(_ctx, getState());
		enterRule(_localctx, 628, RULE_multiply_expression);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4185);
			datetime_expression();
			setState(4190);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,500,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(4186);
					_la = _input.LA(1);
					if ( !(_la==ASTERISK || _la==SOLIDUS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4187);
					datetime_expression();
					}
					} 
				}
				setState(4192);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,500,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Datetime_expressionContext extends ParserRuleContext {
		public Model_expressionContext model_expression() {
			return getRuleContext(Model_expressionContext.class,0);
		}
		public TerminalNode AT() { return getToken(HanaParser.AT, 0); }
		public Interval_expressionContext interval_expression() {
			return getRuleContext(Interval_expressionContext.class,0);
		}
		public TerminalNode LOCAL() { return getToken(HanaParser.LOCAL, 0); }
		public TerminalNode TIME() { return getToken(HanaParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(HanaParser.ZONE, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Datetime_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datetime_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDatetime_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDatetime_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDatetime_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Datetime_expressionContext datetime_expression() throws RecognitionException {
		Datetime_expressionContext _localctx = new Datetime_expressionContext(_ctx, getState());
		enterRule(_localctx, 630, RULE_datetime_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4193);
			model_expression();
			setState(4202);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,502,_ctx) ) {
			case 1:
				{
				setState(4194);
				match(AT);
				setState(4199);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case LOCAL:
					{
					setState(4195);
					match(LOCAL);
					}
					break;
				case TIME:
					{
					setState(4196);
					match(TIME);
					setState(4197);
					match(ZONE);
					setState(4198);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				{
				setState(4201);
				interval_expression();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Interval_expressionContext extends ParserRuleContext {
		public TerminalNode DAY() { return getToken(HanaParser.DAY, 0); }
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		public TerminalNode SECOND() { return getToken(HanaParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		public TerminalNode YEAR() { return getToken(HanaParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(HanaParser.MONTH, 0); }
		public Interval_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_interval_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterInterval_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitInterval_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitInterval_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Interval_expressionContext interval_expression() throws RecognitionException {
		Interval_expressionContext _localctx = new Interval_expressionContext(_ctx, getState());
		enterRule(_localctx, 632, RULE_interval_expression);
		int _la;
		try {
			setState(4228);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case DAY:
				enterOuterAlt(_localctx, 1);
				{
				setState(4204);
				match(DAY);
				setState(4209);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4205);
					match(LEFT_PAREN);
					setState(4206);
					concatenation_wrapper();
					setState(4207);
					match(RIGHT_PAREN);
					}
				}

				setState(4211);
				match(TO);
				setState(4212);
				match(SECOND);
				setState(4217);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,504,_ctx) ) {
				case 1:
					{
					setState(4213);
					match(LEFT_PAREN);
					setState(4214);
					concatenation_wrapper();
					setState(4215);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(4219);
				match(YEAR);
				setState(4224);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(4220);
					match(LEFT_PAREN);
					setState(4221);
					concatenation_wrapper();
					setState(4222);
					match(RIGHT_PAREN);
					}
				}

				setState(4226);
				match(TO);
				setState(4227);
				match(MONTH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expressionContext extends ParserRuleContext {
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode LEFT_BRACKET() { return getToken(HanaParser.LEFT_BRACKET, 0); }
		public Model_expression_elementContext model_expression_element() {
			return getRuleContext(Model_expression_elementContext.class,0);
		}
		public TerminalNode RIGHT_BRACKET() { return getToken(HanaParser.RIGHT_BRACKET, 0); }
		public Model_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expressionContext model_expression() throws RecognitionException {
		Model_expressionContext _localctx = new Model_expressionContext(_ctx, getState());
		enterRule(_localctx, 634, RULE_model_expression);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4230);
			unary_expression();
			setState(4235);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,507,_ctx) ) {
			case 1:
				{
				setState(4231);
				match(LEFT_BRACKET);
				setState(4232);
				model_expression_element();
				setState(4233);
				match(RIGHT_BRACKET);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Model_expression_elementContext extends ParserRuleContext {
		public List<TerminalNode> ANY() { return getTokens(HanaParser.ANY); }
		public TerminalNode ANY(int i) {
			return getToken(HanaParser.ANY, i);
		}
		public List<Condition_wrapperContext> condition_wrapper() {
			return getRuleContexts(Condition_wrapperContext.class);
		}
		public Condition_wrapperContext condition_wrapper(int i) {
			return getRuleContext(Condition_wrapperContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public List<Single_column_for_loopContext> single_column_for_loop() {
			return getRuleContexts(Single_column_for_loopContext.class);
		}
		public Single_column_for_loopContext single_column_for_loop(int i) {
			return getRuleContext(Single_column_for_loopContext.class,i);
		}
		public Multi_column_for_loopContext multi_column_for_loop() {
			return getRuleContext(Multi_column_for_loopContext.class,0);
		}
		public Model_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_model_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterModel_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitModel_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitModel_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Model_expression_elementContext model_expression_element() throws RecognitionException {
		Model_expression_elementContext _localctx = new Model_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 636, RULE_model_expression_element);
		int _la;
		try {
			setState(4260);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,512,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4239);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,508,_ctx) ) {
				case 1:
					{
					setState(4237);
					match(ANY);
					}
					break;
				case 2:
					{
					setState(4238);
					condition_wrapper();
					}
					break;
				}
				setState(4248);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4241);
					match(COMMA);
					setState(4244);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,509,_ctx) ) {
					case 1:
						{
						setState(4242);
						match(ANY);
						}
						break;
					case 2:
						{
						setState(4243);
						condition_wrapper();
						}
						break;
					}
					}
					}
					setState(4250);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4251);
				single_column_for_loop();
				setState(4256);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4252);
					match(COMMA);
					setState(4253);
					single_column_for_loop();
					}
					}
					setState(4258);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4259);
				multi_column_for_loop();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Single_column_for_loopContext extends ParserRuleContext {
		public ExpressionContext ex1;
		public ExpressionContext ex2;
		public ExpressionContext ex3;
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode FROM() { return getToken(HanaParser.FROM, 0); }
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		public For_increment_decrement_typeContext for_increment_decrement_type() {
			return getRuleContext(For_increment_decrement_typeContext.class,0);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public For_like_partContext for_like_part() {
			return getRuleContext(For_like_partContext.class,0);
		}
		public Single_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_single_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSingle_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSingle_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSingle_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Single_column_for_loopContext single_column_for_loop() throws RecognitionException {
		Single_column_for_loopContext _localctx = new Single_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 638, RULE_single_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4262);
			match(FOR);
			setState(4263);
			column_name();
			setState(4276);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case IN:
				{
				setState(4264);
				match(IN);
				setState(4265);
				expression_list();
				}
				break;
			case FROM:
			case LIKE:
				{
				setState(4267);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LIKE) {
					{
					setState(4266);
					for_like_part();
					}
				}

				setState(4269);
				match(FROM);
				setState(4270);
				((Single_column_for_loopContext)_localctx).ex1 = expression();
				setState(4271);
				match(TO);
				setState(4272);
				((Single_column_for_loopContext)_localctx).ex2 = expression();
				setState(4273);
				for_increment_decrement_type();
				setState(4274);
				((Single_column_for_loopContext)_localctx).ex3 = expression();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_like_partContext extends ParserRuleContext {
		public TerminalNode LIKE() { return getToken(HanaParser.LIKE, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public For_like_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_like_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFor_like_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFor_like_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFor_like_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_like_partContext for_like_part() throws RecognitionException {
		For_like_partContext _localctx = new For_like_partContext(_ctx, getState());
		enterRule(_localctx, 640, RULE_for_like_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4278);
			match(LIKE);
			setState(4279);
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class For_increment_decrement_typeContext extends ParserRuleContext {
		public TerminalNode INCREMENT() { return getToken(HanaParser.INCREMENT, 0); }
		public TerminalNode DECREMENT() { return getToken(HanaParser.DECREMENT, 0); }
		public For_increment_decrement_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_for_increment_decrement_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFor_increment_decrement_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFor_increment_decrement_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFor_increment_decrement_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final For_increment_decrement_typeContext for_increment_decrement_type() throws RecognitionException {
		For_increment_decrement_typeContext _localctx = new For_increment_decrement_typeContext(_ctx, getState());
		enterRule(_localctx, 642, RULE_for_increment_decrement_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4281);
			_la = _input.LA(1);
			if ( !(_la==DECREMENT || _la==INCREMENT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Multi_column_for_loopContext extends ParserRuleContext {
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		public List<Column_nameContext> column_name() {
			return getRuleContexts(Column_nameContext.class);
		}
		public Column_nameContext column_name(int i) {
			return getRuleContext(Column_nameContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public List<Expression_listContext> expression_list() {
			return getRuleContexts(Expression_listContext.class);
		}
		public Expression_listContext expression_list(int i) {
			return getRuleContext(Expression_listContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Multi_column_for_loopContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_multi_column_for_loop; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMulti_column_for_loop(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMulti_column_for_loop(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMulti_column_for_loop(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Multi_column_for_loopContext multi_column_for_loop() throws RecognitionException {
		Multi_column_for_loopContext _localctx = new Multi_column_for_loopContext(_ctx, getState());
		enterRule(_localctx, 644, RULE_multi_column_for_loop);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4283);
			match(FOR);
			setState(4284);
			match(LEFT_PAREN);
			setState(4285);
			column_name();
			setState(4290);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4286);
				match(COMMA);
				setState(4287);
				column_name();
				}
				}
				setState(4292);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4293);
			match(RIGHT_PAREN);
			setState(4294);
			match(IN);
			setState(4295);
			match(LEFT_PAREN);
			setState(4308);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,517,_ctx) ) {
			case 1:
				{
				setState(4296);
				subquery();
				}
				break;
			case 2:
				{
				setState(4297);
				match(LEFT_PAREN);
				setState(4298);
				expression_list();
				setState(4303);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4299);
					match(COMMA);
					setState(4300);
					expression_list();
					}
					}
					setState(4305);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4306);
				match(RIGHT_PAREN);
				}
				break;
			}
			setState(4310);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Unary_expressionContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(HanaParser.MINUS_SIGN, 0); }
		public Unary_expressionContext unary_expression() {
			return getRuleContext(Unary_expressionContext.class,0);
		}
		public TerminalNode PLUS_SIGN() { return getToken(HanaParser.PLUS_SIGN, 0); }
		public TerminalNode PRIOR() { return getToken(HanaParser.PRIOR, 0); }
		public TerminalNode CONNECT_BY_ROOT() { return getToken(HanaParser.CONNECT_BY_ROOT, 0); }
		public TerminalNode NEW() { return getToken(HanaParser.NEW, 0); }
		public TerminalNode DISTINCT() { return getToken(HanaParser.DISTINCT, 0); }
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public Case_statementContext case_statement() {
			return getRuleContext(Case_statementContext.class,0);
		}
		public Quantified_expressionContext quantified_expression() {
			return getRuleContext(Quantified_expressionContext.class,0);
		}
		public Standard_functionContext standard_function() {
			return getRuleContext(Standard_functionContext.class,0);
		}
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public Unary_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_unary_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUnary_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUnary_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUnary_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Unary_expressionContext unary_expression() throws RecognitionException {
		Unary_expressionContext _localctx = new Unary_expressionContext(_ctx, getState());
		enterRule(_localctx, 646, RULE_unary_expression);
		try {
			setState(4330);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,518,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4312);
				match(MINUS_SIGN);
				setState(4313);
				unary_expression();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4314);
				match(PLUS_SIGN);
				setState(4315);
				unary_expression();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4316);
				match(PRIOR);
				setState(4317);
				unary_expression();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4318);
				match(CONNECT_BY_ROOT);
				setState(4319);
				unary_expression();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4320);
				match(NEW);
				setState(4321);
				unary_expression();
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4322);
				match(DISTINCT);
				setState(4323);
				unary_expression();
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4324);
				match(ALL);
				setState(4325);
				unary_expression();
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4326);
				case_statement();
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4327);
				quantified_expression();
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4328);
				standard_function();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4329);
				atom();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_statementContext extends ParserRuleContext {
		public Searched_case_statementContext searched_case_statement() {
			return getRuleContext(Searched_case_statementContext.class,0);
		}
		public Simple_case_statementContext simple_case_statement() {
			return getRuleContext(Simple_case_statementContext.class,0);
		}
		public Case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCase_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCase_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCase_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_statementContext case_statement() throws RecognitionException {
		Case_statementContext _localctx = new Case_statementContext(_ctx, getState());
		enterRule(_localctx, 648, RULE_case_statement);
		try {
			setState(4334);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,519,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4332);
				searched_case_statement();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4333);
				simple_case_statement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public AtomContext atom() {
			return getRuleContext(AtomContext.class,0);
		}
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(HanaParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(HanaParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Simple_case_when_partContext> simple_case_when_part() {
			return getRuleContexts(Simple_case_when_partContext.class);
		}
		public Simple_case_when_partContext simple_case_when_part(int i) {
			return getRuleContext(Simple_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Simple_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSimple_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSimple_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSimple_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_statementContext simple_case_statement() throws RecognitionException {
		Simple_case_statementContext _localctx = new Simple_case_statementContext(_ctx, getState());
		enterRule(_localctx, 650, RULE_simple_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4337);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(4336);
				label_name();
				}
			}

			setState(4339);
			((Simple_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4340);
			atom();
			setState(4342); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4341);
				simple_case_when_part();
				}
				}
				setState(4344); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4347);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4346);
				case_else_part();
				}
			}

			setState(4349);
			match(END);
			setState(4351);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,523,_ctx) ) {
			case 1:
				{
				setState(4350);
				match(CASE);
				}
				break;
			}
			setState(4354);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,524,_ctx) ) {
			case 1:
				{
				setState(4353);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Simple_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Simple_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_simple_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSimple_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSimple_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSimple_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Simple_case_when_partContext simple_case_when_part() throws RecognitionException {
		Simple_case_when_partContext _localctx = new Simple_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 652, RULE_simple_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4356);
			match(WHEN);
			setState(4357);
			expression_wrapper();
			setState(4358);
			match(THEN);
			setState(4361);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,525,_ctx) ) {
			case 1:
				{
				setState(4359);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4360);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_statementContext extends ParserRuleContext {
		public Token ck1;
		public TerminalNode END() { return getToken(HanaParser.END, 0); }
		public List<TerminalNode> CASE() { return getTokens(HanaParser.CASE); }
		public TerminalNode CASE(int i) {
			return getToken(HanaParser.CASE, i);
		}
		public List<Label_nameContext> label_name() {
			return getRuleContexts(Label_nameContext.class);
		}
		public Label_nameContext label_name(int i) {
			return getRuleContext(Label_nameContext.class,i);
		}
		public List<Searched_case_when_partContext> searched_case_when_part() {
			return getRuleContexts(Searched_case_when_partContext.class);
		}
		public Searched_case_when_partContext searched_case_when_part(int i) {
			return getRuleContext(Searched_case_when_partContext.class,i);
		}
		public Case_else_partContext case_else_part() {
			return getRuleContext(Case_else_partContext.class,0);
		}
		public Searched_case_statementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_statement; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSearched_case_statement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSearched_case_statement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSearched_case_statement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_statementContext searched_case_statement() throws RecognitionException {
		Searched_case_statementContext _localctx = new Searched_case_statementContext(_ctx, getState());
		enterRule(_localctx, 654, RULE_searched_case_statement);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4364);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(4363);
				label_name();
				}
			}

			setState(4366);
			((Searched_case_statementContext)_localctx).ck1 = match(CASE);
			setState(4368); 
			_errHandler.sync(this);
			_la = _input.LA(1);
			do {
				{
				{
				setState(4367);
				searched_case_when_part();
				}
				}
				setState(4370); 
				_errHandler.sync(this);
				_la = _input.LA(1);
			} while ( _la==WHEN );
			setState(4373);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ELSE) {
				{
				setState(4372);
				case_else_part();
				}
			}

			setState(4375);
			match(END);
			setState(4377);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,529,_ctx) ) {
			case 1:
				{
				setState(4376);
				match(CASE);
				}
				break;
			}
			setState(4380);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,530,_ctx) ) {
			case 1:
				{
				setState(4379);
				label_name();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Searched_case_when_partContext extends ParserRuleContext {
		public TerminalNode WHEN() { return getToken(HanaParser.WHEN, 0); }
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public TerminalNode THEN() { return getToken(HanaParser.THEN, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Searched_case_when_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_searched_case_when_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSearched_case_when_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSearched_case_when_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSearched_case_when_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Searched_case_when_partContext searched_case_when_part() throws RecognitionException {
		Searched_case_when_partContext _localctx = new Searched_case_when_partContext(_ctx, getState());
		enterRule(_localctx, 656, RULE_searched_case_when_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4382);
			match(WHEN);
			setState(4383);
			condition_wrapper();
			setState(4384);
			match(THEN);
			setState(4387);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,531,_ctx) ) {
			case 1:
				{
				setState(4385);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4386);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Case_else_partContext extends ParserRuleContext {
		public TerminalNode ELSE() { return getToken(HanaParser.ELSE, 0); }
		public Seq_of_statementsContext seq_of_statements() {
			return getRuleContext(Seq_of_statementsContext.class,0);
		}
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Case_else_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_case_else_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCase_else_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCase_else_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCase_else_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Case_else_partContext case_else_part() throws RecognitionException {
		Case_else_partContext _localctx = new Case_else_partContext(_ctx, getState());
		enterRule(_localctx, 658, RULE_case_else_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4389);
			match(ELSE);
			setState(4392);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,532,_ctx) ) {
			case 1:
				{
				setState(4390);
				seq_of_statements();
				}
				break;
			case 2:
				{
				setState(4391);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class AtomContext extends ParserRuleContext {
		public Table_elementContext table_element() {
			return getRuleContext(Table_elementContext.class,0);
		}
		public Outer_join_signContext outer_join_sign() {
			return getRuleContext(Outer_join_signContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public ConstantContext constant() {
			return getRuleContext(ConstantContext.class,0);
		}
		public General_elementContext general_element() {
			return getRuleContext(General_elementContext.class,0);
		}
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Expression_or_vectorContext expression_or_vector() {
			return getRuleContext(Expression_or_vectorContext.class,0);
		}
		public List<Subquery_operation_partContext> subquery_operation_part() {
			return getRuleContexts(Subquery_operation_partContext.class);
		}
		public Subquery_operation_partContext subquery_operation_part(int i) {
			return getRuleContext(Subquery_operation_partContext.class,i);
		}
		public AtomContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_atom; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAtom(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAtom(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAtom(this);
			else return visitor.visitChildren(this);
		}
	}

	public final AtomContext atom() throws RecognitionException {
		AtomContext _localctx = new AtomContext(_ctx, getState());
		enterRule(_localctx, 660, RULE_atom);
		try {
			int _alt;
			setState(4414);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,535,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4394);
				table_element();
				setState(4395);
				outer_join_sign();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4397);
				bind_variable();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4398);
				constant();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4399);
				general_element();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4400);
				match(LEFT_PAREN);
				setState(4412);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,534,_ctx) ) {
				case 1:
					{
					setState(4401);
					subquery();
					setState(4402);
					match(RIGHT_PAREN);
					setState(4406);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,533,_ctx);
					while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
						if ( _alt==1 ) {
							{
							{
							setState(4403);
							subquery_operation_part();
							}
							} 
						}
						setState(4408);
						_errHandler.sync(this);
						_alt = getInterpreter().adaptivePredict(_input,533,_ctx);
					}
					}
					break;
				case 2:
					{
					setState(4409);
					expression_or_vector();
					setState(4410);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Expression_or_vectorContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public Vector_exprContext vector_expr() {
			return getRuleContext(Vector_exprContext.class,0);
		}
		public Expression_or_vectorContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression_or_vector; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExpression_or_vector(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExpression_or_vector(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExpression_or_vector(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Expression_or_vectorContext expression_or_vector() throws RecognitionException {
		Expression_or_vectorContext _localctx = new Expression_or_vectorContext(_ctx, getState());
		enterRule(_localctx, 662, RULE_expression_or_vector);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4416);
			expression();
			setState(4418);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(4417);
				vector_expr();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Vector_exprContext extends ParserRuleContext {
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public Vector_exprContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_vector_expr; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterVector_expr(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitVector_expr(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitVector_expr(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Vector_exprContext vector_expr() throws RecognitionException {
		Vector_exprContext _localctx = new Vector_exprContext(_ctx, getState());
		enterRule(_localctx, 664, RULE_vector_expr);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4420);
			match(COMMA);
			setState(4421);
			expression();
			setState(4426);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4422);
				match(COMMA);
				setState(4423);
				expression();
				}
				}
				setState(4428);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quantified_expressionContext extends ParserRuleContext {
		public TerminalNode SOME() { return getToken(HanaParser.SOME, 0); }
		public TerminalNode EXISTS() { return getToken(HanaParser.EXISTS, 0); }
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public TerminalNode ANY() { return getToken(HanaParser.ANY, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Quantified_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quantified_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterQuantified_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitQuantified_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitQuantified_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quantified_expressionContext quantified_expression() throws RecognitionException {
		Quantified_expressionContext _localctx = new Quantified_expressionContext(_ctx, getState());
		enterRule(_localctx, 666, RULE_quantified_expression);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4429);
			_la = _input.LA(1);
			if ( !(_la==ALL || _la==ANY || _la==EXISTS || _la==SOME) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4438);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,538,_ctx) ) {
			case 1:
				{
				setState(4430);
				match(LEFT_PAREN);
				setState(4431);
				subquery();
				setState(4432);
				match(RIGHT_PAREN);
				}
				break;
			case 2:
				{
				setState(4434);
				match(LEFT_PAREN);
				setState(4435);
				expression_wrapper();
				setState(4436);
				match(RIGHT_PAREN);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_functionContext extends ParserRuleContext {
		public Over_clause_keywordContext over_clause_keyword() {
			return getRuleContext(Over_clause_keywordContext.class,0);
		}
		public Function_argument_analyticContext function_argument_analytic() {
			return getRuleContext(Function_argument_analyticContext.class,0);
		}
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public Function_argument_modelingContext function_argument_modeling() {
			return getRuleContext(Function_argument_modelingContext.class,0);
		}
		public Using_clauseContext using_clause() {
			return getRuleContext(Using_clauseContext.class,0);
		}
		public TerminalNode COUNT() { return getToken(HanaParser.COUNT, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public TerminalNode DISTINCT() { return getToken(HanaParser.DISTINCT, 0); }
		public TerminalNode UNIQUE() { return getToken(HanaParser.UNIQUE, 0); }
		public TerminalNode ALL() { return getToken(HanaParser.ALL, 0); }
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode CAST() { return getToken(HanaParser.CAST, 0); }
		public TerminalNode XMLCAST() { return getToken(HanaParser.XMLCAST, 0); }
		public TerminalNode MULTISET() { return getToken(HanaParser.MULTISET, 0); }
		public SubqueryContext subquery() {
			return getRuleContext(SubqueryContext.class,0);
		}
		public TerminalNode CHR() { return getToken(HanaParser.CHR, 0); }
		public TerminalNode USING() { return getToken(HanaParser.USING, 0); }
		public TerminalNode NCHAR_CS() { return getToken(HanaParser.NCHAR_CS, 0); }
		public TerminalNode COLLECT() { return getToken(HanaParser.COLLECT, 0); }
		public Collect_order_by_partContext collect_order_by_part() {
			return getRuleContext(Collect_order_by_partContext.class,0);
		}
		public Within_or_over_clause_keywordContext within_or_over_clause_keyword() {
			return getRuleContext(Within_or_over_clause_keywordContext.class,0);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public List<Within_or_over_partContext> within_or_over_part() {
			return getRuleContexts(Within_or_over_partContext.class);
		}
		public Within_or_over_partContext within_or_over_part(int i) {
			return getRuleContext(Within_or_over_partContext.class,i);
		}
		public TerminalNode DECOMPOSE() { return getToken(HanaParser.DECOMPOSE, 0); }
		public TerminalNode CANONICAL() { return getToken(HanaParser.CANONICAL, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(HanaParser.COMPATIBILITY, 0); }
		public TerminalNode EXTRACT() { return getToken(HanaParser.EXTRACT, 0); }
		public TerminalNode FROM() { return getToken(HanaParser.FROM, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(HanaParser.FIRST_VALUE, 0); }
		public TerminalNode LAST_VALUE() { return getToken(HanaParser.LAST_VALUE, 0); }
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls() {
			return getRuleContext(Respect_or_ignore_nullsContext.class,0);
		}
		public Standard_prediction_function_keywordContext standard_prediction_function_keyword() {
			return getRuleContext(Standard_prediction_function_keywordContext.class,0);
		}
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Cost_matrix_clauseContext cost_matrix_clause() {
			return getRuleContext(Cost_matrix_clauseContext.class,0);
		}
		public TerminalNode TRANSLATE() { return getToken(HanaParser.TRANSLATE, 0); }
		public TerminalNode CHAR_CS() { return getToken(HanaParser.CHAR_CS, 0); }
		public TerminalNode TREAT() { return getToken(HanaParser.TREAT, 0); }
		public TerminalNode REF() { return getToken(HanaParser.REF, 0); }
		public TerminalNode TRIM() { return getToken(HanaParser.TRIM, 0); }
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public TerminalNode LEADING() { return getToken(HanaParser.LEADING, 0); }
		public TerminalNode TRAILING() { return getToken(HanaParser.TRAILING, 0); }
		public TerminalNode BOTH() { return getToken(HanaParser.BOTH, 0); }
		public TerminalNode XMLAGG() { return getToken(HanaParser.XMLAGG, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode XMLCOLATTVAL() { return getToken(HanaParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLFOREST() { return getToken(HanaParser.XMLFOREST, 0); }
		public TerminalNode XMLELEMENT() { return getToken(HanaParser.XMLELEMENT, 0); }
		public Xml_attributes_clauseContext xml_attributes_clause() {
			return getRuleContext(Xml_attributes_clauseContext.class,0);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(HanaParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(HanaParser.NOENTITYESCAPING, 0); }
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		public TerminalNode EVALNAME() { return getToken(HanaParser.EVALNAME, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public TerminalNode XMLEXISTS() { return getToken(HanaParser.XMLEXISTS, 0); }
		public Xml_passing_clauseContext xml_passing_clause() {
			return getRuleContext(Xml_passing_clauseContext.class,0);
		}
		public TerminalNode XMLPARSE() { return getToken(HanaParser.XMLPARSE, 0); }
		public TerminalNode DOCUMENT() { return getToken(HanaParser.DOCUMENT, 0); }
		public TerminalNode CONTENT() { return getToken(HanaParser.CONTENT, 0); }
		public TerminalNode WELLFORMED() { return getToken(HanaParser.WELLFORMED, 0); }
		public TerminalNode XMLPI() { return getToken(HanaParser.XMLPI, 0); }
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode XMLQUERY() { return getToken(HanaParser.XMLQUERY, 0); }
		public TerminalNode RETURNING() { return getToken(HanaParser.RETURNING, 0); }
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		public TerminalNode ON() { return getToken(HanaParser.ON, 0); }
		public TerminalNode EMPTY() { return getToken(HanaParser.EMPTY, 0); }
		public TerminalNode XMLROOT() { return getToken(HanaParser.XMLROOT, 0); }
		public Xmlroot_param_version_partContext xmlroot_param_version_part() {
			return getRuleContext(Xmlroot_param_version_partContext.class,0);
		}
		public Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() {
			return getRuleContext(Xmlroot_param_standalone_partContext.class,0);
		}
		public TerminalNode XMLSERIALIZE() { return getToken(HanaParser.XMLSERIALIZE, 0); }
		public Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() {
			return getRuleContext(Xmlserialize_param_enconding_partContext.class,0);
		}
		public Xmlserialize_param_version_partContext xmlserialize_param_version_part() {
			return getRuleContext(Xmlserialize_param_version_partContext.class,0);
		}
		public Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() {
			return getRuleContext(Xmlserialize_param_ident_partContext.class,0);
		}
		public TerminalNode DEFAULTS() { return getToken(HanaParser.DEFAULTS, 0); }
		public TerminalNode HIDE() { return getToken(HanaParser.HIDE, 0); }
		public TerminalNode SHOW() { return getToken(HanaParser.SHOW, 0); }
		public TerminalNode XMLTABLE() { return getToken(HanaParser.XMLTABLE, 0); }
		public Xml_namespaces_clauseContext xml_namespaces_clause() {
			return getRuleContext(Xml_namespaces_clauseContext.class,0);
		}
		public TerminalNode COLUMNS() { return getToken(HanaParser.COLUMNS, 0); }
		public List<Xml_table_columnContext> xml_table_column() {
			return getRuleContexts(Xml_table_columnContext.class);
		}
		public Xml_table_columnContext xml_table_column(int i) {
			return getRuleContext(Xml_table_columnContext.class,i);
		}
		public Standard_functionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_function; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterStandard_function(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitStandard_function(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitStandard_function(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_functionContext standard_function() throws RecognitionException {
		Standard_functionContext _localctx = new Standard_functionContext(_ctx, getState());
		enterRule(_localctx, 668, RULE_standard_function);
		int _la;
		try {
			int _alt;
			setState(4754);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,591,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4440);
				over_clause_keyword();
				setState(4441);
				function_argument_analytic();
				setState(4443);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,539,_ctx) ) {
				case 1:
					{
					setState(4442);
					over_clause();
					}
					break;
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4445);
				regular_id();
				setState(4446);
				function_argument_modeling();
				setState(4448);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,540,_ctx) ) {
				case 1:
					{
					setState(4447);
					using_clause();
					}
					break;
				}
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4450);
				match(COUNT);
				setState(4451);
				match(LEFT_PAREN);
				setState(4457);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case ASTERISK:
					{
					setState(4452);
					match(ASTERISK);
					}
					break;
				case T__6:
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ALL:
				case ANALYZE:
				case ANY:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CASE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONNECT_BY_ROOT:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DATE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DISTINCT:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXISTS:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FALSE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULL:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case PRIOR:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNS:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUE:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNIQUE:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case SQL_ERROR_CODE:
				case SQL_ERROR_MESSAGE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case NATIONAL_CHAR_STRING_LIT:
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
				case CHAR_STRING:
				case DELIMITED_ID:
				case LEFT_PAREN:
				case PLUS_SIGN:
				case MINUS_SIGN:
				case BINDVAR:
				case COLON:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(4454);
					_errHandler.sync(this);
					switch ( getInterpreter().adaptivePredict(_input,541,_ctx) ) {
					case 1:
						{
						setState(4453);
						_la = _input.LA(1);
						if ( !(_la==ALL || _la==DISTINCT || _la==UNIQUE) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
						break;
					}
					setState(4456);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4459);
				match(RIGHT_PAREN);
				setState(4461);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,543,_ctx) ) {
				case 1:
					{
					setState(4460);
					over_clause();
					}
					break;
				}
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(4463);
				_la = _input.LA(1);
				if ( !(_la==CAST || _la==XMLCAST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4464);
				match(LEFT_PAREN);
				setState(4471);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,544,_ctx) ) {
				case 1:
					{
					setState(4465);
					match(MULTISET);
					setState(4466);
					match(LEFT_PAREN);
					setState(4467);
					subquery();
					setState(4468);
					match(RIGHT_PAREN);
					}
					break;
				case 2:
					{
					setState(4470);
					concatenation_wrapper();
					}
					break;
				}
				setState(4473);
				match(AS);
				setState(4474);
				type_spec();
				setState(4475);
				match(RIGHT_PAREN);
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(4477);
				match(CHR);
				setState(4478);
				match(LEFT_PAREN);
				setState(4479);
				concatenation_wrapper();
				setState(4480);
				match(USING);
				setState(4481);
				match(NCHAR_CS);
				setState(4482);
				match(RIGHT_PAREN);
				}
				break;
			case 6:
				enterOuterAlt(_localctx, 6);
				{
				setState(4484);
				match(COLLECT);
				setState(4485);
				match(LEFT_PAREN);
				setState(4487);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,545,_ctx) ) {
				case 1:
					{
					setState(4486);
					_la = _input.LA(1);
					if ( !(_la==DISTINCT || _la==UNIQUE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4489);
				concatenation_wrapper();
				setState(4491);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4490);
					collect_order_by_part();
					}
				}

				setState(4493);
				match(RIGHT_PAREN);
				}
				break;
			case 7:
				enterOuterAlt(_localctx, 7);
				{
				setState(4495);
				within_or_over_clause_keyword();
				setState(4496);
				function_argument();
				setState(4498); 
				_errHandler.sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						setState(4497);
						within_or_over_part();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(4500); 
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,547,_ctx);
				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
				}
				break;
			case 8:
				enterOuterAlt(_localctx, 8);
				{
				setState(4502);
				match(DECOMPOSE);
				setState(4503);
				match(LEFT_PAREN);
				setState(4504);
				concatenation_wrapper();
				setState(4506);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==CANONICAL || _la==COMPATIBILITY) {
					{
					setState(4505);
					_la = _input.LA(1);
					if ( !(_la==CANONICAL || _la==COMPATIBILITY) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4508);
				match(RIGHT_PAREN);
				}
				break;
			case 9:
				enterOuterAlt(_localctx, 9);
				{
				setState(4510);
				match(EXTRACT);
				setState(4511);
				match(LEFT_PAREN);
				setState(4512);
				regular_id();
				setState(4513);
				match(FROM);
				setState(4514);
				concatenation_wrapper();
				setState(4515);
				match(RIGHT_PAREN);
				}
				break;
			case 10:
				enterOuterAlt(_localctx, 10);
				{
				setState(4517);
				_la = _input.LA(1);
				if ( !(_la==FIRST_VALUE || _la==LAST_VALUE) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4518);
				function_argument_analytic();
				setState(4520);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(4519);
					respect_or_ignore_nulls();
					}
				}

				setState(4522);
				over_clause();
				}
				break;
			case 11:
				enterOuterAlt(_localctx, 11);
				{
				setState(4524);
				standard_prediction_function_keyword();
				setState(4525);
				match(LEFT_PAREN);
				setState(4526);
				expression_wrapper();
				setState(4531);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4527);
					match(COMMA);
					setState(4528);
					expression_wrapper();
					}
					}
					setState(4533);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4535);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COST) {
					{
					setState(4534);
					cost_matrix_clause();
					}
				}

				setState(4538);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4537);
					using_clause();
					}
				}

				setState(4540);
				match(RIGHT_PAREN);
				}
				break;
			case 12:
				enterOuterAlt(_localctx, 12);
				{
				setState(4542);
				match(TRANSLATE);
				setState(4543);
				match(LEFT_PAREN);
				setState(4544);
				expression_wrapper();
				setState(4547);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==USING) {
					{
					setState(4545);
					match(USING);
					setState(4546);
					_la = _input.LA(1);
					if ( !(_la==CHAR_CS || _la==NCHAR_CS) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				setState(4553);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4549);
					match(COMMA);
					setState(4550);
					expression_wrapper();
					}
					}
					setState(4555);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4556);
				match(RIGHT_PAREN);
				}
				break;
			case 13:
				enterOuterAlt(_localctx, 13);
				{
				setState(4558);
				match(TREAT);
				setState(4559);
				match(LEFT_PAREN);
				setState(4560);
				expression_wrapper();
				setState(4561);
				match(AS);
				setState(4563);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,555,_ctx) ) {
				case 1:
					{
					setState(4562);
					match(REF);
					}
					break;
				}
				setState(4565);
				type_spec();
				setState(4566);
				match(RIGHT_PAREN);
				}
				break;
			case 14:
				enterOuterAlt(_localctx, 14);
				{
				setState(4568);
				match(TRIM);
				setState(4569);
				match(LEFT_PAREN);
				setState(4577);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,558,_ctx) ) {
				case 1:
					{
					setState(4571);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==BOTH || _la==LEADING || _la==TRAILING) {
						{
						setState(4570);
						_la = _input.LA(1);
						if ( !(_la==BOTH || _la==LEADING || _la==TRAILING) ) {
						_errHandler.recoverInline(this);
						}
						else {
							if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
							_errHandler.reportMatch(this);
							consume();
						}
						}
					}

					setState(4574);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) {
						{
						setState(4573);
						quoted_string();
						}
					}

					setState(4576);
					match(FROM);
					}
					break;
				}
				setState(4579);
				concatenation_wrapper();
				setState(4580);
				match(RIGHT_PAREN);
				}
				break;
			case 15:
				enterOuterAlt(_localctx, 15);
				{
				setState(4582);
				match(XMLAGG);
				setState(4583);
				match(LEFT_PAREN);
				setState(4584);
				expression_wrapper();
				setState(4586);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ORDER) {
					{
					setState(4585);
					order_by_clause();
					}
				}

				setState(4588);
				match(RIGHT_PAREN);
				setState(4591);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,560,_ctx) ) {
				case 1:
					{
					setState(4589);
					match(PERIOD);
					setState(4590);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 16:
				enterOuterAlt(_localctx, 16);
				{
				setState(4593);
				_la = _input.LA(1);
				if ( !(_la==XMLCOLATTVAL || _la==XMLFOREST) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4594);
				match(LEFT_PAREN);
				setState(4595);
				xml_multiuse_expression_element();
				setState(4600);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4596);
					match(COMMA);
					setState(4597);
					xml_multiuse_expression_element();
					}
					}
					setState(4602);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4603);
				match(RIGHT_PAREN);
				setState(4606);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,562,_ctx) ) {
				case 1:
					{
					setState(4604);
					match(PERIOD);
					setState(4605);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 17:
				enterOuterAlt(_localctx, 17);
				{
				setState(4608);
				match(XMLELEMENT);
				setState(4609);
				match(LEFT_PAREN);
				setState(4611);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,563,_ctx) ) {
				case 1:
					{
					setState(4610);
					_la = _input.LA(1);
					if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4614);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,564,_ctx) ) {
				case 1:
					{
					setState(4613);
					_la = _input.LA(1);
					if ( !(_la==EVALNAME || _la==NAME) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
					break;
				}
				setState(4616);
				expression_wrapper();
				setState(4619);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,565,_ctx) ) {
				case 1:
					{
					setState(4617);
					match(COMMA);
					setState(4618);
					xml_attributes_clause();
					}
					break;
				}
				setState(4628);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4621);
					match(COMMA);
					setState(4622);
					expression_wrapper();
					setState(4624);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
						{
						setState(4623);
						column_alias();
						}
					}

					}
					}
					setState(4630);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4631);
				match(RIGHT_PAREN);
				setState(4634);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,568,_ctx) ) {
				case 1:
					{
					setState(4632);
					match(PERIOD);
					setState(4633);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 18:
				enterOuterAlt(_localctx, 18);
				{
				setState(4636);
				match(XMLEXISTS);
				setState(4637);
				match(LEFT_PAREN);
				setState(4638);
				expression_wrapper();
				setState(4640);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4639);
					xml_passing_clause();
					}
				}

				setState(4642);
				match(RIGHT_PAREN);
				}
				break;
			case 19:
				enterOuterAlt(_localctx, 19);
				{
				setState(4644);
				match(XMLPARSE);
				setState(4645);
				match(LEFT_PAREN);
				setState(4646);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4647);
				concatenation_wrapper();
				setState(4649);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==WELLFORMED) {
					{
					setState(4648);
					match(WELLFORMED);
					}
				}

				setState(4651);
				match(RIGHT_PAREN);
				setState(4654);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,571,_ctx) ) {
				case 1:
					{
					setState(4652);
					match(PERIOD);
					setState(4653);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 20:
				enterOuterAlt(_localctx, 20);
				{
				setState(4656);
				match(XMLPI);
				setState(4657);
				match(LEFT_PAREN);
				setState(4662);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NAME:
					{
					setState(4658);
					match(NAME);
					setState(4659);
					id();
					}
					break;
				case EVALNAME:
					{
					setState(4660);
					match(EVALNAME);
					setState(4661);
					concatenation_wrapper();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(4666);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4664);
					match(COMMA);
					setState(4665);
					concatenation_wrapper();
					}
				}

				setState(4668);
				match(RIGHT_PAREN);
				setState(4671);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,574,_ctx) ) {
				case 1:
					{
					setState(4669);
					match(PERIOD);
					setState(4670);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 21:
				enterOuterAlt(_localctx, 21);
				{
				setState(4673);
				match(XMLQUERY);
				setState(4674);
				match(LEFT_PAREN);
				setState(4675);
				concatenation_wrapper();
				setState(4677);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4676);
					xml_passing_clause();
					}
				}

				setState(4679);
				match(RETURNING);
				setState(4680);
				match(CONTENT);
				setState(4684);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==NULL) {
					{
					setState(4681);
					match(NULL);
					setState(4682);
					match(ON);
					setState(4683);
					match(EMPTY);
					}
				}

				setState(4686);
				match(RIGHT_PAREN);
				setState(4689);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,577,_ctx) ) {
				case 1:
					{
					setState(4687);
					match(PERIOD);
					setState(4688);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 22:
				enterOuterAlt(_localctx, 22);
				{
				setState(4691);
				match(XMLROOT);
				setState(4692);
				match(LEFT_PAREN);
				setState(4693);
				concatenation_wrapper();
				setState(4696);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,578,_ctx) ) {
				case 1:
					{
					setState(4694);
					match(COMMA);
					setState(4695);
					xmlroot_param_version_part();
					}
					break;
				}
				setState(4700);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(4698);
					match(COMMA);
					setState(4699);
					xmlroot_param_standalone_part();
					}
				}

				setState(4702);
				match(RIGHT_PAREN);
				setState(4705);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,580,_ctx) ) {
				case 1:
					{
					setState(4703);
					match(PERIOD);
					setState(4704);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 23:
				enterOuterAlt(_localctx, 23);
				{
				setState(4707);
				match(XMLSERIALIZE);
				setState(4708);
				match(LEFT_PAREN);
				setState(4709);
				_la = _input.LA(1);
				if ( !(_la==CONTENT || _la==DOCUMENT) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4710);
				concatenation_wrapper();
				setState(4713);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4711);
					match(AS);
					setState(4712);
					type_spec();
					}
				}

				setState(4716);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==ENCODING) {
					{
					setState(4715);
					xmlserialize_param_enconding_part();
					}
				}

				setState(4719);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VERSION) {
					{
					setState(4718);
					xmlserialize_param_version_part();
					}
				}

				setState(4722);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INDENT || _la==NO) {
					{
					setState(4721);
					xmlserialize_param_ident_part();
					}
				}

				setState(4726);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==HIDE || _la==SHOW) {
					{
					setState(4724);
					_la = _input.LA(1);
					if ( !(_la==HIDE || _la==SHOW) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					setState(4725);
					match(DEFAULTS);
					}
				}

				setState(4728);
				match(RIGHT_PAREN);
				setState(4731);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,586,_ctx) ) {
				case 1:
					{
					setState(4729);
					match(PERIOD);
					setState(4730);
					general_element_part();
					}
					break;
				}
				}
				break;
			case 24:
				enterOuterAlt(_localctx, 24);
				{
				setState(4733);
				match(XMLTABLE);
				setState(4734);
				match(LEFT_PAREN);
				setState(4736);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,587,_ctx) ) {
				case 1:
					{
					setState(4735);
					xml_namespaces_clause();
					}
					break;
				}
				setState(4738);
				concatenation_wrapper();
				setState(4740);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PASSING) {
					{
					setState(4739);
					xml_passing_clause();
					}
				}

				setState(4747);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COLUMNS) {
					{
					setState(4742);
					match(COLUMNS);
					setState(4743);
					xml_table_column();
					{
					setState(4744);
					match(COMMA);
					setState(4745);
					xml_table_column();
					}
					}
				}

				setState(4749);
				match(RIGHT_PAREN);
				setState(4752);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,590,_ctx) ) {
				case 1:
					{
					setState(4750);
					match(PERIOD);
					setState(4751);
					general_element_part();
					}
					break;
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode AVG() { return getToken(HanaParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(HanaParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(HanaParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(HanaParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(HanaParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(HanaParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(HanaParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(HanaParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(HanaParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(HanaParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(HanaParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(HanaParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(HanaParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(HanaParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(HanaParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(HanaParser.COVAR_, 0); }
		public Over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOver_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOver_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOver_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clause_keywordContext over_clause_keyword() throws RecognitionException {
		Over_clause_keywordContext _localctx = new Over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 670, RULE_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4756);
			_la = _input.LA(1);
			if ( !(((((_la - 503)) & ~0x3f) == 0 && ((1L << (_la - 503)) & ((1L << (AVG - 503)) | (1L << (CORR - 503)) | (1L << (LAG - 503)) | (1L << (LEAD - 503)) | (1L << (MAX - 503)) | (1L << (MEDIAN - 503)) | (1L << (MIN - 503)) | (1L << (NTILE - 503)) | (1L << (RATIO_TO_REPORT - 503)) | (1L << (ROW_NUMBER - 503)) | (1L << (SUM - 503)) | (1L << (VARIANCE - 503)) | (1L << (REGR_ - 503)) | (1L << (STDDEV - 503)) | (1L << (VAR_ - 503)) | (1L << (COVAR_ - 503)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_clause_keywordContext extends ParserRuleContext {
		public TerminalNode CUME_DIST() { return getToken(HanaParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(HanaParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(HanaParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(HanaParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(HanaParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(HanaParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(HanaParser.RANK, 0); }
		public Within_or_over_clause_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_clause_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWithin_or_over_clause_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWithin_or_over_clause_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWithin_or_over_clause_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_clause_keywordContext within_or_over_clause_keyword() throws RecognitionException {
		Within_or_over_clause_keywordContext _localctx = new Within_or_over_clause_keywordContext(_ctx, getState());
		enterRule(_localctx, 672, RULE_within_or_over_clause_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4758);
			_la = _input.LA(1);
			if ( !(((((_la - 496)) & ~0x3f) == 0 && ((1L << (_la - 496)) & ((1L << (CUME_DIST - 496)) | (1L << (DENSE_RANK - 496)) | (1L << (LISTAGG - 496)) | (1L << (PERCENT_RANK - 496)) | (1L << (PERCENTILE_CONT - 496)) | (1L << (PERCENTILE_DISC - 496)) | (1L << (RANK - 496)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Standard_prediction_function_keywordContext extends ParserRuleContext {
		public TerminalNode PREDICTION() { return getToken(HanaParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(HanaParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(HanaParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(HanaParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(HanaParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(HanaParser.PREDICTION_SET, 0); }
		public Standard_prediction_function_keywordContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_standard_prediction_function_keyword; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterStandard_prediction_function_keyword(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitStandard_prediction_function_keyword(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitStandard_prediction_function_keyword(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Standard_prediction_function_keywordContext standard_prediction_function_keyword() throws RecognitionException {
		Standard_prediction_function_keywordContext _localctx = new Standard_prediction_function_keywordContext(_ctx, getState());
		enterRule(_localctx, 674, RULE_standard_prediction_function_keyword);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4760);
			_la = _input.LA(1);
			if ( !(((((_la - 490)) & ~0x3f) == 0 && ((1L << (_la - 490)) & ((1L << (PREDICTION - 490)) | (1L << (PREDICTION_BOUNDS - 490)) | (1L << (PREDICTION_COST - 490)) | (1L << (PREDICTION_DETAILS - 490)) | (1L << (PREDICTION_PROBABILITY - 490)) | (1L << (PREDICTION_SET - 490)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Over_clauseContext extends ParserRuleContext {
		public TerminalNode OVER() { return getToken(HanaParser.OVER, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Query_partition_clauseContext query_partition_clause() {
			return getRuleContext(Query_partition_clauseContext.class,0);
		}
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public Windowing_clauseContext windowing_clause() {
			return getRuleContext(Windowing_clauseContext.class,0);
		}
		public Over_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_over_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOver_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOver_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOver_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Over_clauseContext over_clause() throws RecognitionException {
		Over_clauseContext _localctx = new Over_clauseContext(_ctx, getState());
		enterRule(_localctx, 676, RULE_over_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4762);
			match(OVER);
			setState(4763);
			match(LEFT_PAREN);
			setState(4765);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PARTITION) {
				{
				setState(4764);
				query_partition_clause();
				}
			}

			setState(4771);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==ORDER) {
				{
				setState(4767);
				order_by_clause();
				setState(4769);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RANGE || _la==ROWS) {
					{
					setState(4768);
					windowing_clause();
					}
				}

				}
			}

			setState(4773);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_clauseContext extends ParserRuleContext {
		public Windowing_typeContext windowing_type() {
			return getRuleContext(Windowing_typeContext.class,0);
		}
		public TerminalNode BETWEEN() { return getToken(HanaParser.BETWEEN, 0); }
		public List<Windowing_elementsContext> windowing_elements() {
			return getRuleContexts(Windowing_elementsContext.class);
		}
		public Windowing_elementsContext windowing_elements(int i) {
			return getRuleContext(Windowing_elementsContext.class,i);
		}
		public TerminalNode AND() { return getToken(HanaParser.AND, 0); }
		public Windowing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWindowing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWindowing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWindowing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_clauseContext windowing_clause() throws RecognitionException {
		Windowing_clauseContext _localctx = new Windowing_clauseContext(_ctx, getState());
		enterRule(_localctx, 678, RULE_windowing_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4775);
			windowing_type();
			setState(4782);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BETWEEN:
				{
				setState(4776);
				match(BETWEEN);
				setState(4777);
				windowing_elements();
				setState(4778);
				match(AND);
				setState(4779);
				windowing_elements();
				}
				break;
			case T__6:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4781);
				windowing_elements();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_typeContext extends ParserRuleContext {
		public TerminalNode ROWS() { return getToken(HanaParser.ROWS, 0); }
		public TerminalNode RANGE() { return getToken(HanaParser.RANGE, 0); }
		public Windowing_typeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWindowing_type(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWindowing_type(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWindowing_type(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_typeContext windowing_type() throws RecognitionException {
		Windowing_typeContext _localctx = new Windowing_typeContext(_ctx, getState());
		enterRule(_localctx, 680, RULE_windowing_type);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4784);
			_la = _input.LA(1);
			if ( !(_la==RANGE || _la==ROWS) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Windowing_elementsContext extends ParserRuleContext {
		public TerminalNode UNBOUNDED() { return getToken(HanaParser.UNBOUNDED, 0); }
		public TerminalNode PRECEDING() { return getToken(HanaParser.PRECEDING, 0); }
		public TerminalNode CURRENT() { return getToken(HanaParser.CURRENT, 0); }
		public TerminalNode ROW() { return getToken(HanaParser.ROW, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public TerminalNode FOLLOWING() { return getToken(HanaParser.FOLLOWING, 0); }
		public Windowing_elementsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_windowing_elements; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWindowing_elements(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWindowing_elements(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWindowing_elements(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Windowing_elementsContext windowing_elements() throws RecognitionException {
		Windowing_elementsContext _localctx = new Windowing_elementsContext(_ctx, getState());
		enterRule(_localctx, 682, RULE_windowing_elements);
		int _la;
		try {
			setState(4793);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,596,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4786);
				match(UNBOUNDED);
				setState(4787);
				match(PRECEDING);
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(4788);
				match(CURRENT);
				setState(4789);
				match(ROW);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(4790);
				concatenation_wrapper();
				setState(4791);
				_la = _input.LA(1);
				if ( !(_la==FOLLOWING || _la==PRECEDING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_clauseContext extends ParserRuleContext {
		public TerminalNode USING() { return getToken(HanaParser.USING, 0); }
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		public List<Using_elementContext> using_element() {
			return getRuleContexts(Using_elementContext.class);
		}
		public Using_elementContext using_element(int i) {
			return getRuleContext(Using_elementContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Using_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUsing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUsing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUsing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_clauseContext using_clause() throws RecognitionException {
		Using_clauseContext _localctx = new Using_clauseContext(_ctx, getState());
		enterRule(_localctx, 684, RULE_using_clause);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(4795);
			match(USING);
			setState(4805);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case ASTERISK:
				{
				setState(4796);
				match(ASTERISK);
				}
				break;
			case T__6:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case IN:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case STRING_AGG:
			case CORR_SPEARMAN:
			case VAR:
			case STDDEV_POP:
			case VAR_POP:
			case STDDEV_SAMP:
			case VAR_SAMP:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(4797);
				using_element();
				setState(4802);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,597,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(4798);
						match(COMMA);
						setState(4799);
						using_element();
						}
						} 
					}
					setState(4804);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,597,_ctx);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Using_elementContext extends ParserRuleContext {
		public Select_list_elementsContext select_list_elements() {
			return getRuleContext(Select_list_elementsContext.class,0);
		}
		public TerminalNode IN() { return getToken(HanaParser.IN, 0); }
		public TerminalNode OUT() { return getToken(HanaParser.OUT, 0); }
		public Column_aliasContext column_alias() {
			return getRuleContext(Column_aliasContext.class,0);
		}
		public Using_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_using_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterUsing_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitUsing_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitUsing_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Using_elementContext using_element() throws RecognitionException {
		Using_elementContext _localctx = new Using_elementContext(_ctx, getState());
		enterRule(_localctx, 686, RULE_using_element);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4812);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,600,_ctx) ) {
			case 1:
				{
				setState(4807);
				match(IN);
				setState(4809);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,599,_ctx) ) {
				case 1:
					{
					setState(4808);
					match(OUT);
					}
					break;
				}
				}
				break;
			case 2:
				{
				setState(4811);
				match(OUT);
				}
				break;
			}
			setState(4814);
			select_list_elements();
			setState(4816);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,601,_ctx) ) {
			case 1:
				{
				setState(4815);
				column_alias();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collect_order_by_partContext extends ParserRuleContext {
		public TerminalNode ORDER() { return getToken(HanaParser.ORDER, 0); }
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Collect_order_by_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collect_order_by_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCollect_order_by_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCollect_order_by_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCollect_order_by_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collect_order_by_partContext collect_order_by_part() throws RecognitionException {
		Collect_order_by_partContext _localctx = new Collect_order_by_partContext(_ctx, getState());
		enterRule(_localctx, 688, RULE_collect_order_by_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4818);
			match(ORDER);
			setState(4819);
			match(BY);
			setState(4820);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Within_or_over_partContext extends ParserRuleContext {
		public TerminalNode WITHIN() { return getToken(HanaParser.WITHIN, 0); }
		public TerminalNode GROUP() { return getToken(HanaParser.GROUP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Within_or_over_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_within_or_over_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWithin_or_over_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWithin_or_over_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWithin_or_over_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Within_or_over_partContext within_or_over_part() throws RecognitionException {
		Within_or_over_partContext _localctx = new Within_or_over_partContext(_ctx, getState());
		enterRule(_localctx, 690, RULE_within_or_over_part);
		try {
			setState(4829);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case WITHIN:
				enterOuterAlt(_localctx, 1);
				{
				setState(4822);
				match(WITHIN);
				setState(4823);
				match(GROUP);
				setState(4824);
				match(LEFT_PAREN);
				setState(4825);
				order_by_clause();
				setState(4826);
				match(RIGHT_PAREN);
				}
				break;
			case OVER:
				enterOuterAlt(_localctx, 2);
				{
				setState(4828);
				over_clause();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_matrix_clauseContext extends ParserRuleContext {
		public TerminalNode COST() { return getToken(HanaParser.COST, 0); }
		public TerminalNode MODEL() { return getToken(HanaParser.MODEL, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Cost_class_nameContext> cost_class_name() {
			return getRuleContexts(Cost_class_nameContext.class);
		}
		public Cost_class_nameContext cost_class_name(int i) {
			return getRuleContext(Cost_class_nameContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode VALUES() { return getToken(HanaParser.VALUES, 0); }
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode AUTO() { return getToken(HanaParser.AUTO, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Cost_matrix_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_matrix_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCost_matrix_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCost_matrix_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCost_matrix_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_matrix_clauseContext cost_matrix_clause() throws RecognitionException {
		Cost_matrix_clauseContext _localctx = new Cost_matrix_clauseContext(_ctx, getState());
		enterRule(_localctx, 692, RULE_cost_matrix_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4831);
			match(COST);
			setState(4849);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case MODEL:
				{
				setState(4832);
				match(MODEL);
				setState(4834);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AUTO) {
					{
					setState(4833);
					match(AUTO);
					}
				}

				}
				break;
			case LEFT_PAREN:
				{
				setState(4836);
				match(LEFT_PAREN);
				setState(4837);
				cost_class_name();
				setState(4842);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(4838);
					match(COMMA);
					setState(4839);
					cost_class_name();
					}
					}
					setState(4844);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(4845);
				match(RIGHT_PAREN);
				setState(4846);
				match(VALUES);
				setState(4847);
				expression_list();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_passing_clauseContext extends ParserRuleContext {
		public TerminalNode PASSING() { return getToken(HanaParser.PASSING, 0); }
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		public TerminalNode BY() { return getToken(HanaParser.BY, 0); }
		public TerminalNode VALUE() { return getToken(HanaParser.VALUE, 0); }
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Xml_passing_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_passing_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_passing_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_passing_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_passing_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_passing_clauseContext xml_passing_clause() throws RecognitionException {
		Xml_passing_clauseContext _localctx = new Xml_passing_clauseContext(_ctx, getState());
		enterRule(_localctx, 694, RULE_xml_passing_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4851);
			match(PASSING);
			setState(4854);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BY) {
				{
				setState(4852);
				match(BY);
				setState(4853);
				match(VALUE);
				}
			}

			setState(4856);
			expression_wrapper();
			setState(4858);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(4857);
				column_alias();
				}
			}

			{
			setState(4860);
			match(COMMA);
			setState(4861);
			expression_wrapper();
			setState(4863);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,608,_ctx) ) {
			case 1:
				{
				setState(4862);
				column_alias();
				}
				break;
			}
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_attributes_clauseContext extends ParserRuleContext {
		public TerminalNode XMLATTRIBUTES() { return getToken(HanaParser.XMLATTRIBUTES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<Xml_multiuse_expression_elementContext> xml_multiuse_expression_element() {
			return getRuleContexts(Xml_multiuse_expression_elementContext.class);
		}
		public Xml_multiuse_expression_elementContext xml_multiuse_expression_element(int i) {
			return getRuleContext(Xml_multiuse_expression_elementContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public TerminalNode ENTITYESCAPING() { return getToken(HanaParser.ENTITYESCAPING, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(HanaParser.NOENTITYESCAPING, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(HanaParser.SCHEMACHECK, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(HanaParser.NOSCHEMACHECK, 0); }
		public Xml_attributes_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_attributes_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_attributes_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_attributes_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_attributes_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_attributes_clauseContext xml_attributes_clause() throws RecognitionException {
		Xml_attributes_clauseContext _localctx = new Xml_attributes_clauseContext(_ctx, getState());
		enterRule(_localctx, 696, RULE_xml_attributes_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4865);
			match(XMLATTRIBUTES);
			setState(4866);
			match(LEFT_PAREN);
			setState(4868);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,609,_ctx) ) {
			case 1:
				{
				setState(4867);
				_la = _input.LA(1);
				if ( !(_la==ENTITYESCAPING || _la==NOENTITYESCAPING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4871);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,610,_ctx) ) {
			case 1:
				{
				setState(4870);
				_la = _input.LA(1);
				if ( !(_la==NOSCHEMACHECK || _la==SCHEMACHECK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			}
			setState(4873);
			xml_multiuse_expression_element();
			setState(4878);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4874);
				match(COMMA);
				setState(4875);
				xml_multiuse_expression_element();
				}
				}
				setState(4880);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4881);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_namespaces_clauseContext extends ParserRuleContext {
		public TerminalNode XMLNAMESPACES() { return getToken(HanaParser.XMLNAMESPACES, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<Concatenation_wrapperContext> concatenation_wrapper() {
			return getRuleContexts(Concatenation_wrapperContext.class);
		}
		public Concatenation_wrapperContext concatenation_wrapper(int i) {
			return getRuleContext(Concatenation_wrapperContext.class,i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_namespaces_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_namespaces_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_namespaces_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_namespaces_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_namespaces_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_namespaces_clauseContext xml_namespaces_clause() throws RecognitionException {
		Xml_namespaces_clauseContext _localctx = new Xml_namespaces_clauseContext(_ctx, getState());
		enterRule(_localctx, 698, RULE_xml_namespaces_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4883);
			match(XMLNAMESPACES);
			setState(4884);
			match(LEFT_PAREN);
			setState(4888);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,612,_ctx) ) {
			case 1:
				{
				setState(4885);
				concatenation_wrapper();
				setState(4886);
				column_alias();
				}
				break;
			}
			setState(4896);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(4890);
				match(COMMA);
				setState(4891);
				concatenation_wrapper();
				setState(4892);
				column_alias();
				}
				}
				setState(4898);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(4900);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==DEFAULT) {
				{
				setState(4899);
				xml_general_default_part();
				}
			}

			setState(4902);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_table_columnContext extends ParserRuleContext {
		public Xml_column_nameContext xml_column_name() {
			return getRuleContext(Xml_column_nameContext.class,0);
		}
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public TerminalNode ORDINALITY() { return getToken(HanaParser.ORDINALITY, 0); }
		public Type_specContext type_spec() {
			return getRuleContext(Type_specContext.class,0);
		}
		public TerminalNode PATH() { return getToken(HanaParser.PATH, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext xml_general_default_part() {
			return getRuleContext(Xml_general_default_partContext.class,0);
		}
		public Xml_table_columnContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_table_column; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_table_column(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_table_column(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_table_column(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_table_columnContext xml_table_column() throws RecognitionException {
		Xml_table_columnContext _localctx = new Xml_table_columnContext(_ctx, getState());
		enterRule(_localctx, 700, RULE_xml_table_column);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4904);
			xml_column_name();
			setState(4915);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case FOR:
				{
				setState(4905);
				match(FOR);
				setState(4906);
				match(ORDINALITY);
				}
				break;
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIGINT:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SECONDDATE:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case REGULAR_ID:
				{
				setState(4907);
				type_spec();
				setState(4910);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PATH) {
					{
					setState(4908);
					match(PATH);
					setState(4909);
					concatenation_wrapper();
					}
				}

				setState(4913);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==DEFAULT) {
					{
					setState(4912);
					xml_general_default_part();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_general_default_partContext extends ParserRuleContext {
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xml_general_default_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_general_default_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_general_default_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_general_default_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_general_default_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_general_default_partContext xml_general_default_part() throws RecognitionException {
		Xml_general_default_partContext _localctx = new Xml_general_default_partContext(_ctx, getState());
		enterRule(_localctx, 702, RULE_xml_general_default_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4917);
			match(DEFAULT);
			setState(4918);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_multiuse_expression_elementContext extends ParserRuleContext {
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode EVALNAME() { return getToken(HanaParser.EVALNAME, 0); }
		public ConcatenationContext concatenation() {
			return getRuleContext(ConcatenationContext.class,0);
		}
		public Xml_multiuse_expression_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_multiuse_expression_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_multiuse_expression_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_multiuse_expression_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_multiuse_expression_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_multiuse_expression_elementContext xml_multiuse_expression_element() throws RecognitionException {
		Xml_multiuse_expression_elementContext _localctx = new Xml_multiuse_expression_elementContext(_ctx, getState());
		enterRule(_localctx, 704, RULE_xml_multiuse_expression_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4920);
			expression();
			setState(4927);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AS) {
				{
				setState(4921);
				match(AS);
				setState(4925);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,618,_ctx) ) {
				case 1:
					{
					setState(4922);
					id_expression();
					}
					break;
				case 2:
					{
					setState(4923);
					match(EVALNAME);
					setState(4924);
					concatenation();
					}
					break;
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(HanaParser.VERSION, 0); }
		public TerminalNode NO() { return getToken(HanaParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(HanaParser.VALUE, 0); }
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public Xmlroot_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXmlroot_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXmlroot_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXmlroot_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_version_partContext xmlroot_param_version_part() throws RecognitionException {
		Xmlroot_param_version_partContext _localctx = new Xmlroot_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 706, RULE_xmlroot_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4929);
			match(VERSION);
			setState(4933);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,620,_ctx) ) {
			case 1:
				{
				setState(4930);
				match(NO);
				setState(4931);
				match(VALUE);
				}
				break;
			case 2:
				{
				setState(4932);
				expression_wrapper();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlroot_param_standalone_partContext extends ParserRuleContext {
		public TerminalNode STANDALONE() { return getToken(HanaParser.STANDALONE, 0); }
		public TerminalNode YES() { return getToken(HanaParser.YES, 0); }
		public TerminalNode NO() { return getToken(HanaParser.NO, 0); }
		public TerminalNode VALUE() { return getToken(HanaParser.VALUE, 0); }
		public Xmlroot_param_standalone_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlroot_param_standalone_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXmlroot_param_standalone_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXmlroot_param_standalone_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXmlroot_param_standalone_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlroot_param_standalone_partContext xmlroot_param_standalone_part() throws RecognitionException {
		Xmlroot_param_standalone_partContext _localctx = new Xmlroot_param_standalone_partContext(_ctx, getState());
		enterRule(_localctx, 708, RULE_xmlroot_param_standalone_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4935);
			match(STANDALONE);
			setState(4941);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case YES:
				{
				setState(4936);
				match(YES);
				}
				break;
			case NO:
				{
				setState(4937);
				match(NO);
				setState(4939);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==VALUE) {
					{
					setState(4938);
					match(VALUE);
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_enconding_partContext extends ParserRuleContext {
		public TerminalNode ENCODING() { return getToken(HanaParser.ENCODING, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_enconding_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_enconding_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXmlserialize_param_enconding_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXmlserialize_param_enconding_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXmlserialize_param_enconding_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_enconding_partContext xmlserialize_param_enconding_part() throws RecognitionException {
		Xmlserialize_param_enconding_partContext _localctx = new Xmlserialize_param_enconding_partContext(_ctx, getState());
		enterRule(_localctx, 710, RULE_xmlserialize_param_enconding_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4943);
			match(ENCODING);
			setState(4944);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_version_partContext extends ParserRuleContext {
		public TerminalNode VERSION() { return getToken(HanaParser.VERSION, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_version_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_version_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXmlserialize_param_version_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXmlserialize_param_version_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXmlserialize_param_version_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_version_partContext xmlserialize_param_version_part() throws RecognitionException {
		Xmlserialize_param_version_partContext _localctx = new Xmlserialize_param_version_partContext(_ctx, getState());
		enterRule(_localctx, 712, RULE_xmlserialize_param_version_part);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4946);
			match(VERSION);
			setState(4947);
			concatenation_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xmlserialize_param_ident_partContext extends ParserRuleContext {
		public TerminalNode NO() { return getToken(HanaParser.NO, 0); }
		public TerminalNode INDENT() { return getToken(HanaParser.INDENT, 0); }
		public TerminalNode SIZE() { return getToken(HanaParser.SIZE, 0); }
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public Concatenation_wrapperContext concatenation_wrapper() {
			return getRuleContext(Concatenation_wrapperContext.class,0);
		}
		public Xmlserialize_param_ident_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xmlserialize_param_ident_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXmlserialize_param_ident_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXmlserialize_param_ident_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXmlserialize_param_ident_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xmlserialize_param_ident_partContext xmlserialize_param_ident_part() throws RecognitionException {
		Xmlserialize_param_ident_partContext _localctx = new Xmlserialize_param_ident_partContext(_ctx, getState());
		enterRule(_localctx, 714, RULE_xmlserialize_param_ident_part);
		int _la;
		try {
			setState(4957);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NO:
				enterOuterAlt(_localctx, 1);
				{
				setState(4949);
				match(NO);
				setState(4950);
				match(INDENT);
				}
				break;
			case INDENT:
				enterOuterAlt(_localctx, 2);
				{
				setState(4951);
				match(INDENT);
				setState(4955);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==SIZE) {
					{
					setState(4952);
					match(SIZE);
					setState(4953);
					match(EQUALS_OP);
					setState(4954);
					concatenation_wrapper();
					}
				}

				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sql_plus_commandContext extends ParserRuleContext {
		public TerminalNode SOLIDUS() { return getToken(HanaParser.SOLIDUS, 0); }
		public Whenever_commandContext whenever_command() {
			return getRuleContext(Whenever_commandContext.class,0);
		}
		public Exit_commandContext exit_command() {
			return getRuleContext(Exit_commandContext.class,0);
		}
		public Prompt_commandContext prompt_command() {
			return getRuleContext(Prompt_commandContext.class,0);
		}
		public Set_commandContext set_command() {
			return getRuleContext(Set_commandContext.class,0);
		}
		public TerminalNode SEMICOLON() { return getToken(HanaParser.SEMICOLON, 0); }
		public Sql_plus_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sql_plus_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSql_plus_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSql_plus_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSql_plus_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sql_plus_commandContext sql_plus_command() throws RecognitionException {
		Sql_plus_commandContext _localctx = new Sql_plus_commandContext(_ctx, getState());
		enterRule(_localctx, 716, RULE_sql_plus_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4964);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case SOLIDUS:
				{
				setState(4959);
				match(SOLIDUS);
				}
				break;
			case WHENEVER:
				{
				setState(4960);
				whenever_command();
				}
				break;
			case EXIT:
				{
				setState(4961);
				exit_command();
				}
				break;
			case PROMPT:
				{
				setState(4962);
				prompt_command();
				}
				break;
			case SET:
				{
				setState(4963);
				set_command();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			setState(4967);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==SEMICOLON) {
				{
				setState(4966);
				match(SEMICOLON);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Whenever_commandContext extends ParserRuleContext {
		public TerminalNode WHENEVER() { return getToken(HanaParser.WHENEVER, 0); }
		public TerminalNode SQLERROR() { return getToken(HanaParser.SQLERROR, 0); }
		public TerminalNode OSERROR() { return getToken(HanaParser.OSERROR, 0); }
		public TerminalNode EXIT() { return getToken(HanaParser.EXIT, 0); }
		public TerminalNode CONTINUE() { return getToken(HanaParser.CONTINUE, 0); }
		public TerminalNode SUCCESS() { return getToken(HanaParser.SUCCESS, 0); }
		public TerminalNode FAILURE() { return getToken(HanaParser.FAILURE, 0); }
		public TerminalNode WARNING() { return getToken(HanaParser.WARNING, 0); }
		public TerminalNode COMMIT() { return getToken(HanaParser.COMMIT, 0); }
		public TerminalNode ROLLBACK() { return getToken(HanaParser.ROLLBACK, 0); }
		public TerminalNode NONE() { return getToken(HanaParser.NONE, 0); }
		public Whenever_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_whenever_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWhenever_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWhenever_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWhenever_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Whenever_commandContext whenever_command() throws RecognitionException {
		Whenever_commandContext _localctx = new Whenever_commandContext(_ctx, getState());
		enterRule(_localctx, 718, RULE_whenever_command);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4969);
			match(WHENEVER);
			setState(4970);
			_la = _input.LA(1);
			if ( !(_la==OSERROR || _la==SQLERROR) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4976);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case EXIT:
				{
				setState(4971);
				match(EXIT);
				setState(4972);
				_la = _input.LA(1);
				if ( !(_la==FAILURE || _la==SUCCESS || _la==WARNING) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(4973);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			case CONTINUE:
				{
				setState(4974);
				match(CONTINUE);
				setState(4975);
				_la = _input.LA(1);
				if ( !(_la==COMMIT || _la==NONE || _la==ROLLBACK) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Set_commandContext extends ParserRuleContext {
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		public List<Regular_idContext> regular_id() {
			return getRuleContexts(Regular_idContext.class);
		}
		public Regular_idContext regular_id(int i) {
			return getRuleContext(Regular_idContext.class,i);
		}
		public TerminalNode CHAR_STRING() { return getToken(HanaParser.CHAR_STRING, 0); }
		public TerminalNode ON() { return getToken(HanaParser.ON, 0); }
		public TerminalNode OFF() { return getToken(HanaParser.OFF, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Set_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_set_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSet_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSet_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSet_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Set_commandContext set_command() throws RecognitionException {
		Set_commandContext _localctx = new Set_commandContext(_ctx, getState());
		enterRule(_localctx, 720, RULE_set_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4978);
			match(SET);
			setState(4979);
			regular_id();
			setState(4985);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,628,_ctx) ) {
			case 1:
				{
				setState(4980);
				match(CHAR_STRING);
				}
				break;
			case 2:
				{
				setState(4981);
				match(ON);
				}
				break;
			case 3:
				{
				setState(4982);
				match(OFF);
				}
				break;
			case 4:
				{
				setState(4983);
				numeric();
				}
				break;
			case 5:
				{
				setState(4984);
				regular_id();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exit_commandContext extends ParserRuleContext {
		public TerminalNode EXIT() { return getToken(HanaParser.EXIT, 0); }
		public Exit_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exit_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterExit_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitExit_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitExit_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exit_commandContext exit_command() throws RecognitionException {
		Exit_commandContext _localctx = new Exit_commandContext(_ctx, getState());
		enterRule(_localctx, 722, RULE_exit_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4987);
			match(EXIT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Prompt_commandContext extends ParserRuleContext {
		public TerminalNode PROMPT() { return getToken(HanaParser.PROMPT, 0); }
		public Prompt_commandContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_prompt_command; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPrompt_command(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPrompt_command(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPrompt_command(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Prompt_commandContext prompt_command() throws RecognitionException {
		Prompt_commandContext _localctx = new Prompt_commandContext(_ctx, getState());
		enterRule(_localctx, 724, RULE_prompt_command);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4989);
			match(PROMPT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Partition_extension_clauseContext extends ParserRuleContext {
		public Expression_listContext expression_list() {
			return getRuleContext(Expression_listContext.class,0);
		}
		public TerminalNode SUBPARTITION() { return getToken(HanaParser.SUBPARTITION, 0); }
		public TerminalNode PARTITION() { return getToken(HanaParser.PARTITION, 0); }
		public TerminalNode FOR() { return getToken(HanaParser.FOR, 0); }
		public Partition_extension_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_partition_extension_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPartition_extension_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPartition_extension_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPartition_extension_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Partition_extension_clauseContext partition_extension_clause() throws RecognitionException {
		Partition_extension_clauseContext _localctx = new Partition_extension_clauseContext(_ctx, getState());
		enterRule(_localctx, 726, RULE_partition_extension_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(4991);
			_la = _input.LA(1);
			if ( !(_la==PARTITION || _la==SUBPARTITION) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(4993);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==FOR) {
				{
				setState(4992);
				match(FOR);
				}
			}

			setState(4995);
			expression_list();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public TerminalNode AS() { return getToken(HanaParser.AS, 0); }
		public Column_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_aliasContext column_alias() throws RecognitionException {
		Column_aliasContext _localctx = new Column_aliasContext(_ctx, getState());
		enterRule(_localctx, 728, RULE_column_alias);
		int _la;
		try {
			setState(5005);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,632,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(4998);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==AS) {
					{
					setState(4997);
					match(AS);
					}
				}

				setState(5002);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNS:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5000);
					id();
					}
					break;
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5001);
					alias_quoted_string();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5004);
				match(AS);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_aliasContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Alias_quoted_stringContext alias_quoted_string() {
			return getRuleContext(Alias_quoted_stringContext.class,0);
		}
		public Table_aliasContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_alias; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_alias(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_alias(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_alias(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_aliasContext table_alias() throws RecognitionException {
		Table_aliasContext _localctx = new Table_aliasContext(_ctx, getState());
		enterRule(_localctx, 730, RULE_table_alias);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5009);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5007);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				{
				setState(5008);
				alias_quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Alias_quoted_stringContext extends ParserRuleContext {
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Alias_quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_alias_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAlias_quoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAlias_quoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAlias_quoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Alias_quoted_stringContext alias_quoted_string() throws RecognitionException {
		Alias_quoted_stringContext _localctx = new Alias_quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 732, RULE_alias_quoted_string);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5011);
			quoted_string();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Where_clauseContext extends ParserRuleContext {
		public TerminalNode WHERE() { return getToken(HanaParser.WHERE, 0); }
		public Current_of_clauseContext current_of_clause() {
			return getRuleContext(Current_of_clauseContext.class,0);
		}
		public Condition_wrapperContext condition_wrapper() {
			return getRuleContext(Condition_wrapperContext.class,0);
		}
		public Where_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_where_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterWhere_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitWhere_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitWhere_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Where_clauseContext where_clause() throws RecognitionException {
		Where_clauseContext _localctx = new Where_clauseContext(_ctx, getState());
		enterRule(_localctx, 734, RULE_where_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5013);
			match(WHERE);
			setState(5016);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CURRENT:
				{
				setState(5014);
				current_of_clause();
				}
				break;
			case T__6:
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ALL:
			case ANALYZE:
			case ANY:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CASE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONNECT_BY_ROOT:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DATE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DISTINCT:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXISTS:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FALSE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NOT:
			case NULL:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case PRIOR:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUE:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case STRING_AGG:
			case CORR_SPEARMAN:
			case VAR:
			case STDDEV_POP:
			case VAR_POP:
			case STDDEV_SAMP:
			case VAR_SAMP:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case NATIONAL_CHAR_STRING_LIT:
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
			case CHAR_STRING:
			case DELIMITED_ID:
			case LEFT_PAREN:
			case PLUS_SIGN:
			case MINUS_SIGN:
			case BINDVAR:
			case COLON:
			case INTRODUCER:
			case REGULAR_ID:
				{
				setState(5015);
				condition_wrapper();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Current_of_clauseContext extends ParserRuleContext {
		public TerminalNode CURRENT() { return getToken(HanaParser.CURRENT, 0); }
		public TerminalNode OF() { return getToken(HanaParser.OF, 0); }
		public Cursor_nameContext cursor_name() {
			return getRuleContext(Cursor_nameContext.class,0);
		}
		public Current_of_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_current_of_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCurrent_of_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCurrent_of_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCurrent_of_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Current_of_clauseContext current_of_clause() throws RecognitionException {
		Current_of_clauseContext _localctx = new Current_of_clauseContext(_ctx, getState());
		enterRule(_localctx, 736, RULE_current_of_clause);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5018);
			match(CURRENT);
			setState(5019);
			match(OF);
			setState(5020);
			cursor_name();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Into_clauseContext extends ParserRuleContext {
		public TerminalNode INTO() { return getToken(HanaParser.INTO, 0); }
		public List<Variable_nameContext> variable_name() {
			return getRuleContexts(Variable_nameContext.class);
		}
		public Variable_nameContext variable_name(int i) {
			return getRuleContext(Variable_nameContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public TerminalNode BULK() { return getToken(HanaParser.BULK, 0); }
		public TerminalNode COLLECT() { return getToken(HanaParser.COLLECT, 0); }
		public Into_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_into_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterInto_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitInto_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitInto_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Into_clauseContext into_clause() throws RecognitionException {
		Into_clauseContext _localctx = new Into_clauseContext(_ctx, getState());
		enterRule(_localctx, 738, RULE_into_clause);
		int _la;
		try {
			setState(5042);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case INTO:
				enterOuterAlt(_localctx, 1);
				{
				setState(5022);
				match(INTO);
				setState(5023);
				variable_name();
				setState(5028);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5024);
					match(COMMA);
					setState(5025);
					variable_name();
					}
					}
					setState(5030);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			case BULK:
				enterOuterAlt(_localctx, 2);
				{
				setState(5031);
				match(BULK);
				setState(5032);
				match(COLLECT);
				setState(5033);
				match(INTO);
				setState(5034);
				variable_name();
				setState(5039);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5035);
					match(COMMA);
					setState(5036);
					variable_name();
					}
					}
					setState(5041);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Xml_column_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Quoted_stringContext quoted_string() {
			return getRuleContext(Quoted_stringContext.class,0);
		}
		public Xml_column_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_xml_column_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterXml_column_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitXml_column_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitXml_column_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Xml_column_nameContext xml_column_name() throws RecognitionException {
		Xml_column_nameContext _localctx = new Xml_column_nameContext(_ctx, getState());
		enterRule(_localctx, 740, RULE_xml_column_name);
		try {
			setState(5046);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5044);
				id();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 2);
				{
				setState(5045);
				quoted_string();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cost_class_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Cost_class_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cost_class_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCost_class_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCost_class_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCost_class_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cost_class_nameContext cost_class_name() throws RecognitionException {
		Cost_class_nameContext _localctx = new Cost_class_nameContext(_ctx, getState());
		enterRule(_localctx, 742, RULE_cost_class_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5048);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Attribute_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Attribute_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_attribute_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAttribute_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAttribute_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAttribute_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Attribute_nameContext attribute_name() throws RecognitionException {
		Attribute_nameContext _localctx = new Attribute_nameContext(_ctx, getState());
		enterRule(_localctx, 744, RULE_attribute_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5050);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Savepoint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Savepoint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_savepoint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSavepoint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSavepoint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSavepoint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Savepoint_nameContext savepoint_name() throws RecognitionException {
		Savepoint_nameContext _localctx = new Savepoint_nameContext(_ctx, getState());
		enterRule(_localctx, 746, RULE_savepoint_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5052);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Rollback_segment_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Rollback_segment_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rollback_segment_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRollback_segment_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRollback_segment_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRollback_segment_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Rollback_segment_nameContext rollback_segment_name() throws RecognitionException {
		Rollback_segment_nameContext _localctx = new Rollback_segment_nameContext(_ctx, getState());
		enterRule(_localctx, 748, RULE_rollback_segment_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5054);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_var_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Table_var_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_var_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_var_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_var_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_var_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_var_nameContext table_var_name() throws RecognitionException {
		Table_var_nameContext _localctx = new Table_var_nameContext(_ctx, getState());
		enterRule(_localctx, 750, RULE_table_var_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5056);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Schema_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_schema_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSchema_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSchema_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSchema_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Schema_nameContext schema_name() throws RecognitionException {
		Schema_nameContext _localctx = new Schema_nameContext(_ctx, getState());
		enterRule(_localctx, 752, RULE_schema_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5058);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Routine_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AT_SIGN() { return getToken(HanaParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Routine_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_routine_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRoutine_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRoutine_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRoutine_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Routine_nameContext routine_name() throws RecognitionException {
		Routine_nameContext _localctx = new Routine_nameContext(_ctx, getState());
		enterRule(_localctx, 754, RULE_routine_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5060);
			id();
			setState(5065);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5061);
				match(PERIOD);
				setState(5062);
				id_expression();
				}
				}
				setState(5067);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5070);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5068);
				match(AT_SIGN);
				setState(5069);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Package_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Package_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_package_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPackage_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPackage_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPackage_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Package_nameContext package_name() throws RecognitionException {
		Package_nameContext _localctx = new Package_nameContext(_ctx, getState());
		enterRule(_localctx, 756, RULE_package_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5072);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Implementation_type_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Implementation_type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_implementation_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterImplementation_type_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitImplementation_type_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitImplementation_type_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Implementation_type_nameContext implementation_type_name() throws RecognitionException {
		Implementation_type_nameContext _localctx = new Implementation_type_nameContext(_ctx, getState());
		enterRule(_localctx, 758, RULE_implementation_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5074);
			id();
			setState(5077);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5075);
				match(PERIOD);
				setState(5076);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Reference_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Reference_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_reference_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterReference_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitReference_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitReference_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Reference_model_nameContext reference_model_name() throws RecognitionException {
		Reference_model_nameContext _localctx = new Reference_model_nameContext(_ctx, getState());
		enterRule(_localctx, 760, RULE_reference_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5079);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Main_model_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Main_model_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_main_model_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterMain_model_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitMain_model_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitMain_model_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Main_model_nameContext main_model_name() throws RecognitionException {
		Main_model_nameContext _localctx = new Main_model_nameContext(_ctx, getState());
		enterRule(_localctx, 762, RULE_main_model_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5081);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Aggregate_function_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Aggregate_function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_aggregate_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterAggregate_function_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitAggregate_function_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitAggregate_function_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Aggregate_function_nameContext aggregate_function_name() throws RecognitionException {
		Aggregate_function_nameContext _localctx = new Aggregate_function_nameContext(_ctx, getState());
		enterRule(_localctx, 764, RULE_aggregate_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5083);
			id();
			setState(5088);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5084);
				match(PERIOD);
				setState(5085);
				id_expression();
				}
				}
				setState(5090);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Query_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Query_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_query_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterQuery_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitQuery_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitQuery_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Query_nameContext query_name() throws RecognitionException {
		Query_nameContext _localctx = new Query_nameContext(_ctx, getState());
		enterRule(_localctx, 766, RULE_query_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5091);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Constraint_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode AT_SIGN() { return getToken(HanaParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Constraint_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constraint_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConstraint_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConstraint_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConstraint_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Constraint_nameContext constraint_name() throws RecognitionException {
		Constraint_nameContext _localctx = new Constraint_nameContext(_ctx, getState());
		enterRule(_localctx, 768, RULE_constraint_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5093);
			id();
			setState(5098);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5094);
				match(PERIOD);
				setState(5095);
				id_expression();
				}
				}
				setState(5100);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5103);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==AT_SIGN) {
				{
				setState(5101);
				match(AT_SIGN);
				setState(5102);
				link_name();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Label_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Label_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_label_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLabel_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLabel_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLabel_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Label_nameContext label_name() throws RecognitionException {
		Label_nameContext _localctx = new Label_nameContext(_ctx, getState());
		enterRule(_localctx, 770, RULE_label_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5105);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public Type_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_nameContext type_name() throws RecognitionException {
		Type_nameContext _localctx = new Type_nameContext(_ctx, getState());
		enterRule(_localctx, 772, RULE_type_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5107);
			id_expression();
			setState(5112);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5108);
				match(PERIOD);
				setState(5109);
				id_expression();
				}
				}
				setState(5114);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Sequence_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public Sequence_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_sequence_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterSequence_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitSequence_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitSequence_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Sequence_nameContext sequence_name() throws RecognitionException {
		Sequence_nameContext _localctx = new Sequence_nameContext(_ctx, getState());
		enterRule(_localctx, 774, RULE_sequence_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5115);
			id_expression();
			setState(5120);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5116);
				match(PERIOD);
				setState(5117);
				id_expression();
				}
				}
				setState(5122);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Exception_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Exception_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_exception_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterException_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitException_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitException_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Exception_nameContext exception_name() throws RecognitionException {
		Exception_nameContext _localctx = new Exception_nameContext(_ctx, getState());
		enterRule(_localctx, 776, RULE_exception_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5123);
			id();
			setState(5128);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5124);
				match(PERIOD);
				setState(5125);
				id_expression();
				}
				}
				setState(5130);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Function_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunction_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunction_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunction_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_nameContext function_name() throws RecognitionException {
		Function_nameContext _localctx = new Function_nameContext(_ctx, getState());
		enterRule(_localctx, 778, RULE_function_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5131);
			id();
			setState(5134);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5132);
				match(PERIOD);
				setState(5133);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Proc_nameContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Schema_nameContext schema_name() {
			return getRuleContext(Schema_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		public Proc_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_proc_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterProc_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitProc_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitProc_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Proc_nameContext proc_name() throws RecognitionException {
		Proc_nameContext _localctx = new Proc_nameContext(_ctx, getState());
		enterRule(_localctx, 780, RULE_proc_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5139);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,649,_ctx) ) {
			case 1:
				{
				setState(5136);
				schema_name();
				setState(5137);
				match(PERIOD);
				}
				break;
			}
			setState(5141);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Trigger_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Trigger_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_trigger_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTrigger_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTrigger_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTrigger_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Trigger_nameContext trigger_name() throws RecognitionException {
		Trigger_nameContext _localctx = new Trigger_nameContext(_ctx, getState());
		enterRule(_localctx, 782, RULE_trigger_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5143);
			id();
			setState(5146);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5144);
				match(PERIOD);
				setState(5145);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Variable_name_oldContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(HanaParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Variable_name_oldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable_name_old; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterVariable_name_old(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitVariable_name_old(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitVariable_name_old(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Variable_name_oldContext variable_name_old() throws RecognitionException {
		Variable_name_oldContext _localctx = new Variable_name_oldContext(_ctx, getState());
		enterRule(_localctx, 784, RULE_variable_name_old);
		int _la;
		try {
			setState(5158);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5150);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==INTRODUCER) {
					{
					setState(5148);
					match(INTRODUCER);
					setState(5149);
					char_set_name();
					}
				}

				setState(5152);
				id_expression();
				setState(5155);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERIOD) {
					{
					setState(5153);
					match(PERIOD);
					setState(5154);
					id_expression();
					}
				}

				}
				break;
			case T__6:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5157);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Index_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Index_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_index_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterIndex_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitIndex_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitIndex_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Index_nameContext index_name() throws RecognitionException {
		Index_nameContext _localctx = new Index_nameContext(_ctx, getState());
		enterRule(_localctx, 786, RULE_index_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5160);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Cursor_name_oldContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Cursor_name_oldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_cursor_name_old; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCursor_name_old(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCursor_name_old(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCursor_name_old(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Cursor_name_oldContext cursor_name_old() throws RecognitionException {
		Cursor_name_oldContext _localctx = new Cursor_name_oldContext(_ctx, getState());
		enterRule(_localctx, 788, RULE_cursor_name_old);
		try {
			setState(5164);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5162);
				id();
				}
				break;
			case T__6:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5163);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Record_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Bind_variableContext bind_variable() {
			return getRuleContext(Bind_variableContext.class,0);
		}
		public Record_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_record_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRecord_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRecord_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRecord_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Record_nameContext record_name() throws RecognitionException {
		Record_nameContext _localctx = new Record_nameContext(_ctx, getState());
		enterRule(_localctx, 790, RULE_record_name);
		try {
			setState(5168);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case DELIMITED_ID:
			case INTRODUCER:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5166);
				id();
				}
				break;
			case T__6:
			case SQL_ERROR_CODE:
			case SQL_ERROR_MESSAGE:
			case BINDVAR:
			case COLON:
				enterOuterAlt(_localctx, 2);
				{
				setState(5167);
				bind_variable();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Collection_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public Collection_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_collection_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterCollection_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitCollection_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitCollection_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Collection_nameContext collection_name() throws RecognitionException {
		Collection_nameContext _localctx = new Collection_nameContext(_ctx, getState());
		enterRule(_localctx, 792, RULE_collection_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5170);
			id();
			setState(5173);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==PERIOD) {
				{
				setState(5171);
				match(PERIOD);
				setState(5172);
				id_expression();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Link_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public Link_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_link_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLink_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLink_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLink_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Link_nameContext link_name() throws RecognitionException {
		Link_nameContext _localctx = new Link_nameContext(_ctx, getState());
		enterRule(_localctx, 794, RULE_link_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5175);
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Column_name_oldContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public Column_name_oldContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_column_name_old; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterColumn_name_old(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitColumn_name_old(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitColumn_name_old(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Column_name_oldContext column_name_old() throws RecognitionException {
		Column_name_oldContext _localctx = new Column_name_oldContext(_ctx, getState());
		enterRule(_localctx, 796, RULE_column_name_old);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5177);
			id();
			setState(5182);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5178);
				match(PERIOD);
				setState(5179);
				id_expression();
				}
				}
				setState(5184);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Tableview_nameContext extends ParserRuleContext {
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode AT_SIGN() { return getToken(HanaParser.AT_SIGN, 0); }
		public Link_nameContext link_name() {
			return getRuleContext(Link_nameContext.class,0);
		}
		public Partition_extension_clauseContext partition_extension_clause() {
			return getRuleContext(Partition_extension_clauseContext.class,0);
		}
		public Tableview_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_tableview_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTableview_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTableview_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTableview_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Tableview_nameContext tableview_name() throws RecognitionException {
		Tableview_nameContext _localctx = new Tableview_nameContext(_ctx, getState());
		enterRule(_localctx, 798, RULE_tableview_name);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5185);
			id();
			setState(5188);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,658,_ctx) ) {
			case 1:
				{
				setState(5186);
				match(PERIOD);
				setState(5187);
				id_expression();
				}
				break;
			}
			setState(5193);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,659,_ctx) ) {
			case 1:
				{
				setState(5190);
				match(AT_SIGN);
				setState(5191);
				link_name();
				}
				break;
			case 2:
				{
				setState(5192);
				partition_extension_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Char_set_nameContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public Char_set_nameContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_char_set_name; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterChar_set_name(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitChar_set_name(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitChar_set_name(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Char_set_nameContext char_set_name() throws RecognitionException {
		Char_set_nameContext _localctx = new Char_set_nameContext(_ctx, getState());
		enterRule(_localctx, 800, RULE_char_set_name);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5195);
			id_expression();
			setState(5200);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5196);
				match(PERIOD);
				setState(5197);
				id_expression();
				}
				}
				setState(5202);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Keep_clauseContext extends ParserRuleContext {
		public TerminalNode KEEP() { return getToken(HanaParser.KEEP, 0); }
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode DENSE_RANK() { return getToken(HanaParser.DENSE_RANK, 0); }
		public Order_by_clauseContext order_by_clause() {
			return getRuleContext(Order_by_clauseContext.class,0);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode FIRST() { return getToken(HanaParser.FIRST, 0); }
		public TerminalNode LAST() { return getToken(HanaParser.LAST, 0); }
		public Over_clauseContext over_clause() {
			return getRuleContext(Over_clauseContext.class,0);
		}
		public Keep_clauseContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_keep_clause; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterKeep_clause(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitKeep_clause(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitKeep_clause(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Keep_clauseContext keep_clause() throws RecognitionException {
		Keep_clauseContext _localctx = new Keep_clauseContext(_ctx, getState());
		enterRule(_localctx, 802, RULE_keep_clause);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5203);
			match(KEEP);
			setState(5204);
			match(LEFT_PAREN);
			setState(5205);
			match(DENSE_RANK);
			setState(5206);
			_la = _input.LA(1);
			if ( !(_la==FIRST || _la==LAST) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5207);
			order_by_clause();
			setState(5208);
			match(RIGHT_PAREN);
			setState(5210);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,661,_ctx) ) {
			case 1:
				{
				setState(5209);
				over_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argumentContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public Function_argumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunction_argument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunction_argument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunction_argument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argumentContext function_argument() throws RecognitionException {
		Function_argumentContext _localctx = new Function_argumentContext(_ctx, getState());
		enterRule(_localctx, 804, RULE_function_argument);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5212);
			match(LEFT_PAREN);
			setState(5214);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NOT - 257)) | (1L << (NULL - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (PRIOR - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUE - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (UNSIGNED_INTEGER - 513)) | (1L << (APPROXIMATE_NUM_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (PLUS_SIGN - 513)) | (1L << (MINUS_SIGN - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(5213);
				argument();
				}
			}

			setState(5220);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5216);
				match(COMMA);
				setState(5217);
				argument();
				}
				}
				setState(5222);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5223);
			match(RIGHT_PAREN);
			setState(5225);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,664,_ctx) ) {
			case 1:
				{
				setState(5224);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_analyticContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public List<ArgumentContext> argument() {
			return getRuleContexts(ArgumentContext.class);
		}
		public ArgumentContext argument(int i) {
			return getRuleContext(ArgumentContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<Respect_or_ignore_nullsContext> respect_or_ignore_nulls() {
			return getRuleContexts(Respect_or_ignore_nullsContext.class);
		}
		public Respect_or_ignore_nullsContext respect_or_ignore_nulls(int i) {
			return getRuleContext(Respect_or_ignore_nullsContext.class,i);
		}
		public Function_argument_analyticContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_analytic; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunction_argument_analytic(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunction_argument_analytic(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunction_argument_analytic(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_analyticContext function_argument_analytic() throws RecognitionException {
		Function_argument_analyticContext _localctx = new Function_argument_analyticContext(_ctx, getState());
		enterRule(_localctx, 806, RULE_function_argument_analytic);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5227);
			match(LEFT_PAREN);
			setState(5232);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__6) | (1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ALL) | (1L << ANALYZE) | (1L << ANY) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CASE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONNECT_BY_ROOT - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DATE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DISTINCT - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXISTS - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FALSE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NOT - 257)) | (1L << (NULL - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (PRIOR - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUE - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (SQL_ERROR_CODE - 449)) | (1L << (SQL_ERROR_MESSAGE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (UNSIGNED_INTEGER - 513)) | (1L << (APPROXIMATE_NUM_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (LEFT_PAREN - 513)) | (1L << (PLUS_SIGN - 513)) | (1L << (MINUS_SIGN - 513)) | (1L << (BINDVAR - 513)) | (1L << (COLON - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
				{
				setState(5228);
				argument();
				setState(5230);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5229);
					respect_or_ignore_nulls();
					}
				}

				}
			}

			setState(5241);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(5234);
				match(COMMA);
				setState(5235);
				argument();
				setState(5237);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==IGNORE || _la==RESPECT) {
					{
					setState(5236);
					respect_or_ignore_nulls();
					}
				}

				}
				}
				setState(5243);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(5244);
			match(RIGHT_PAREN);
			setState(5246);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,669,_ctx) ) {
			case 1:
				{
				setState(5245);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Function_argument_modelingContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public Column_nameContext column_name() {
			return getRuleContext(Column_nameContext.class,0);
		}
		public TerminalNode USING() { return getToken(HanaParser.USING, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Tableview_nameContext tableview_name() {
			return getRuleContext(Tableview_nameContext.class,0);
		}
		public TerminalNode PERIOD() { return getToken(HanaParser.PERIOD, 0); }
		public TerminalNode ASTERISK() { return getToken(HanaParser.ASTERISK, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(HanaParser.COMMA); }
		public TerminalNode COMMA(int i) {
			return getToken(HanaParser.COMMA, i);
		}
		public Keep_clauseContext keep_clause() {
			return getRuleContext(Keep_clauseContext.class,0);
		}
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public List<TerminalNode> NULL() { return getTokens(HanaParser.NULL); }
		public TerminalNode NULL(int i) {
			return getToken(HanaParser.NULL, i);
		}
		public List<Column_aliasContext> column_alias() {
			return getRuleContexts(Column_aliasContext.class);
		}
		public Column_aliasContext column_alias(int i) {
			return getRuleContext(Column_aliasContext.class,i);
		}
		public Function_argument_modelingContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_function_argument_modeling; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterFunction_argument_modeling(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitFunction_argument_modeling(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitFunction_argument_modeling(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Function_argument_modelingContext function_argument_modeling() throws RecognitionException {
		Function_argument_modelingContext _localctx = new Function_argument_modelingContext(_ctx, getState());
		enterRule(_localctx, 808, RULE_function_argument_modeling);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5248);
			match(LEFT_PAREN);
			setState(5249);
			column_name();
			setState(5262);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5250);
				match(COMMA);
				setState(5253);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case UNSIGNED_INTEGER:
				case APPROXIMATE_NUM_LIT:
					{
					setState(5251);
					numeric();
					}
					break;
				case NULL:
					{
					setState(5252);
					match(NULL);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5260);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==COMMA) {
					{
					setState(5255);
					match(COMMA);
					setState(5258);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
					case APPROXIMATE_NUM_LIT:
						{
						setState(5256);
						numeric();
						}
						break;
					case NULL:
						{
						setState(5257);
						match(NULL);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
				}

				}
			}

			setState(5264);
			match(USING);
			setState(5284);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,677,_ctx) ) {
			case 1:
				{
				setState(5265);
				tableview_name();
				setState(5266);
				match(PERIOD);
				setState(5267);
				match(ASTERISK);
				}
				break;
			case 2:
				{
				setState(5269);
				match(ASTERISK);
				}
				break;
			case 3:
				{
				setState(5270);
				expression();
				setState(5272);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
					{
					setState(5271);
					column_alias();
					}
				}

				setState(5281);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while (_la==COMMA) {
					{
					{
					setState(5274);
					match(COMMA);
					setState(5275);
					expression();
					setState(5277);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << AS) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (NATIONAL_CHAR_STRING_LIT - 513)) | (1L << (CHAR_STRING - 513)) | (1L << (DELIMITED_ID - 513)) | (1L << (INTRODUCER - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) {
						{
						setState(5276);
						column_alias();
						}
					}

					}
					}
					setState(5283);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				}
				break;
			}
			setState(5286);
			match(RIGHT_PAREN);
			setState(5288);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,678,_ctx) ) {
			case 1:
				{
				setState(5287);
				keep_clause();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Respect_or_ignore_nullsContext extends ParserRuleContext {
		public TerminalNode NULLS() { return getToken(HanaParser.NULLS, 0); }
		public TerminalNode RESPECT() { return getToken(HanaParser.RESPECT, 0); }
		public TerminalNode IGNORE() { return getToken(HanaParser.IGNORE, 0); }
		public Respect_or_ignore_nullsContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_respect_or_ignore_nulls; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRespect_or_ignore_nulls(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRespect_or_ignore_nulls(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRespect_or_ignore_nulls(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Respect_or_ignore_nullsContext respect_or_ignore_nulls() throws RecognitionException {
		Respect_or_ignore_nullsContext _localctx = new Respect_or_ignore_nullsContext(_ctx, getState());
		enterRule(_localctx, 810, RULE_respect_or_ignore_nulls);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5290);
			_la = _input.LA(1);
			if ( !(_la==IGNORE || _la==RESPECT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			setState(5291);
			match(NULLS);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArgumentContext extends ParserRuleContext {
		public Expression_wrapperContext expression_wrapper() {
			return getRuleContext(Expression_wrapperContext.class,0);
		}
		public IdContext id() {
			return getRuleContext(IdContext.class,0);
		}
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(HanaParser.GREATER_THAN_OP, 0); }
		public ArgumentContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_argument; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterArgument(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitArgument(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitArgument(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArgumentContext argument() throws RecognitionException {
		ArgumentContext _localctx = new ArgumentContext(_ctx, getState());
		enterRule(_localctx, 812, RULE_argument);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5297);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,679,_ctx) ) {
			case 1:
				{
				setState(5293);
				id();
				setState(5294);
				match(EQUALS_OP);
				setState(5295);
				match(GREATER_THAN_OP);
				}
				break;
			}
			setState(5299);
			expression_wrapper();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Type_specContext extends ParserRuleContext {
		public DatatypeContext datatype() {
			return getRuleContext(DatatypeContext.class,0);
		}
		public Type_nameContext type_name() {
			return getRuleContext(Type_nameContext.class,0);
		}
		public TerminalNode REF() { return getToken(HanaParser.REF, 0); }
		public TerminalNode PERCENT_ROWTYPE() { return getToken(HanaParser.PERCENT_ROWTYPE, 0); }
		public TerminalNode PERCENT_TYPE() { return getToken(HanaParser.PERCENT_TYPE, 0); }
		public Type_specContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type_spec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterType_spec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitType_spec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitType_spec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Type_specContext type_spec() throws RecognitionException {
		Type_specContext _localctx = new Type_specContext(_ctx, getState());
		enterRule(_localctx, 814, RULE_type_spec);
		int _la;
		try {
			setState(5309);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,682,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5301);
				datatype();
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5303);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,680,_ctx) ) {
				case 1:
					{
					setState(5302);
					match(REF);
					}
					break;
				}
				setState(5305);
				type_name();
				setState(5307);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) {
					{
					setState(5306);
					_la = _input.LA(1);
					if ( !(_la==PERCENT_ROWTYPE || _la==PERCENT_TYPE) ) {
					_errHandler.recoverInline(this);
					}
					else {
						if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
						_errHandler.reportMatch(this);
						consume();
					}
					}
				}

				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class DatatypeContext extends ParserRuleContext {
		public Native_datatype_elementContext native_datatype_element() {
			return getRuleContext(Native_datatype_elementContext.class,0);
		}
		public Precision_partContext precision_part() {
			return getRuleContext(Precision_partContext.class,0);
		}
		public TerminalNode WITH() { return getToken(HanaParser.WITH, 0); }
		public TerminalNode TIME() { return getToken(HanaParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(HanaParser.ZONE, 0); }
		public TerminalNode LOCAL() { return getToken(HanaParser.LOCAL, 0); }
		public TerminalNode INTERVAL() { return getToken(HanaParser.INTERVAL, 0); }
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		public TerminalNode YEAR() { return getToken(HanaParser.YEAR, 0); }
		public TerminalNode DAY() { return getToken(HanaParser.DAY, 0); }
		public TerminalNode MONTH() { return getToken(HanaParser.MONTH, 0); }
		public TerminalNode SECOND() { return getToken(HanaParser.SECOND, 0); }
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		public List<Expression_wrapperContext> expression_wrapper() {
			return getRuleContexts(Expression_wrapperContext.class);
		}
		public Expression_wrapperContext expression_wrapper(int i) {
			return getRuleContext(Expression_wrapperContext.class,i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		public DatatypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_datatype; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterDatatype(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitDatatype(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitDatatype(this);
			else return visitor.visitChildren(this);
		}
	}

	public final DatatypeContext datatype() throws RecognitionException {
		DatatypeContext _localctx = new DatatypeContext(_ctx, getState());
		enterRule(_localctx, 816, RULE_datatype);
		int _la;
		try {
			setState(5339);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BIGINT:
			case BLOB:
			case BOOLEAN:
			case CHAR:
			case CHARACTER:
			case CLOB:
			case DATE:
			case DAY:
			case DEC:
			case DECIMAL:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case FLOAT:
			case HOUR:
			case INT:
			case INTEGER:
			case LONG:
			case MINUTE:
			case MLSLABEL:
			case MONTH:
			case NATURAL:
			case NATURALN:
			case NCHAR:
			case NCLOB:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case RAW:
			case REAL:
			case ROWID:
			case SECOND:
			case SECONDDATE:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SMALLINT:
			case STRING:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case UROWID:
			case VARCHAR:
			case VARCHAR2:
			case YEAR:
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 1);
				{
				setState(5311);
				native_datatype_element();
				setState(5313);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,683,_ctx) ) {
				case 1:
					{
					setState(5312);
					precision_part();
					}
					break;
				}
				setState(5321);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,685,_ctx) ) {
				case 1:
					{
					setState(5315);
					match(WITH);
					setState(5317);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==LOCAL) {
						{
						setState(5316);
						match(LOCAL);
						}
					}

					setState(5319);
					match(TIME);
					setState(5320);
					match(ZONE);
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5323);
				match(INTERVAL);
				setState(5324);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==YEAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5329);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==LEFT_PAREN) {
					{
					setState(5325);
					match(LEFT_PAREN);
					setState(5326);
					expression_wrapper();
					setState(5327);
					match(RIGHT_PAREN);
					}
				}

				setState(5331);
				match(TO);
				setState(5332);
				_la = _input.LA(1);
				if ( !(_la==MONTH || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5337);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,687,_ctx) ) {
				case 1:
					{
					setState(5333);
					match(LEFT_PAREN);
					setState(5334);
					expression_wrapper();
					setState(5335);
					match(RIGHT_PAREN);
					}
					break;
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Precision_partContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public List<NumericContext> numeric() {
			return getRuleContexts(NumericContext.class);
		}
		public NumericContext numeric(int i) {
			return getRuleContext(NumericContext.class,i);
		}
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		public TerminalNode CHAR() { return getToken(HanaParser.CHAR, 0); }
		public TerminalNode BYTE() { return getToken(HanaParser.BYTE, 0); }
		public Precision_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_precision_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterPrecision_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitPrecision_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitPrecision_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Precision_partContext precision_part() throws RecognitionException {
		Precision_partContext _localctx = new Precision_partContext(_ctx, getState());
		enterRule(_localctx, 818, RULE_precision_part);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5341);
			match(LEFT_PAREN);
			setState(5342);
			numeric();
			setState(5345);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==COMMA) {
				{
				setState(5343);
				match(COMMA);
				setState(5344);
				numeric();
				}
			}

			setState(5348);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==BYTE || _la==CHAR) {
				{
				setState(5347);
				_la = _input.LA(1);
				if ( !(_la==BYTE || _la==CHAR) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				}
			}

			setState(5350);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Native_datatype_elementContext extends ParserRuleContext {
		public TerminalNode BINARY_INTEGER() { return getToken(HanaParser.BINARY_INTEGER, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(HanaParser.PLS_INTEGER, 0); }
		public TerminalNode NATURAL() { return getToken(HanaParser.NATURAL, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(HanaParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(HanaParser.BINARY_DOUBLE, 0); }
		public TerminalNode BIGINT() { return getToken(HanaParser.BIGINT, 0); }
		public TerminalNode NATURALN() { return getToken(HanaParser.NATURALN, 0); }
		public TerminalNode POSITIVE() { return getToken(HanaParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(HanaParser.POSITIVEN, 0); }
		public TerminalNode SECONDDATE() { return getToken(HanaParser.SECONDDATE, 0); }
		public TerminalNode SIGNTYPE() { return getToken(HanaParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(HanaParser.SIMPLE_INTEGER, 0); }
		public TerminalNode NVARCHAR() { return getToken(HanaParser.NVARCHAR, 0); }
		public TerminalNode DEC() { return getToken(HanaParser.DEC, 0); }
		public TerminalNode INTEGER() { return getToken(HanaParser.INTEGER, 0); }
		public TerminalNode INT() { return getToken(HanaParser.INT, 0); }
		public TerminalNode NUMERIC() { return getToken(HanaParser.NUMERIC, 0); }
		public TerminalNode SMALLINT() { return getToken(HanaParser.SMALLINT, 0); }
		public TerminalNode NUMBER() { return getToken(HanaParser.NUMBER, 0); }
		public TerminalNode DECIMAL() { return getToken(HanaParser.DECIMAL, 0); }
		public TerminalNode DOUBLE() { return getToken(HanaParser.DOUBLE, 0); }
		public TerminalNode PRECISION() { return getToken(HanaParser.PRECISION, 0); }
		public TerminalNode FLOAT() { return getToken(HanaParser.FLOAT, 0); }
		public TerminalNode REAL() { return getToken(HanaParser.REAL, 0); }
		public TerminalNode NCHAR() { return getToken(HanaParser.NCHAR, 0); }
		public TerminalNode LONG() { return getToken(HanaParser.LONG, 0); }
		public TerminalNode RAW() { return getToken(HanaParser.RAW, 0); }
		public TerminalNode CHAR() { return getToken(HanaParser.CHAR, 0); }
		public TerminalNode CHARACTER() { return getToken(HanaParser.CHARACTER, 0); }
		public TerminalNode VARCHAR2() { return getToken(HanaParser.VARCHAR2, 0); }
		public TerminalNode VARCHAR() { return getToken(HanaParser.VARCHAR, 0); }
		public TerminalNode STRING() { return getToken(HanaParser.STRING, 0); }
		public TerminalNode BOOLEAN() { return getToken(HanaParser.BOOLEAN, 0); }
		public TerminalNode DATE() { return getToken(HanaParser.DATE, 0); }
		public TerminalNode ROWID() { return getToken(HanaParser.ROWID, 0); }
		public TerminalNode UROWID() { return getToken(HanaParser.UROWID, 0); }
		public TerminalNode YEAR() { return getToken(HanaParser.YEAR, 0); }
		public TerminalNode MONTH() { return getToken(HanaParser.MONTH, 0); }
		public TerminalNode DAY() { return getToken(HanaParser.DAY, 0); }
		public TerminalNode HOUR() { return getToken(HanaParser.HOUR, 0); }
		public TerminalNode MINUTE() { return getToken(HanaParser.MINUTE, 0); }
		public TerminalNode SECOND() { return getToken(HanaParser.SECOND, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(HanaParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(HanaParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(HanaParser.TIMEZONE_REGION, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(HanaParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMESTAMP() { return getToken(HanaParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(HanaParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(HanaParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(HanaParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(HanaParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(HanaParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode BFILE() { return getToken(HanaParser.BFILE, 0); }
		public TerminalNode BLOB() { return getToken(HanaParser.BLOB, 0); }
		public TerminalNode CLOB() { return getToken(HanaParser.CLOB, 0); }
		public TerminalNode NCLOB() { return getToken(HanaParser.NCLOB, 0); }
		public TerminalNode MLSLABEL() { return getToken(HanaParser.MLSLABEL, 0); }
		public Native_datatype_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_native_datatype_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNative_datatype_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNative_datatype_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNative_datatype_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Native_datatype_elementContext native_datatype_element() throws RecognitionException {
		Native_datatype_elementContext _localctx = new Native_datatype_elementContext(_ctx, getState());
		enterRule(_localctx, 820, RULE_native_datatype_element);
		int _la;
		try {
			setState(5414);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case BINARY_INTEGER:
				enterOuterAlt(_localctx, 1);
				{
				setState(5352);
				match(BINARY_INTEGER);
				}
				break;
			case PLS_INTEGER:
				enterOuterAlt(_localctx, 2);
				{
				setState(5353);
				match(PLS_INTEGER);
				}
				break;
			case NATURAL:
				enterOuterAlt(_localctx, 3);
				{
				setState(5354);
				match(NATURAL);
				}
				break;
			case BINARY_FLOAT:
				enterOuterAlt(_localctx, 4);
				{
				setState(5355);
				match(BINARY_FLOAT);
				}
				break;
			case BINARY_DOUBLE:
				enterOuterAlt(_localctx, 5);
				{
				setState(5356);
				match(BINARY_DOUBLE);
				}
				break;
			case BIGINT:
				enterOuterAlt(_localctx, 6);
				{
				setState(5357);
				match(BIGINT);
				}
				break;
			case NATURALN:
				enterOuterAlt(_localctx, 7);
				{
				setState(5358);
				match(NATURALN);
				}
				break;
			case POSITIVE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5359);
				match(POSITIVE);
				}
				break;
			case POSITIVEN:
				enterOuterAlt(_localctx, 9);
				{
				setState(5360);
				match(POSITIVEN);
				}
				break;
			case SECONDDATE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5361);
				match(SECONDDATE);
				}
				break;
			case SIGNTYPE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5362);
				match(SIGNTYPE);
				}
				break;
			case SIMPLE_INTEGER:
				enterOuterAlt(_localctx, 12);
				{
				setState(5363);
				match(SIMPLE_INTEGER);
				}
				break;
			case NVARCHAR:
				enterOuterAlt(_localctx, 13);
				{
				setState(5364);
				match(NVARCHAR);
				}
				break;
			case DEC:
				enterOuterAlt(_localctx, 14);
				{
				setState(5365);
				match(DEC);
				}
				break;
			case INTEGER:
				enterOuterAlt(_localctx, 15);
				{
				setState(5366);
				match(INTEGER);
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 16);
				{
				setState(5367);
				match(INT);
				}
				break;
			case NUMERIC:
				enterOuterAlt(_localctx, 17);
				{
				setState(5368);
				match(NUMERIC);
				}
				break;
			case SMALLINT:
				enterOuterAlt(_localctx, 18);
				{
				setState(5369);
				match(SMALLINT);
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 19);
				{
				setState(5370);
				match(NUMBER);
				}
				break;
			case DECIMAL:
				enterOuterAlt(_localctx, 20);
				{
				setState(5371);
				match(DECIMAL);
				}
				break;
			case DOUBLE:
				enterOuterAlt(_localctx, 21);
				{
				setState(5372);
				match(DOUBLE);
				setState(5374);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==PRECISION) {
					{
					setState(5373);
					match(PRECISION);
					}
				}

				}
				break;
			case FLOAT:
				enterOuterAlt(_localctx, 22);
				{
				setState(5376);
				match(FLOAT);
				}
				break;
			case REAL:
				enterOuterAlt(_localctx, 23);
				{
				setState(5377);
				match(REAL);
				}
				break;
			case NCHAR:
				enterOuterAlt(_localctx, 24);
				{
				setState(5378);
				match(NCHAR);
				}
				break;
			case LONG:
				enterOuterAlt(_localctx, 25);
				{
				setState(5379);
				match(LONG);
				setState(5381);
				_errHandler.sync(this);
				_la = _input.LA(1);
				if (_la==RAW) {
					{
					setState(5380);
					match(RAW);
					}
				}

				}
				break;
			case CHAR:
				enterOuterAlt(_localctx, 26);
				{
				setState(5383);
				match(CHAR);
				}
				break;
			case CHARACTER:
				enterOuterAlt(_localctx, 27);
				{
				setState(5384);
				match(CHARACTER);
				}
				break;
			case VARCHAR2:
				enterOuterAlt(_localctx, 28);
				{
				setState(5385);
				match(VARCHAR2);
				}
				break;
			case VARCHAR:
				enterOuterAlt(_localctx, 29);
				{
				setState(5386);
				match(VARCHAR);
				}
				break;
			case STRING:
				enterOuterAlt(_localctx, 30);
				{
				setState(5387);
				match(STRING);
				}
				break;
			case RAW:
				enterOuterAlt(_localctx, 31);
				{
				setState(5388);
				match(RAW);
				}
				break;
			case BOOLEAN:
				enterOuterAlt(_localctx, 32);
				{
				setState(5389);
				match(BOOLEAN);
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 33);
				{
				setState(5390);
				match(DATE);
				}
				break;
			case ROWID:
				enterOuterAlt(_localctx, 34);
				{
				setState(5391);
				match(ROWID);
				}
				break;
			case UROWID:
				enterOuterAlt(_localctx, 35);
				{
				setState(5392);
				match(UROWID);
				}
				break;
			case YEAR:
				enterOuterAlt(_localctx, 36);
				{
				setState(5393);
				match(YEAR);
				}
				break;
			case MONTH:
				enterOuterAlt(_localctx, 37);
				{
				setState(5394);
				match(MONTH);
				}
				break;
			case DAY:
				enterOuterAlt(_localctx, 38);
				{
				setState(5395);
				match(DAY);
				}
				break;
			case HOUR:
				enterOuterAlt(_localctx, 39);
				{
				setState(5396);
				match(HOUR);
				}
				break;
			case MINUTE:
				enterOuterAlt(_localctx, 40);
				{
				setState(5397);
				match(MINUTE);
				}
				break;
			case SECOND:
				enterOuterAlt(_localctx, 41);
				{
				setState(5398);
				match(SECOND);
				}
				break;
			case TIMEZONE_HOUR:
				enterOuterAlt(_localctx, 42);
				{
				setState(5399);
				match(TIMEZONE_HOUR);
				}
				break;
			case TIMEZONE_MINUTE:
				enterOuterAlt(_localctx, 43);
				{
				setState(5400);
				match(TIMEZONE_MINUTE);
				}
				break;
			case TIMEZONE_REGION:
				enterOuterAlt(_localctx, 44);
				{
				setState(5401);
				match(TIMEZONE_REGION);
				}
				break;
			case TIMEZONE_ABBR:
				enterOuterAlt(_localctx, 45);
				{
				setState(5402);
				match(TIMEZONE_ABBR);
				}
				break;
			case TIMESTAMP:
				enterOuterAlt(_localctx, 46);
				{
				setState(5403);
				match(TIMESTAMP);
				}
				break;
			case TIMESTAMP_UNCONSTRAINED:
				enterOuterAlt(_localctx, 47);
				{
				setState(5404);
				match(TIMESTAMP_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_TZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 48);
				{
				setState(5405);
				match(TIMESTAMP_TZ_UNCONSTRAINED);
				}
				break;
			case TIMESTAMP_LTZ_UNCONSTRAINED:
				enterOuterAlt(_localctx, 49);
				{
				setState(5406);
				match(TIMESTAMP_LTZ_UNCONSTRAINED);
				}
				break;
			case YMINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 50);
				{
				setState(5407);
				match(YMINTERVAL_UNCONSTRAINED);
				}
				break;
			case DSINTERVAL_UNCONSTRAINED:
				enterOuterAlt(_localctx, 51);
				{
				setState(5408);
				match(DSINTERVAL_UNCONSTRAINED);
				}
				break;
			case BFILE:
				enterOuterAlt(_localctx, 52);
				{
				setState(5409);
				match(BFILE);
				}
				break;
			case BLOB:
				enterOuterAlt(_localctx, 53);
				{
				setState(5410);
				match(BLOB);
				}
				break;
			case CLOB:
				enterOuterAlt(_localctx, 54);
				{
				setState(5411);
				match(CLOB);
				}
				break;
			case NCLOB:
				enterOuterAlt(_localctx, 55);
				{
				setState(5412);
				match(NCLOB);
				}
				break;
			case MLSLABEL:
				enterOuterAlt(_localctx, 56);
				{
				setState(5413);
				match(MLSLABEL);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_variableContext extends ParserRuleContext {
		public List<TerminalNode> BINDVAR() { return getTokens(HanaParser.BINDVAR); }
		public TerminalNode BINDVAR(int i) {
			return getToken(HanaParser.BINDVAR, i);
		}
		public List<TerminalNode> COLON() { return getTokens(HanaParser.COLON); }
		public TerminalNode COLON(int i) {
			return getToken(HanaParser.COLON, i);
		}
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(HanaParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(HanaParser.UNSIGNED_INTEGER, i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public TerminalNode INDICATOR() { return getToken(HanaParser.INDICATOR, 0); }
		public Bind_sql_error_codeContext bind_sql_error_code() {
			return getRuleContext(Bind_sql_error_codeContext.class,0);
		}
		public Const_sql_error_codeContext const_sql_error_code() {
			return getRuleContext(Const_sql_error_codeContext.class,0);
		}
		public Bind_sql_error_messageContext bind_sql_error_message() {
			return getRuleContext(Bind_sql_error_messageContext.class,0);
		}
		public Const_sql_error_messageContext const_sql_error_message() {
			return getRuleContext(Const_sql_error_messageContext.class,0);
		}
		public Bind_variableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBind_variable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBind_variable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBind_variable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bind_variableContext bind_variable() throws RecognitionException {
		Bind_variableContext _localctx = new Bind_variableContext(_ctx, getState());
		enterRule(_localctx, 822, RULE_bind_variable);
		int _la;
		try {
			int _alt;
			setState(5442);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,699,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(5419);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case BINDVAR:
					{
					setState(5416);
					match(BINDVAR);
					}
					break;
				case COLON:
					{
					setState(5417);
					match(COLON);
					setState(5418);
					match(UNSIGNED_INTEGER);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5429);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,697,_ctx) ) {
				case 1:
					{
					setState(5422);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==INDICATOR) {
						{
						setState(5421);
						match(INDICATOR);
						}
					}

					setState(5427);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case BINDVAR:
						{
						setState(5424);
						match(BINDVAR);
						}
						break;
					case COLON:
						{
						setState(5425);
						match(COLON);
						setState(5426);
						match(UNSIGNED_INTEGER);
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				setState(5435);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,698,_ctx);
				while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
					if ( _alt==1 ) {
						{
						{
						setState(5431);
						match(PERIOD);
						setState(5432);
						general_element_part();
						}
						} 
					}
					setState(5437);
					_errHandler.sync(this);
					_alt = getInterpreter().adaptivePredict(_input,698,_ctx);
				}
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(5438);
				bind_sql_error_code();
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(5439);
				const_sql_error_code();
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(5440);
				bind_sql_error_message();
				}
				break;
			case 5:
				enterOuterAlt(_localctx, 5);
				{
				setState(5441);
				const_sql_error_message();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_sql_error_codeContext extends ParserRuleContext {
		public TerminalNode SQL_ERROR_CODE() { return getToken(HanaParser.SQL_ERROR_CODE, 0); }
		public Bind_sql_error_codeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_sql_error_code; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBind_sql_error_code(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBind_sql_error_code(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBind_sql_error_code(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bind_sql_error_codeContext bind_sql_error_code() throws RecognitionException {
		Bind_sql_error_codeContext _localctx = new Bind_sql_error_codeContext(_ctx, getState());
		enterRule(_localctx, 824, RULE_bind_sql_error_code);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5444);
			match(T__6);
			setState(5445);
			match(SQL_ERROR_CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Const_sql_error_codeContext extends ParserRuleContext {
		public TerminalNode SQL_ERROR_CODE() { return getToken(HanaParser.SQL_ERROR_CODE, 0); }
		public Const_sql_error_codeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_const_sql_error_code; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConst_sql_error_code(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConst_sql_error_code(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConst_sql_error_code(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Const_sql_error_codeContext const_sql_error_code() throws RecognitionException {
		Const_sql_error_codeContext _localctx = new Const_sql_error_codeContext(_ctx, getState());
		enterRule(_localctx, 826, RULE_const_sql_error_code);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5447);
			match(SQL_ERROR_CODE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Bind_sql_error_messageContext extends ParserRuleContext {
		public TerminalNode SQL_ERROR_MESSAGE() { return getToken(HanaParser.SQL_ERROR_MESSAGE, 0); }
		public Bind_sql_error_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_bind_sql_error_message; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterBind_sql_error_message(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitBind_sql_error_message(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitBind_sql_error_message(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Bind_sql_error_messageContext bind_sql_error_message() throws RecognitionException {
		Bind_sql_error_messageContext _localctx = new Bind_sql_error_messageContext(_ctx, getState());
		enterRule(_localctx, 828, RULE_bind_sql_error_message);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5449);
			match(T__6);
			setState(5450);
			match(SQL_ERROR_MESSAGE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Const_sql_error_messageContext extends ParserRuleContext {
		public TerminalNode SQL_ERROR_MESSAGE() { return getToken(HanaParser.SQL_ERROR_MESSAGE, 0); }
		public Const_sql_error_messageContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_const_sql_error_message; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConst_sql_error_message(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConst_sql_error_message(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConst_sql_error_message(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Const_sql_error_messageContext const_sql_error_message() throws RecognitionException {
		Const_sql_error_messageContext _localctx = new Const_sql_error_messageContext(_ctx, getState());
		enterRule(_localctx, 830, RULE_const_sql_error_message);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5452);
			match(SQL_ERROR_MESSAGE);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_elementContext extends ParserRuleContext {
		public List<General_element_partContext> general_element_part() {
			return getRuleContexts(General_element_partContext.class);
		}
		public General_element_partContext general_element_part(int i) {
			return getRuleContext(General_element_partContext.class,i);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public General_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGeneral_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGeneral_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGeneral_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_elementContext general_element() throws RecognitionException {
		General_elementContext _localctx = new General_elementContext(_ctx, getState());
		enterRule(_localctx, 832, RULE_general_element);
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5454);
			general_element_part();
			setState(5459);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,700,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5455);
					match(PERIOD);
					setState(5456);
					general_element_part();
					}
					} 
				}
				setState(5461);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,700,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class General_element_partContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(HanaParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public Function_argumentContext function_argument() {
			return getRuleContext(Function_argumentContext.class,0);
		}
		public General_element_partContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_general_element_part; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGeneral_element_part(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGeneral_element_part(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGeneral_element_part(this);
			else return visitor.visitChildren(this);
		}
	}

	public final General_element_partContext general_element_part() throws RecognitionException {
		General_element_partContext _localctx = new General_element_partContext(_ctx, getState());
		enterRule(_localctx, 834, RULE_general_element_part);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(5464);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5462);
				match(INTRODUCER);
				setState(5463);
				char_set_name();
				}
			}

			setState(5466);
			id_expression();
			setState(5471);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,702,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(5467);
					match(PERIOD);
					setState(5468);
					id_expression();
					}
					} 
				}
				setState(5473);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,702,_ctx);
			}
			setState(5475);
			_errHandler.sync(this);
			switch ( getInterpreter().adaptivePredict(_input,703,_ctx) ) {
			case 1:
				{
				setState(5474);
				function_argument();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Table_elementContext extends ParserRuleContext {
		public List<Id_expressionContext> id_expression() {
			return getRuleContexts(Id_expressionContext.class);
		}
		public Id_expressionContext id_expression(int i) {
			return getRuleContext(Id_expressionContext.class,i);
		}
		public TerminalNode INTRODUCER() { return getToken(HanaParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public List<TerminalNode> PERIOD() { return getTokens(HanaParser.PERIOD); }
		public TerminalNode PERIOD(int i) {
			return getToken(HanaParser.PERIOD, i);
		}
		public Table_elementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_table_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterTable_element(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitTable_element(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitTable_element(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Table_elementContext table_element() throws RecognitionException {
		Table_elementContext _localctx = new Table_elementContext(_ctx, getState());
		enterRule(_localctx, 836, RULE_table_element);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5479);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5477);
				match(INTRODUCER);
				setState(5478);
				char_set_name();
				}
			}

			setState(5481);
			id_expression();
			setState(5486);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==PERIOD) {
				{
				{
				setState(5482);
				match(PERIOD);
				setState(5483);
				id_expression();
				}
				}
				setState(5488);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ConstantContext extends ParserRuleContext {
		public TerminalNode TIMESTAMP() { return getToken(HanaParser.TIMESTAMP, 0); }
		public List<Quoted_stringContext> quoted_string() {
			return getRuleContexts(Quoted_stringContext.class);
		}
		public Quoted_stringContext quoted_string(int i) {
			return getRuleContext(Quoted_stringContext.class,i);
		}
		public List<Bind_variableContext> bind_variable() {
			return getRuleContexts(Bind_variableContext.class);
		}
		public Bind_variableContext bind_variable(int i) {
			return getRuleContext(Bind_variableContext.class,i);
		}
		public TerminalNode AT() { return getToken(HanaParser.AT, 0); }
		public TerminalNode TIME() { return getToken(HanaParser.TIME, 0); }
		public TerminalNode ZONE() { return getToken(HanaParser.ZONE, 0); }
		public TerminalNode INTERVAL() { return getToken(HanaParser.INTERVAL, 0); }
		public List<TerminalNode> DAY() { return getTokens(HanaParser.DAY); }
		public TerminalNode DAY(int i) {
			return getToken(HanaParser.DAY, i);
		}
		public List<TerminalNode> HOUR() { return getTokens(HanaParser.HOUR); }
		public TerminalNode HOUR(int i) {
			return getToken(HanaParser.HOUR, i);
		}
		public List<TerminalNode> MINUTE() { return getTokens(HanaParser.MINUTE); }
		public TerminalNode MINUTE(int i) {
			return getToken(HanaParser.MINUTE, i);
		}
		public List<TerminalNode> SECOND() { return getTokens(HanaParser.SECOND); }
		public TerminalNode SECOND(int i) {
			return getToken(HanaParser.SECOND, i);
		}
		public General_element_partContext general_element_part() {
			return getRuleContext(General_element_partContext.class,0);
		}
		public List<TerminalNode> LEFT_PAREN() { return getTokens(HanaParser.LEFT_PAREN); }
		public TerminalNode LEFT_PAREN(int i) {
			return getToken(HanaParser.LEFT_PAREN, i);
		}
		public List<TerminalNode> RIGHT_PAREN() { return getTokens(HanaParser.RIGHT_PAREN); }
		public TerminalNode RIGHT_PAREN(int i) {
			return getToken(HanaParser.RIGHT_PAREN, i);
		}
		public TerminalNode TO() { return getToken(HanaParser.TO, 0); }
		public List<TerminalNode> UNSIGNED_INTEGER() { return getTokens(HanaParser.UNSIGNED_INTEGER); }
		public TerminalNode UNSIGNED_INTEGER(int i) {
			return getToken(HanaParser.UNSIGNED_INTEGER, i);
		}
		public TerminalNode COMMA() { return getToken(HanaParser.COMMA, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public TerminalNode DATE() { return getToken(HanaParser.DATE, 0); }
		public TerminalNode NULL() { return getToken(HanaParser.NULL, 0); }
		public TerminalNode TRUE() { return getToken(HanaParser.TRUE, 0); }
		public TerminalNode FALSE() { return getToken(HanaParser.FALSE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(HanaParser.DBTIMEZONE, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(HanaParser.SESSIONTIMEZONE, 0); }
		public TerminalNode MINVALUE() { return getToken(HanaParser.MINVALUE, 0); }
		public TerminalNode MAXVALUE() { return getToken(HanaParser.MAXVALUE, 0); }
		public TerminalNode DEFAULT() { return getToken(HanaParser.DEFAULT, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_constant; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConstant(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConstant(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConstant(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ConstantContext constant() throws RecognitionException {
		ConstantContext _localctx = new ConstantContext(_ctx, getState());
		enterRule(_localctx, 838, RULE_constant);
		int _la;
		try {
			setState(5551);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case TIMESTAMP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5489);
				match(TIMESTAMP);
				setState(5492);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5490);
					quoted_string();
					}
					break;
				case T__6:
				case SQL_ERROR_CODE:
				case SQL_ERROR_MESSAGE:
				case BINDVAR:
				case COLON:
					{
					setState(5491);
					bind_variable();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5498);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,707,_ctx) ) {
				case 1:
					{
					setState(5494);
					match(AT);
					setState(5495);
					match(TIME);
					setState(5496);
					match(ZONE);
					setState(5497);
					quoted_string();
					}
					break;
				}
				}
				break;
			case INTERVAL:
				enterOuterAlt(_localctx, 2);
				{
				setState(5500);
				match(INTERVAL);
				setState(5504);
				_errHandler.sync(this);
				switch (_input.LA(1)) {
				case NATIONAL_CHAR_STRING_LIT:
				case CHAR_STRING:
					{
					setState(5501);
					quoted_string();
					}
					break;
				case T__6:
				case SQL_ERROR_CODE:
				case SQL_ERROR_MESSAGE:
				case BINDVAR:
				case COLON:
					{
					setState(5502);
					bind_variable();
					}
					break;
				case A_LETTER:
				case ADD:
				case AFTER:
				case AGENT:
				case AGGREGATE:
				case ANALYZE:
				case ARRAY:
				case ASSOCIATE:
				case AT:
				case ATTRIBUTE:
				case AUDIT:
				case AUTHID:
				case AUTO:
				case AUTOMATIC:
				case AUTONOMOUS_TRANSACTION:
				case BATCH:
				case BEFORE:
				case BFILE:
				case BINARY_DOUBLE:
				case BINARY_FLOAT:
				case BINARY_INTEGER:
				case BLOB:
				case BLOCK:
				case BODY:
				case BOOLEAN:
				case BOTH:
				case BULK:
				case BYTE:
				case C_LETTER:
				case CALL:
				case CANONICAL:
				case CASCADE:
				case CAST:
				case CHAR:
				case CHAR_CS:
				case CHARACTER:
				case CHR:
				case CLOB:
				case CLOSE:
				case CLUSTER:
				case COLLECT:
				case COLUMNS:
				case COMMENT:
				case COMMIT:
				case COMMITTED:
				case COMPATIBILITY:
				case COMPILE:
				case COMPOUND:
				case CONSTANT:
				case CONSTRAINT:
				case CONSTRAINTS:
				case CONSTRUCTOR:
				case CONTENT:
				case CONTEXT:
				case CONTINUE:
				case CONVERT:
				case CORRUPT_XID:
				case CORRUPT_XID_ALL:
				case COST:
				case COUNT:
				case CROSS:
				case CUBE:
				case CURRENT_USER:
				case CURSOR:
				case CUSTOMDATUM:
				case CYCLE:
				case DATA:
				case DATABASE:
				case DAY:
				case DB_ROLE_CHANGE:
				case DBTIMEZONE:
				case DDL:
				case DEBUG:
				case DEC:
				case DECIMAL:
				case DECOMPOSE:
				case DECREMENT:
				case DEFAULTS:
				case DEFERRED:
				case DEFINER:
				case DETERMINISTIC:
				case DIMENSION:
				case DISABLE:
				case DISASSOCIATE:
				case DOCUMENT:
				case DOUBLE:
				case DSINTERVAL_UNCONSTRAINED:
				case EACH:
				case ELEMENT:
				case EMPTY:
				case ENABLE:
				case ENCODING:
				case ENTITYESCAPING:
				case ERRORS:
				case ESCAPE:
				case EVALNAME:
				case EXCEPTION_INIT:
				case EXCEPTIONS:
				case EXCLUDE:
				case EXECUTE:
				case EXIT:
				case EXPLAIN:
				case EXTERNAL:
				case EXTRACT:
				case FAILURE:
				case FINAL:
				case FIRST:
				case FIRST_VALUE:
				case FLOAT:
				case FOLLOWING:
				case FOLLOWS:
				case FORALL:
				case FORCE:
				case FULL:
				case FUNCTION:
				case GROUPING:
				case HASH:
				case HIDE:
				case HOUR:
				case IGNORE:
				case IMMEDIATE:
				case INCLUDE:
				case INCLUDING:
				case INCREMENT:
				case INDENT:
				case INDEXED:
				case INDICATOR:
				case INDICES:
				case INFINITE:
				case INLINE:
				case INNER:
				case INOUT:
				case INSTANTIABLE:
				case INSTEAD:
				case INT:
				case INTEGER:
				case INTERVAL:
				case INVALIDATE:
				case ISOLATION:
				case ITERATE:
				case JAVA:
				case JOIN:
				case KEEP:
				case LANGUAGE:
				case LAST:
				case LAST_VALUE:
				case LEADING:
				case LEFT:
				case LEVEL:
				case LIBRARY:
				case LIKE2:
				case LIKE4:
				case LIKEC:
				case LIMIT:
				case LOCAL:
				case LOCKED:
				case LOG:
				case LOGOFF:
				case LOGON:
				case LONG:
				case LOOP:
				case MAIN:
				case MAP:
				case MATCHED:
				case MAXVALUE:
				case MEASURES:
				case MEMBER:
				case MERGE:
				case MINUTE:
				case MINVALUE:
				case MLSLABEL:
				case MODEL:
				case MODIFY:
				case MONTH:
				case MULTISET:
				case NAME:
				case NAN:
				case NATURAL:
				case NATURALN:
				case NAV:
				case NCHAR:
				case NCHAR_CS:
				case NCLOB:
				case NESTED:
				case NEW:
				case NO:
				case NOAUDIT:
				case NOCOPY:
				case NOCYCLE:
				case NOENTITYESCAPING:
				case NONE:
				case NOSCHEMACHECK:
				case NULLS:
				case NUMBER:
				case NUMERIC:
				case NVARCHAR:
				case OBJECT:
				case OFF:
				case OID:
				case OLD:
				case ONLY:
				case OPEN:
				case ORADATA:
				case ORDINALITY:
				case OSERROR:
				case OUT:
				case OUTER:
				case OVER:
				case OVERRIDING:
				case PACKAGE:
				case PARALLEL_ENABLE:
				case PARAMETERS:
				case PARENT:
				case PARTITION:
				case PASSING:
				case PATH:
				case PIPELINED:
				case PLAN:
				case PLS_INTEGER:
				case POSITIVE:
				case POSITIVEN:
				case PRAGMA:
				case PRECEDING:
				case PRECISION:
				case PRESENT:
				case RAISE:
				case RANGE:
				case RAW:
				case READ:
				case REAL:
				case RECORD:
				case REF:
				case REFERENCE:
				case REFERENCING:
				case REJECT:
				case RELIES_ON:
				case RENAME:
				case REPLACE:
				case RESPECT:
				case RESTRICT_REFERENCES:
				case RESULT:
				case RESULT_CACHE:
				case RETURN:
				case RETURNS:
				case RETURNING:
				case REUSE:
				case REVERSE:
				case RIGHT:
				case ROLLBACK:
				case ROLLUP:
				case ROW:
				case ROWID:
				case ROWS:
				case RULES:
				case SAMPLE:
				case SAVE:
				case SAVEPOINT:
				case SCHEMA:
				case SCHEMACHECK:
				case SCN:
				case SECOND:
				case SEED:
				case SEGMENT:
				case SELF:
				case SEQUENTIAL:
				case SERIALIZABLE:
				case SERIALLY_REUSABLE:
				case SERVERERROR:
				case SESSIONTIMEZONE:
				case SET:
				case SETS:
				case SETTINGS:
				case SHOW:
				case SHUTDOWN:
				case SIBLINGS:
				case SIGNTYPE:
				case SIMPLE_INTEGER:
				case SINGLE:
				case SKIP_:
				case SMALLINT:
				case SNAPSHOT:
				case SOME:
				case SPECIFICATION:
				case SQLDATA:
				case SQLERROR:
				case STANDALONE:
				case STARTUP:
				case STATEMENT:
				case STATEMENT_ID:
				case STATIC:
				case STATISTICS:
				case STRING:
				case SUBMULTISET:
				case SUBPARTITION:
				case SUBSTITUTABLE:
				case SUBTYPE:
				case SUCCESS:
				case SUSPEND:
				case TIME:
				case TIMESTAMP:
				case TIMESTAMP_LTZ_UNCONSTRAINED:
				case TIMESTAMP_TZ_UNCONSTRAINED:
				case TIMESTAMP_UNCONSTRAINED:
				case TIMEZONE_ABBR:
				case TIMEZONE_HOUR:
				case TIMEZONE_MINUTE:
				case TIMEZONE_REGION:
				case TRAILING:
				case TRANSACTION:
				case TRANSLATE:
				case TREAT:
				case TRIGGER:
				case TRIM:
				case TRUNCATE:
				case TYPE:
				case UNBOUNDED:
				case UNDER:
				case UNLIMITED:
				case UNTIL:
				case UPDATED:
				case UPSERT:
				case UROWID:
				case USE:
				case VALIDATE:
				case VALUE:
				case VARCHAR:
				case VARCHAR2:
				case VARIABLE:
				case VARRAY:
				case VARYING:
				case VERSION:
				case VERSIONS:
				case WAIT:
				case WARNING:
				case WELLFORMED:
				case WHENEVER:
				case WHILE:
				case WITHIN:
				case WORK:
				case WRITE:
				case XML:
				case XMLAGG:
				case XMLATTRIBUTES:
				case XMLCAST:
				case XMLCOLATTVAL:
				case XMLELEMENT:
				case XMLEXISTS:
				case XMLFOREST:
				case XMLNAMESPACES:
				case XMLPARSE:
				case XMLPI:
				case XMLQUERY:
				case XMLROOT:
				case XMLSERIALIZE:
				case XMLTABLE:
				case YEAR:
				case YES:
				case YMINTERVAL_UNCONSTRAINED:
				case ZONE:
				case PREDICTION:
				case PREDICTION_BOUNDS:
				case PREDICTION_COST:
				case PREDICTION_DETAILS:
				case PREDICTION_PROBABILITY:
				case PREDICTION_SET:
				case CUME_DIST:
				case DENSE_RANK:
				case LISTAGG:
				case PERCENT_RANK:
				case PERCENTILE_CONT:
				case PERCENTILE_DISC:
				case RANK:
				case AVG:
				case CORR:
				case LAG:
				case LEAD:
				case MAX:
				case MEDIAN:
				case MIN:
				case NTILE:
				case RATIO_TO_REPORT:
				case ROW_NUMBER:
				case SUM:
				case VARIANCE:
				case REGR_:
				case STDDEV:
				case VAR_:
				case COVAR_:
				case DELIMITED_ID:
				case INTRODUCER:
				case REGULAR_ID:
					{
					setState(5503);
					general_element_part();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(5506);
				_la = _input.LA(1);
				if ( !(_la==DAY || _la==HOUR || _la==MINUTE || _la==SECOND) ) {
				_errHandler.recoverInline(this);
				}
				else {
					if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
					_errHandler.reportMatch(this);
					consume();
				}
				setState(5520);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,712,_ctx) ) {
				case 1:
					{
					setState(5507);
					match(LEFT_PAREN);
					setState(5510);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case UNSIGNED_INTEGER:
						{
						setState(5508);
						match(UNSIGNED_INTEGER);
						}
						break;
					case T__6:
					case SQL_ERROR_CODE:
					case SQL_ERROR_MESSAGE:
					case BINDVAR:
					case COLON:
						{
						setState(5509);
						bind_variable();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					setState(5517);
					_errHandler.sync(this);
					_la = _input.LA(1);
					if (_la==COMMA) {
						{
						setState(5512);
						match(COMMA);
						setState(5515);
						_errHandler.sync(this);
						switch (_input.LA(1)) {
						case UNSIGNED_INTEGER:
							{
							setState(5513);
							match(UNSIGNED_INTEGER);
							}
							break;
						case T__6:
						case SQL_ERROR_CODE:
						case SQL_ERROR_MESSAGE:
						case BINDVAR:
						case COLON:
							{
							setState(5514);
							bind_variable();
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						}
					}

					setState(5519);
					match(RIGHT_PAREN);
					}
					break;
				}
				setState(5537);
				_errHandler.sync(this);
				switch ( getInterpreter().adaptivePredict(_input,716,_ctx) ) {
				case 1:
					{
					setState(5522);
					match(TO);
					setState(5535);
					_errHandler.sync(this);
					switch (_input.LA(1)) {
					case DAY:
						{
						setState(5523);
						match(DAY);
						}
						break;
					case HOUR:
						{
						setState(5524);
						match(HOUR);
						}
						break;
					case MINUTE:
						{
						setState(5525);
						match(MINUTE);
						}
						break;
					case SECOND:
						{
						setState(5526);
						match(SECOND);
						setState(5533);
						_errHandler.sync(this);
						switch ( getInterpreter().adaptivePredict(_input,714,_ctx) ) {
						case 1:
							{
							setState(5527);
							match(LEFT_PAREN);
							setState(5530);
							_errHandler.sync(this);
							switch (_input.LA(1)) {
							case UNSIGNED_INTEGER:
								{
								setState(5528);
								match(UNSIGNED_INTEGER);
								}
								break;
							case T__6:
							case SQL_ERROR_CODE:
							case SQL_ERROR_MESSAGE:
							case BINDVAR:
							case COLON:
								{
								setState(5529);
								bind_variable();
								}
								break;
							default:
								throw new NoViableAltException(this);
							}
							setState(5532);
							match(RIGHT_PAREN);
							}
							break;
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				}
				break;
			case UNSIGNED_INTEGER:
			case APPROXIMATE_NUM_LIT:
				enterOuterAlt(_localctx, 3);
				{
				setState(5539);
				numeric();
				}
				break;
			case DATE:
				enterOuterAlt(_localctx, 4);
				{
				setState(5540);
				match(DATE);
				setState(5541);
				quoted_string();
				}
				break;
			case NATIONAL_CHAR_STRING_LIT:
			case CHAR_STRING:
				enterOuterAlt(_localctx, 5);
				{
				setState(5542);
				quoted_string();
				}
				break;
			case NULL:
				enterOuterAlt(_localctx, 6);
				{
				setState(5543);
				match(NULL);
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 7);
				{
				setState(5544);
				match(TRUE);
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 8);
				{
				setState(5545);
				match(FALSE);
				}
				break;
			case DBTIMEZONE:
				enterOuterAlt(_localctx, 9);
				{
				setState(5546);
				match(DBTIMEZONE);
				}
				break;
			case SESSIONTIMEZONE:
				enterOuterAlt(_localctx, 10);
				{
				setState(5547);
				match(SESSIONTIMEZONE);
				}
				break;
			case MINVALUE:
				enterOuterAlt(_localctx, 11);
				{
				setState(5548);
				match(MINVALUE);
				}
				break;
			case MAXVALUE:
				enterOuterAlt(_localctx, 12);
				{
				setState(5549);
				match(MAXVALUE);
				}
				break;
			case DEFAULT:
				enterOuterAlt(_localctx, 13);
				{
				setState(5550);
				match(DEFAULT);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class NumericContext extends ParserRuleContext {
		public TerminalNode UNSIGNED_INTEGER() { return getToken(HanaParser.UNSIGNED_INTEGER, 0); }
		public TerminalNode APPROXIMATE_NUM_LIT() { return getToken(HanaParser.APPROXIMATE_NUM_LIT, 0); }
		public NumericContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNumeric(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNumeric(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNumeric(this);
			else return visitor.visitChildren(this);
		}
	}

	public final NumericContext numeric() throws RecognitionException {
		NumericContext _localctx = new NumericContext(_ctx, getState());
		enterRule(_localctx, 840, RULE_numeric);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5553);
			_la = _input.LA(1);
			if ( !(_la==UNSIGNED_INTEGER || _la==APPROXIMATE_NUM_LIT) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Numeric_negativeContext extends ParserRuleContext {
		public TerminalNode MINUS_SIGN() { return getToken(HanaParser.MINUS_SIGN, 0); }
		public NumericContext numeric() {
			return getRuleContext(NumericContext.class,0);
		}
		public Numeric_negativeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_numeric_negative; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNumeric_negative(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNumeric_negative(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNumeric_negative(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Numeric_negativeContext numeric_negative() throws RecognitionException {
		Numeric_negativeContext _localctx = new Numeric_negativeContext(_ctx, getState());
		enterRule(_localctx, 842, RULE_numeric_negative);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5555);
			match(MINUS_SIGN);
			setState(5556);
			numeric();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Quoted_stringContext extends ParserRuleContext {
		public TerminalNode CHAR_STRING() { return getToken(HanaParser.CHAR_STRING, 0); }
		public TerminalNode NATIONAL_CHAR_STRING_LIT() { return getToken(HanaParser.NATIONAL_CHAR_STRING_LIT, 0); }
		public Quoted_stringContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_quoted_string; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterQuoted_string(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitQuoted_string(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitQuoted_string(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Quoted_stringContext quoted_string() throws RecognitionException {
		Quoted_stringContext _localctx = new Quoted_stringContext(_ctx, getState());
		enterRule(_localctx, 844, RULE_quoted_string);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5558);
			_la = _input.LA(1);
			if ( !(_la==NATIONAL_CHAR_STRING_LIT || _la==CHAR_STRING) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IdContext extends ParserRuleContext {
		public Id_expressionContext id_expression() {
			return getRuleContext(Id_expressionContext.class,0);
		}
		public TerminalNode INTRODUCER() { return getToken(HanaParser.INTRODUCER, 0); }
		public Char_set_nameContext char_set_name() {
			return getRuleContext(Char_set_nameContext.class,0);
		}
		public IdContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterId(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitId(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitId(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IdContext id() throws RecognitionException {
		IdContext _localctx = new IdContext(_ctx, getState());
		enterRule(_localctx, 846, RULE_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5562);
			_errHandler.sync(this);
			_la = _input.LA(1);
			if (_la==INTRODUCER) {
				{
				setState(5560);
				match(INTRODUCER);
				setState(5561);
				char_set_name();
				}
			}

			setState(5564);
			id_expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Id_expressionContext extends ParserRuleContext {
		public Regular_idContext regular_id() {
			return getRuleContext(Regular_idContext.class,0);
		}
		public TerminalNode DELIMITED_ID() { return getToken(HanaParser.DELIMITED_ID, 0); }
		public Id_expressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_id_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterId_expression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitId_expression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitId_expression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Id_expressionContext id_expression() throws RecognitionException {
		Id_expressionContext _localctx = new Id_expressionContext(_ctx, getState());
		enterRule(_localctx, 848, RULE_id_expression);
		try {
			setState(5568);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case A_LETTER:
			case ADD:
			case AFTER:
			case AGENT:
			case AGGREGATE:
			case ANALYZE:
			case ARRAY:
			case ASSOCIATE:
			case AT:
			case ATTRIBUTE:
			case AUDIT:
			case AUTHID:
			case AUTO:
			case AUTOMATIC:
			case AUTONOMOUS_TRANSACTION:
			case BATCH:
			case BEFORE:
			case BFILE:
			case BINARY_DOUBLE:
			case BINARY_FLOAT:
			case BINARY_INTEGER:
			case BLOB:
			case BLOCK:
			case BODY:
			case BOOLEAN:
			case BOTH:
			case BULK:
			case BYTE:
			case C_LETTER:
			case CALL:
			case CANONICAL:
			case CASCADE:
			case CAST:
			case CHAR:
			case CHAR_CS:
			case CHARACTER:
			case CHR:
			case CLOB:
			case CLOSE:
			case CLUSTER:
			case COLLECT:
			case COLUMNS:
			case COMMENT:
			case COMMIT:
			case COMMITTED:
			case COMPATIBILITY:
			case COMPILE:
			case COMPOUND:
			case CONSTANT:
			case CONSTRAINT:
			case CONSTRAINTS:
			case CONSTRUCTOR:
			case CONTENT:
			case CONTEXT:
			case CONTINUE:
			case CONVERT:
			case CORRUPT_XID:
			case CORRUPT_XID_ALL:
			case COST:
			case COUNT:
			case CROSS:
			case CUBE:
			case CURRENT_USER:
			case CURSOR:
			case CUSTOMDATUM:
			case CYCLE:
			case DATA:
			case DATABASE:
			case DAY:
			case DB_ROLE_CHANGE:
			case DBTIMEZONE:
			case DDL:
			case DEBUG:
			case DEC:
			case DECIMAL:
			case DECOMPOSE:
			case DECREMENT:
			case DEFAULTS:
			case DEFERRED:
			case DEFINER:
			case DETERMINISTIC:
			case DIMENSION:
			case DISABLE:
			case DISASSOCIATE:
			case DOCUMENT:
			case DOUBLE:
			case DSINTERVAL_UNCONSTRAINED:
			case EACH:
			case ELEMENT:
			case EMPTY:
			case ENABLE:
			case ENCODING:
			case ENTITYESCAPING:
			case ERRORS:
			case ESCAPE:
			case EVALNAME:
			case EXCEPTION_INIT:
			case EXCEPTIONS:
			case EXCLUDE:
			case EXECUTE:
			case EXIT:
			case EXPLAIN:
			case EXTERNAL:
			case EXTRACT:
			case FAILURE:
			case FINAL:
			case FIRST:
			case FIRST_VALUE:
			case FLOAT:
			case FOLLOWING:
			case FOLLOWS:
			case FORALL:
			case FORCE:
			case FULL:
			case FUNCTION:
			case GROUPING:
			case HASH:
			case HIDE:
			case HOUR:
			case IGNORE:
			case IMMEDIATE:
			case INCLUDE:
			case INCLUDING:
			case INCREMENT:
			case INDENT:
			case INDEXED:
			case INDICATOR:
			case INDICES:
			case INFINITE:
			case INLINE:
			case INNER:
			case INOUT:
			case INSTANTIABLE:
			case INSTEAD:
			case INT:
			case INTEGER:
			case INTERVAL:
			case INVALIDATE:
			case ISOLATION:
			case ITERATE:
			case JAVA:
			case JOIN:
			case KEEP:
			case LANGUAGE:
			case LAST:
			case LAST_VALUE:
			case LEADING:
			case LEFT:
			case LEVEL:
			case LIBRARY:
			case LIKE2:
			case LIKE4:
			case LIKEC:
			case LIMIT:
			case LOCAL:
			case LOCKED:
			case LOG:
			case LOGOFF:
			case LOGON:
			case LONG:
			case LOOP:
			case MAIN:
			case MAP:
			case MATCHED:
			case MAXVALUE:
			case MEASURES:
			case MEMBER:
			case MERGE:
			case MINUTE:
			case MINVALUE:
			case MLSLABEL:
			case MODEL:
			case MODIFY:
			case MONTH:
			case MULTISET:
			case NAME:
			case NAN:
			case NATURAL:
			case NATURALN:
			case NAV:
			case NCHAR:
			case NCHAR_CS:
			case NCLOB:
			case NESTED:
			case NEW:
			case NO:
			case NOAUDIT:
			case NOCOPY:
			case NOCYCLE:
			case NOENTITYESCAPING:
			case NONE:
			case NOSCHEMACHECK:
			case NULLS:
			case NUMBER:
			case NUMERIC:
			case NVARCHAR:
			case OBJECT:
			case OFF:
			case OID:
			case OLD:
			case ONLY:
			case OPEN:
			case ORADATA:
			case ORDINALITY:
			case OSERROR:
			case OUT:
			case OUTER:
			case OVER:
			case OVERRIDING:
			case PACKAGE:
			case PARALLEL_ENABLE:
			case PARAMETERS:
			case PARENT:
			case PARTITION:
			case PASSING:
			case PATH:
			case PIPELINED:
			case PLAN:
			case PLS_INTEGER:
			case POSITIVE:
			case POSITIVEN:
			case PRAGMA:
			case PRECEDING:
			case PRECISION:
			case PRESENT:
			case RAISE:
			case RANGE:
			case RAW:
			case READ:
			case REAL:
			case RECORD:
			case REF:
			case REFERENCE:
			case REFERENCING:
			case REJECT:
			case RELIES_ON:
			case RENAME:
			case REPLACE:
			case RESPECT:
			case RESTRICT_REFERENCES:
			case RESULT:
			case RESULT_CACHE:
			case RETURN:
			case RETURNS:
			case RETURNING:
			case REUSE:
			case REVERSE:
			case RIGHT:
			case ROLLBACK:
			case ROLLUP:
			case ROW:
			case ROWID:
			case ROWS:
			case RULES:
			case SAMPLE:
			case SAVE:
			case SAVEPOINT:
			case SCHEMA:
			case SCHEMACHECK:
			case SCN:
			case SECOND:
			case SEED:
			case SEGMENT:
			case SELF:
			case SEQUENTIAL:
			case SERIALIZABLE:
			case SERIALLY_REUSABLE:
			case SERVERERROR:
			case SESSIONTIMEZONE:
			case SET:
			case SETS:
			case SETTINGS:
			case SHOW:
			case SHUTDOWN:
			case SIBLINGS:
			case SIGNTYPE:
			case SIMPLE_INTEGER:
			case SINGLE:
			case SKIP_:
			case SMALLINT:
			case SNAPSHOT:
			case SOME:
			case SPECIFICATION:
			case SQLDATA:
			case SQLERROR:
			case STANDALONE:
			case STARTUP:
			case STATEMENT:
			case STATEMENT_ID:
			case STATIC:
			case STATISTICS:
			case STRING:
			case SUBMULTISET:
			case SUBPARTITION:
			case SUBSTITUTABLE:
			case SUBTYPE:
			case SUCCESS:
			case SUSPEND:
			case TIME:
			case TIMESTAMP:
			case TIMESTAMP_LTZ_UNCONSTRAINED:
			case TIMESTAMP_TZ_UNCONSTRAINED:
			case TIMESTAMP_UNCONSTRAINED:
			case TIMEZONE_ABBR:
			case TIMEZONE_HOUR:
			case TIMEZONE_MINUTE:
			case TIMEZONE_REGION:
			case TRAILING:
			case TRANSACTION:
			case TRANSLATE:
			case TREAT:
			case TRIGGER:
			case TRIM:
			case TRUNCATE:
			case TYPE:
			case UNBOUNDED:
			case UNDER:
			case UNLIMITED:
			case UNTIL:
			case UPDATED:
			case UPSERT:
			case UROWID:
			case USE:
			case VALIDATE:
			case VALUE:
			case VARCHAR:
			case VARCHAR2:
			case VARIABLE:
			case VARRAY:
			case VARYING:
			case VERSION:
			case VERSIONS:
			case WAIT:
			case WARNING:
			case WELLFORMED:
			case WHENEVER:
			case WHILE:
			case WITHIN:
			case WORK:
			case WRITE:
			case XML:
			case XMLAGG:
			case XMLATTRIBUTES:
			case XMLCAST:
			case XMLCOLATTVAL:
			case XMLELEMENT:
			case XMLEXISTS:
			case XMLFOREST:
			case XMLNAMESPACES:
			case XMLPARSE:
			case XMLPI:
			case XMLQUERY:
			case XMLROOT:
			case XMLSERIALIZE:
			case XMLTABLE:
			case YEAR:
			case YES:
			case YMINTERVAL_UNCONSTRAINED:
			case ZONE:
			case PREDICTION:
			case PREDICTION_BOUNDS:
			case PREDICTION_COST:
			case PREDICTION_DETAILS:
			case PREDICTION_PROBABILITY:
			case PREDICTION_SET:
			case CUME_DIST:
			case DENSE_RANK:
			case LISTAGG:
			case PERCENT_RANK:
			case PERCENTILE_CONT:
			case PERCENTILE_DISC:
			case RANK:
			case AVG:
			case CORR:
			case LAG:
			case LEAD:
			case MAX:
			case MEDIAN:
			case MIN:
			case NTILE:
			case RATIO_TO_REPORT:
			case ROW_NUMBER:
			case SUM:
			case VARIANCE:
			case REGR_:
			case STDDEV:
			case VAR_:
			case COVAR_:
			case REGULAR_ID:
				enterOuterAlt(_localctx, 1);
				{
				setState(5566);
				regular_id();
				}
				break;
			case DELIMITED_ID:
				enterOuterAlt(_localctx, 2);
				{
				setState(5567);
				match(DELIMITED_ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Not_equal_opContext extends ParserRuleContext {
		public TerminalNode NOT_EQUAL_OP() { return getToken(HanaParser.NOT_EQUAL_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(HanaParser.LESS_THAN_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(HanaParser.GREATER_THAN_OP, 0); }
		public TerminalNode EXCLAMATION_OPERATOR_PART() { return getToken(HanaParser.EXCLAMATION_OPERATOR_PART, 0); }
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public TerminalNode CARRET_OPERATOR_PART() { return getToken(HanaParser.CARRET_OPERATOR_PART, 0); }
		public Not_equal_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_not_equal_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterNot_equal_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitNot_equal_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitNot_equal_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Not_equal_opContext not_equal_op() throws RecognitionException {
		Not_equal_opContext _localctx = new Not_equal_opContext(_ctx, getState());
		enterRule(_localctx, 850, RULE_not_equal_op);
		try {
			setState(5577);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case NOT_EQUAL_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5570);
				match(NOT_EQUAL_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5571);
				match(LESS_THAN_OP);
				setState(5572);
				match(GREATER_THAN_OP);
				}
				break;
			case EXCLAMATION_OPERATOR_PART:
				enterOuterAlt(_localctx, 3);
				{
				setState(5573);
				match(EXCLAMATION_OPERATOR_PART);
				setState(5574);
				match(EQUALS_OP);
				}
				break;
			case CARRET_OPERATOR_PART:
				enterOuterAlt(_localctx, 4);
				{
				setState(5575);
				match(CARRET_OPERATOR_PART);
				setState(5576);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Greater_than_or_equals_opContext extends ParserRuleContext {
		public TerminalNode GREATER_THAN_OR_EQUALS_OP() { return getToken(HanaParser.GREATER_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode GREATER_THAN_OP() { return getToken(HanaParser.GREATER_THAN_OP, 0); }
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public Greater_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_greater_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterGreater_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitGreater_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitGreater_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Greater_than_or_equals_opContext greater_than_or_equals_op() throws RecognitionException {
		Greater_than_or_equals_opContext _localctx = new Greater_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 852, RULE_greater_than_or_equals_op);
		try {
			setState(5582);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case GREATER_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5579);
				match(GREATER_THAN_OR_EQUALS_OP);
				}
				break;
			case GREATER_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5580);
				match(GREATER_THAN_OP);
				setState(5581);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Less_than_or_equals_opContext extends ParserRuleContext {
		public TerminalNode LESS_THAN_OR_EQUALS_OP() { return getToken(HanaParser.LESS_THAN_OR_EQUALS_OP, 0); }
		public TerminalNode LESS_THAN_OP() { return getToken(HanaParser.LESS_THAN_OP, 0); }
		public TerminalNode EQUALS_OP() { return getToken(HanaParser.EQUALS_OP, 0); }
		public Less_than_or_equals_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_less_than_or_equals_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterLess_than_or_equals_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitLess_than_or_equals_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitLess_than_or_equals_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Less_than_or_equals_opContext less_than_or_equals_op() throws RecognitionException {
		Less_than_or_equals_opContext _localctx = new Less_than_or_equals_opContext(_ctx, getState());
		enterRule(_localctx, 854, RULE_less_than_or_equals_op);
		try {
			setState(5587);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case LESS_THAN_OR_EQUALS_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5584);
				match(LESS_THAN_OR_EQUALS_OP);
				}
				break;
			case LESS_THAN_OP:
				enterOuterAlt(_localctx, 2);
				{
				setState(5585);
				match(LESS_THAN_OP);
				setState(5586);
				match(EQUALS_OP);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Concatenation_opContext extends ParserRuleContext {
		public TerminalNode CONCATENATION_OP() { return getToken(HanaParser.CONCATENATION_OP, 0); }
		public List<TerminalNode> VERTICAL_BAR() { return getTokens(HanaParser.VERTICAL_BAR); }
		public TerminalNode VERTICAL_BAR(int i) {
			return getToken(HanaParser.VERTICAL_BAR, i);
		}
		public Concatenation_opContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_concatenation_op; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterConcatenation_op(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitConcatenation_op(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitConcatenation_op(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Concatenation_opContext concatenation_op() throws RecognitionException {
		Concatenation_opContext _localctx = new Concatenation_opContext(_ctx, getState());
		enterRule(_localctx, 856, RULE_concatenation_op);
		try {
			setState(5592);
			_errHandler.sync(this);
			switch (_input.LA(1)) {
			case CONCATENATION_OP:
				enterOuterAlt(_localctx, 1);
				{
				setState(5589);
				match(CONCATENATION_OP);
				}
				break;
			case VERTICAL_BAR:
				enterOuterAlt(_localctx, 2);
				{
				setState(5590);
				match(VERTICAL_BAR);
				setState(5591);
				match(VERTICAL_BAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Outer_join_signContext extends ParserRuleContext {
		public TerminalNode LEFT_PAREN() { return getToken(HanaParser.LEFT_PAREN, 0); }
		public TerminalNode PLUS_SIGN() { return getToken(HanaParser.PLUS_SIGN, 0); }
		public TerminalNode RIGHT_PAREN() { return getToken(HanaParser.RIGHT_PAREN, 0); }
		public Outer_join_signContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_outer_join_sign; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterOuter_join_sign(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitOuter_join_sign(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitOuter_join_sign(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Outer_join_signContext outer_join_sign() throws RecognitionException {
		Outer_join_signContext _localctx = new Outer_join_signContext(_ctx, getState());
		enterRule(_localctx, 858, RULE_outer_join_sign);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5594);
			match(LEFT_PAREN);
			setState(5595);
			match(PLUS_SIGN);
			setState(5596);
			match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class Regular_idContext extends ParserRuleContext {
		public TerminalNode REGULAR_ID() { return getToken(HanaParser.REGULAR_ID, 0); }
		public TerminalNode A_LETTER() { return getToken(HanaParser.A_LETTER, 0); }
		public TerminalNode ADD() { return getToken(HanaParser.ADD, 0); }
		public TerminalNode AFTER() { return getToken(HanaParser.AFTER, 0); }
		public TerminalNode AGENT() { return getToken(HanaParser.AGENT, 0); }
		public TerminalNode AGGREGATE() { return getToken(HanaParser.AGGREGATE, 0); }
		public TerminalNode ANALYZE() { return getToken(HanaParser.ANALYZE, 0); }
		public TerminalNode ARRAY() { return getToken(HanaParser.ARRAY, 0); }
		public TerminalNode ASSOCIATE() { return getToken(HanaParser.ASSOCIATE, 0); }
		public TerminalNode AT() { return getToken(HanaParser.AT, 0); }
		public TerminalNode ATTRIBUTE() { return getToken(HanaParser.ATTRIBUTE, 0); }
		public TerminalNode AUDIT() { return getToken(HanaParser.AUDIT, 0); }
		public TerminalNode AUTHID() { return getToken(HanaParser.AUTHID, 0); }
		public TerminalNode AUTO() { return getToken(HanaParser.AUTO, 0); }
		public TerminalNode AUTOMATIC() { return getToken(HanaParser.AUTOMATIC, 0); }
		public TerminalNode AUTONOMOUS_TRANSACTION() { return getToken(HanaParser.AUTONOMOUS_TRANSACTION, 0); }
		public TerminalNode BATCH() { return getToken(HanaParser.BATCH, 0); }
		public TerminalNode BEFORE() { return getToken(HanaParser.BEFORE, 0); }
		public TerminalNode BFILE() { return getToken(HanaParser.BFILE, 0); }
		public TerminalNode BINARY_DOUBLE() { return getToken(HanaParser.BINARY_DOUBLE, 0); }
		public TerminalNode BINARY_FLOAT() { return getToken(HanaParser.BINARY_FLOAT, 0); }
		public TerminalNode BINARY_INTEGER() { return getToken(HanaParser.BINARY_INTEGER, 0); }
		public TerminalNode BLOB() { return getToken(HanaParser.BLOB, 0); }
		public TerminalNode BLOCK() { return getToken(HanaParser.BLOCK, 0); }
		public TerminalNode BODY() { return getToken(HanaParser.BODY, 0); }
		public TerminalNode BOOLEAN() { return getToken(HanaParser.BOOLEAN, 0); }
		public TerminalNode BOTH() { return getToken(HanaParser.BOTH, 0); }
		public TerminalNode BULK() { return getToken(HanaParser.BULK, 0); }
		public TerminalNode BYTE() { return getToken(HanaParser.BYTE, 0); }
		public TerminalNode C_LETTER() { return getToken(HanaParser.C_LETTER, 0); }
		public TerminalNode CALL() { return getToken(HanaParser.CALL, 0); }
		public TerminalNode CANONICAL() { return getToken(HanaParser.CANONICAL, 0); }
		public TerminalNode CASCADE() { return getToken(HanaParser.CASCADE, 0); }
		public TerminalNode CAST() { return getToken(HanaParser.CAST, 0); }
		public TerminalNode CHAR() { return getToken(HanaParser.CHAR, 0); }
		public TerminalNode CHAR_CS() { return getToken(HanaParser.CHAR_CS, 0); }
		public TerminalNode CHARACTER() { return getToken(HanaParser.CHARACTER, 0); }
		public TerminalNode CHR() { return getToken(HanaParser.CHR, 0); }
		public TerminalNode CLOB() { return getToken(HanaParser.CLOB, 0); }
		public TerminalNode CLOSE() { return getToken(HanaParser.CLOSE, 0); }
		public TerminalNode CLUSTER() { return getToken(HanaParser.CLUSTER, 0); }
		public TerminalNode COLLECT() { return getToken(HanaParser.COLLECT, 0); }
		public TerminalNode COLUMNS() { return getToken(HanaParser.COLUMNS, 0); }
		public TerminalNode COMMENT() { return getToken(HanaParser.COMMENT, 0); }
		public TerminalNode COMMIT() { return getToken(HanaParser.COMMIT, 0); }
		public TerminalNode COMMITTED() { return getToken(HanaParser.COMMITTED, 0); }
		public TerminalNode COMPATIBILITY() { return getToken(HanaParser.COMPATIBILITY, 0); }
		public TerminalNode COMPILE() { return getToken(HanaParser.COMPILE, 0); }
		public TerminalNode COMPOUND() { return getToken(HanaParser.COMPOUND, 0); }
		public TerminalNode CONSTANT() { return getToken(HanaParser.CONSTANT, 0); }
		public TerminalNode CONSTRAINT() { return getToken(HanaParser.CONSTRAINT, 0); }
		public TerminalNode CONSTRAINTS() { return getToken(HanaParser.CONSTRAINTS, 0); }
		public TerminalNode CONSTRUCTOR() { return getToken(HanaParser.CONSTRUCTOR, 0); }
		public TerminalNode CONTENT() { return getToken(HanaParser.CONTENT, 0); }
		public TerminalNode CONTEXT() { return getToken(HanaParser.CONTEXT, 0); }
		public TerminalNode CONTINUE() { return getToken(HanaParser.CONTINUE, 0); }
		public TerminalNode CONVERT() { return getToken(HanaParser.CONVERT, 0); }
		public TerminalNode CORRUPT_XID() { return getToken(HanaParser.CORRUPT_XID, 0); }
		public TerminalNode CORRUPT_XID_ALL() { return getToken(HanaParser.CORRUPT_XID_ALL, 0); }
		public TerminalNode COST() { return getToken(HanaParser.COST, 0); }
		public TerminalNode COUNT() { return getToken(HanaParser.COUNT, 0); }
		public TerminalNode CROSS() { return getToken(HanaParser.CROSS, 0); }
		public TerminalNode CUBE() { return getToken(HanaParser.CUBE, 0); }
		public TerminalNode CURRENT_USER() { return getToken(HanaParser.CURRENT_USER, 0); }
		public TerminalNode CURSOR() { return getToken(HanaParser.CURSOR, 0); }
		public TerminalNode CUSTOMDATUM() { return getToken(HanaParser.CUSTOMDATUM, 0); }
		public TerminalNode CYCLE() { return getToken(HanaParser.CYCLE, 0); }
		public TerminalNode DATA() { return getToken(HanaParser.DATA, 0); }
		public TerminalNode DATABASE() { return getToken(HanaParser.DATABASE, 0); }
		public TerminalNode DAY() { return getToken(HanaParser.DAY, 0); }
		public TerminalNode DB_ROLE_CHANGE() { return getToken(HanaParser.DB_ROLE_CHANGE, 0); }
		public TerminalNode DBTIMEZONE() { return getToken(HanaParser.DBTIMEZONE, 0); }
		public TerminalNode DDL() { return getToken(HanaParser.DDL, 0); }
		public TerminalNode DEBUG() { return getToken(HanaParser.DEBUG, 0); }
		public TerminalNode DEC() { return getToken(HanaParser.DEC, 0); }
		public TerminalNode DECIMAL() { return getToken(HanaParser.DECIMAL, 0); }
		public TerminalNode DECOMPOSE() { return getToken(HanaParser.DECOMPOSE, 0); }
		public TerminalNode DECREMENT() { return getToken(HanaParser.DECREMENT, 0); }
		public TerminalNode DEFAULTS() { return getToken(HanaParser.DEFAULTS, 0); }
		public TerminalNode DEFERRED() { return getToken(HanaParser.DEFERRED, 0); }
		public TerminalNode DEFINER() { return getToken(HanaParser.DEFINER, 0); }
		public TerminalNode DETERMINISTIC() { return getToken(HanaParser.DETERMINISTIC, 0); }
		public TerminalNode DIMENSION() { return getToken(HanaParser.DIMENSION, 0); }
		public TerminalNode DISABLE() { return getToken(HanaParser.DISABLE, 0); }
		public TerminalNode DISASSOCIATE() { return getToken(HanaParser.DISASSOCIATE, 0); }
		public TerminalNode DOCUMENT() { return getToken(HanaParser.DOCUMENT, 0); }
		public TerminalNode DOUBLE() { return getToken(HanaParser.DOUBLE, 0); }
		public TerminalNode DSINTERVAL_UNCONSTRAINED() { return getToken(HanaParser.DSINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode EACH() { return getToken(HanaParser.EACH, 0); }
		public TerminalNode ELEMENT() { return getToken(HanaParser.ELEMENT, 0); }
		public TerminalNode EMPTY() { return getToken(HanaParser.EMPTY, 0); }
		public TerminalNode ENABLE() { return getToken(HanaParser.ENABLE, 0); }
		public TerminalNode ENCODING() { return getToken(HanaParser.ENCODING, 0); }
		public TerminalNode ENTITYESCAPING() { return getToken(HanaParser.ENTITYESCAPING, 0); }
		public TerminalNode ERRORS() { return getToken(HanaParser.ERRORS, 0); }
		public TerminalNode ESCAPE() { return getToken(HanaParser.ESCAPE, 0); }
		public TerminalNode EVALNAME() { return getToken(HanaParser.EVALNAME, 0); }
		public TerminalNode EXCEPTION_INIT() { return getToken(HanaParser.EXCEPTION_INIT, 0); }
		public TerminalNode EXCEPTIONS() { return getToken(HanaParser.EXCEPTIONS, 0); }
		public TerminalNode EXCLUDE() { return getToken(HanaParser.EXCLUDE, 0); }
		public TerminalNode EXECUTE() { return getToken(HanaParser.EXECUTE, 0); }
		public TerminalNode EXIT() { return getToken(HanaParser.EXIT, 0); }
		public TerminalNode EXPLAIN() { return getToken(HanaParser.EXPLAIN, 0); }
		public TerminalNode EXTERNAL() { return getToken(HanaParser.EXTERNAL, 0); }
		public TerminalNode EXTRACT() { return getToken(HanaParser.EXTRACT, 0); }
		public TerminalNode FAILURE() { return getToken(HanaParser.FAILURE, 0); }
		public TerminalNode FINAL() { return getToken(HanaParser.FINAL, 0); }
		public TerminalNode FIRST() { return getToken(HanaParser.FIRST, 0); }
		public TerminalNode FIRST_VALUE() { return getToken(HanaParser.FIRST_VALUE, 0); }
		public TerminalNode FLOAT() { return getToken(HanaParser.FLOAT, 0); }
		public TerminalNode FOLLOWING() { return getToken(HanaParser.FOLLOWING, 0); }
		public TerminalNode FOLLOWS() { return getToken(HanaParser.FOLLOWS, 0); }
		public TerminalNode FORALL() { return getToken(HanaParser.FORALL, 0); }
		public TerminalNode FORCE() { return getToken(HanaParser.FORCE, 0); }
		public TerminalNode FULL() { return getToken(HanaParser.FULL, 0); }
		public TerminalNode FUNCTION() { return getToken(HanaParser.FUNCTION, 0); }
		public TerminalNode GROUPING() { return getToken(HanaParser.GROUPING, 0); }
		public TerminalNode HASH() { return getToken(HanaParser.HASH, 0); }
		public TerminalNode HIDE() { return getToken(HanaParser.HIDE, 0); }
		public TerminalNode HOUR() { return getToken(HanaParser.HOUR, 0); }
		public TerminalNode IGNORE() { return getToken(HanaParser.IGNORE, 0); }
		public TerminalNode IMMEDIATE() { return getToken(HanaParser.IMMEDIATE, 0); }
		public TerminalNode INCLUDE() { return getToken(HanaParser.INCLUDE, 0); }
		public TerminalNode INCLUDING() { return getToken(HanaParser.INCLUDING, 0); }
		public TerminalNode INCREMENT() { return getToken(HanaParser.INCREMENT, 0); }
		public TerminalNode INDENT() { return getToken(HanaParser.INDENT, 0); }
		public TerminalNode INDEXED() { return getToken(HanaParser.INDEXED, 0); }
		public TerminalNode INDICATOR() { return getToken(HanaParser.INDICATOR, 0); }
		public TerminalNode INDICES() { return getToken(HanaParser.INDICES, 0); }
		public TerminalNode INFINITE() { return getToken(HanaParser.INFINITE, 0); }
		public TerminalNode INLINE() { return getToken(HanaParser.INLINE, 0); }
		public TerminalNode INNER() { return getToken(HanaParser.INNER, 0); }
		public TerminalNode INOUT() { return getToken(HanaParser.INOUT, 0); }
		public TerminalNode INSTANTIABLE() { return getToken(HanaParser.INSTANTIABLE, 0); }
		public TerminalNode INSTEAD() { return getToken(HanaParser.INSTEAD, 0); }
		public TerminalNode INT() { return getToken(HanaParser.INT, 0); }
		public TerminalNode INTEGER() { return getToken(HanaParser.INTEGER, 0); }
		public TerminalNode INTERVAL() { return getToken(HanaParser.INTERVAL, 0); }
		public TerminalNode INVALIDATE() { return getToken(HanaParser.INVALIDATE, 0); }
		public TerminalNode ISOLATION() { return getToken(HanaParser.ISOLATION, 0); }
		public TerminalNode ITERATE() { return getToken(HanaParser.ITERATE, 0); }
		public TerminalNode JAVA() { return getToken(HanaParser.JAVA, 0); }
		public TerminalNode JOIN() { return getToken(HanaParser.JOIN, 0); }
		public TerminalNode KEEP() { return getToken(HanaParser.KEEP, 0); }
		public TerminalNode LANGUAGE() { return getToken(HanaParser.LANGUAGE, 0); }
		public TerminalNode LAST() { return getToken(HanaParser.LAST, 0); }
		public TerminalNode LAST_VALUE() { return getToken(HanaParser.LAST_VALUE, 0); }
		public TerminalNode LEADING() { return getToken(HanaParser.LEADING, 0); }
		public TerminalNode LEFT() { return getToken(HanaParser.LEFT, 0); }
		public TerminalNode LEVEL() { return getToken(HanaParser.LEVEL, 0); }
		public TerminalNode LIBRARY() { return getToken(HanaParser.LIBRARY, 0); }
		public TerminalNode LIKE2() { return getToken(HanaParser.LIKE2, 0); }
		public TerminalNode LIKE4() { return getToken(HanaParser.LIKE4, 0); }
		public TerminalNode LIKEC() { return getToken(HanaParser.LIKEC, 0); }
		public TerminalNode LIMIT() { return getToken(HanaParser.LIMIT, 0); }
		public TerminalNode LOCAL() { return getToken(HanaParser.LOCAL, 0); }
		public TerminalNode LOCKED() { return getToken(HanaParser.LOCKED, 0); }
		public TerminalNode LOG() { return getToken(HanaParser.LOG, 0); }
		public TerminalNode LOGOFF() { return getToken(HanaParser.LOGOFF, 0); }
		public TerminalNode LOGON() { return getToken(HanaParser.LOGON, 0); }
		public TerminalNode LONG() { return getToken(HanaParser.LONG, 0); }
		public TerminalNode LOOP() { return getToken(HanaParser.LOOP, 0); }
		public TerminalNode MAIN() { return getToken(HanaParser.MAIN, 0); }
		public TerminalNode MAP() { return getToken(HanaParser.MAP, 0); }
		public TerminalNode MATCHED() { return getToken(HanaParser.MATCHED, 0); }
		public TerminalNode MAXVALUE() { return getToken(HanaParser.MAXVALUE, 0); }
		public TerminalNode MEASURES() { return getToken(HanaParser.MEASURES, 0); }
		public TerminalNode MEMBER() { return getToken(HanaParser.MEMBER, 0); }
		public TerminalNode MERGE() { return getToken(HanaParser.MERGE, 0); }
		public TerminalNode MINUTE() { return getToken(HanaParser.MINUTE, 0); }
		public TerminalNode MINVALUE() { return getToken(HanaParser.MINVALUE, 0); }
		public TerminalNode MLSLABEL() { return getToken(HanaParser.MLSLABEL, 0); }
		public TerminalNode MODEL() { return getToken(HanaParser.MODEL, 0); }
		public TerminalNode MODIFY() { return getToken(HanaParser.MODIFY, 0); }
		public TerminalNode MONTH() { return getToken(HanaParser.MONTH, 0); }
		public TerminalNode MULTISET() { return getToken(HanaParser.MULTISET, 0); }
		public TerminalNode NAME() { return getToken(HanaParser.NAME, 0); }
		public TerminalNode NAN() { return getToken(HanaParser.NAN, 0); }
		public TerminalNode NATURAL() { return getToken(HanaParser.NATURAL, 0); }
		public TerminalNode NATURALN() { return getToken(HanaParser.NATURALN, 0); }
		public TerminalNode NAV() { return getToken(HanaParser.NAV, 0); }
		public TerminalNode NCHAR() { return getToken(HanaParser.NCHAR, 0); }
		public TerminalNode NCHAR_CS() { return getToken(HanaParser.NCHAR_CS, 0); }
		public TerminalNode NCLOB() { return getToken(HanaParser.NCLOB, 0); }
		public TerminalNode NESTED() { return getToken(HanaParser.NESTED, 0); }
		public TerminalNode NEW() { return getToken(HanaParser.NEW, 0); }
		public TerminalNode NO() { return getToken(HanaParser.NO, 0); }
		public TerminalNode NOAUDIT() { return getToken(HanaParser.NOAUDIT, 0); }
		public TerminalNode NOCOPY() { return getToken(HanaParser.NOCOPY, 0); }
		public TerminalNode NOCYCLE() { return getToken(HanaParser.NOCYCLE, 0); }
		public TerminalNode NOENTITYESCAPING() { return getToken(HanaParser.NOENTITYESCAPING, 0); }
		public TerminalNode NONE() { return getToken(HanaParser.NONE, 0); }
		public TerminalNode NOSCHEMACHECK() { return getToken(HanaParser.NOSCHEMACHECK, 0); }
		public TerminalNode NULLS() { return getToken(HanaParser.NULLS, 0); }
		public TerminalNode NUMBER() { return getToken(HanaParser.NUMBER, 0); }
		public TerminalNode NUMERIC() { return getToken(HanaParser.NUMERIC, 0); }
		public TerminalNode NVARCHAR() { return getToken(HanaParser.NVARCHAR, 0); }
		public TerminalNode OBJECT() { return getToken(HanaParser.OBJECT, 0); }
		public TerminalNode OFF() { return getToken(HanaParser.OFF, 0); }
		public TerminalNode OID() { return getToken(HanaParser.OID, 0); }
		public TerminalNode OLD() { return getToken(HanaParser.OLD, 0); }
		public TerminalNode ONLY() { return getToken(HanaParser.ONLY, 0); }
		public TerminalNode OPEN() { return getToken(HanaParser.OPEN, 0); }
		public TerminalNode ORADATA() { return getToken(HanaParser.ORADATA, 0); }
		public TerminalNode ORDINALITY() { return getToken(HanaParser.ORDINALITY, 0); }
		public TerminalNode OSERROR() { return getToken(HanaParser.OSERROR, 0); }
		public TerminalNode OUT() { return getToken(HanaParser.OUT, 0); }
		public TerminalNode OUTER() { return getToken(HanaParser.OUTER, 0); }
		public TerminalNode OVER() { return getToken(HanaParser.OVER, 0); }
		public TerminalNode OVERRIDING() { return getToken(HanaParser.OVERRIDING, 0); }
		public TerminalNode PACKAGE() { return getToken(HanaParser.PACKAGE, 0); }
		public TerminalNode PARALLEL_ENABLE() { return getToken(HanaParser.PARALLEL_ENABLE, 0); }
		public TerminalNode PARAMETERS() { return getToken(HanaParser.PARAMETERS, 0); }
		public TerminalNode PARENT() { return getToken(HanaParser.PARENT, 0); }
		public TerminalNode PARTITION() { return getToken(HanaParser.PARTITION, 0); }
		public TerminalNode PASSING() { return getToken(HanaParser.PASSING, 0); }
		public TerminalNode PATH() { return getToken(HanaParser.PATH, 0); }
		public TerminalNode PIPELINED() { return getToken(HanaParser.PIPELINED, 0); }
		public TerminalNode PLAN() { return getToken(HanaParser.PLAN, 0); }
		public TerminalNode PLS_INTEGER() { return getToken(HanaParser.PLS_INTEGER, 0); }
		public TerminalNode POSITIVE() { return getToken(HanaParser.POSITIVE, 0); }
		public TerminalNode POSITIVEN() { return getToken(HanaParser.POSITIVEN, 0); }
		public TerminalNode PRAGMA() { return getToken(HanaParser.PRAGMA, 0); }
		public TerminalNode PRECEDING() { return getToken(HanaParser.PRECEDING, 0); }
		public TerminalNode PRECISION() { return getToken(HanaParser.PRECISION, 0); }
		public TerminalNode PRESENT() { return getToken(HanaParser.PRESENT, 0); }
		public TerminalNode RAISE() { return getToken(HanaParser.RAISE, 0); }
		public TerminalNode RANGE() { return getToken(HanaParser.RANGE, 0); }
		public TerminalNode RAW() { return getToken(HanaParser.RAW, 0); }
		public TerminalNode READ() { return getToken(HanaParser.READ, 0); }
		public TerminalNode REAL() { return getToken(HanaParser.REAL, 0); }
		public TerminalNode RECORD() { return getToken(HanaParser.RECORD, 0); }
		public TerminalNode REF() { return getToken(HanaParser.REF, 0); }
		public TerminalNode REFERENCE() { return getToken(HanaParser.REFERENCE, 0); }
		public TerminalNode REFERENCING() { return getToken(HanaParser.REFERENCING, 0); }
		public TerminalNode REJECT() { return getToken(HanaParser.REJECT, 0); }
		public TerminalNode RELIES_ON() { return getToken(HanaParser.RELIES_ON, 0); }
		public TerminalNode RENAME() { return getToken(HanaParser.RENAME, 0); }
		public TerminalNode REPLACE() { return getToken(HanaParser.REPLACE, 0); }
		public TerminalNode RESPECT() { return getToken(HanaParser.RESPECT, 0); }
		public TerminalNode RESTRICT_REFERENCES() { return getToken(HanaParser.RESTRICT_REFERENCES, 0); }
		public TerminalNode RESULT() { return getToken(HanaParser.RESULT, 0); }
		public TerminalNode RESULT_CACHE() { return getToken(HanaParser.RESULT_CACHE, 0); }
		public TerminalNode RETURN() { return getToken(HanaParser.RETURN, 0); }
		public TerminalNode RETURNS() { return getToken(HanaParser.RETURNS, 0); }
		public TerminalNode RETURNING() { return getToken(HanaParser.RETURNING, 0); }
		public TerminalNode REUSE() { return getToken(HanaParser.REUSE, 0); }
		public TerminalNode REVERSE() { return getToken(HanaParser.REVERSE, 0); }
		public TerminalNode RIGHT() { return getToken(HanaParser.RIGHT, 0); }
		public TerminalNode ROLLBACK() { return getToken(HanaParser.ROLLBACK, 0); }
		public TerminalNode ROLLUP() { return getToken(HanaParser.ROLLUP, 0); }
		public TerminalNode ROW() { return getToken(HanaParser.ROW, 0); }
		public TerminalNode ROWID() { return getToken(HanaParser.ROWID, 0); }
		public TerminalNode ROWS() { return getToken(HanaParser.ROWS, 0); }
		public TerminalNode RULES() { return getToken(HanaParser.RULES, 0); }
		public TerminalNode SAMPLE() { return getToken(HanaParser.SAMPLE, 0); }
		public TerminalNode SAVE() { return getToken(HanaParser.SAVE, 0); }
		public TerminalNode SAVEPOINT() { return getToken(HanaParser.SAVEPOINT, 0); }
		public TerminalNode SCHEMA() { return getToken(HanaParser.SCHEMA, 0); }
		public TerminalNode SCHEMACHECK() { return getToken(HanaParser.SCHEMACHECK, 0); }
		public TerminalNode SCN() { return getToken(HanaParser.SCN, 0); }
		public TerminalNode SECOND() { return getToken(HanaParser.SECOND, 0); }
		public TerminalNode SEED() { return getToken(HanaParser.SEED, 0); }
		public TerminalNode SEGMENT() { return getToken(HanaParser.SEGMENT, 0); }
		public TerminalNode SELF() { return getToken(HanaParser.SELF, 0); }
		public TerminalNode SEQUENTIAL() { return getToken(HanaParser.SEQUENTIAL, 0); }
		public TerminalNode SERIALIZABLE() { return getToken(HanaParser.SERIALIZABLE, 0); }
		public TerminalNode SERIALLY_REUSABLE() { return getToken(HanaParser.SERIALLY_REUSABLE, 0); }
		public TerminalNode SERVERERROR() { return getToken(HanaParser.SERVERERROR, 0); }
		public TerminalNode SESSIONTIMEZONE() { return getToken(HanaParser.SESSIONTIMEZONE, 0); }
		public TerminalNode SET() { return getToken(HanaParser.SET, 0); }
		public TerminalNode SETS() { return getToken(HanaParser.SETS, 0); }
		public TerminalNode SETTINGS() { return getToken(HanaParser.SETTINGS, 0); }
		public TerminalNode SHOW() { return getToken(HanaParser.SHOW, 0); }
		public TerminalNode SHUTDOWN() { return getToken(HanaParser.SHUTDOWN, 0); }
		public TerminalNode SIBLINGS() { return getToken(HanaParser.SIBLINGS, 0); }
		public TerminalNode SIGNTYPE() { return getToken(HanaParser.SIGNTYPE, 0); }
		public TerminalNode SIMPLE_INTEGER() { return getToken(HanaParser.SIMPLE_INTEGER, 0); }
		public TerminalNode SINGLE() { return getToken(HanaParser.SINGLE, 0); }
		public TerminalNode SKIP_() { return getToken(HanaParser.SKIP_, 0); }
		public TerminalNode SMALLINT() { return getToken(HanaParser.SMALLINT, 0); }
		public TerminalNode SNAPSHOT() { return getToken(HanaParser.SNAPSHOT, 0); }
		public TerminalNode SOME() { return getToken(HanaParser.SOME, 0); }
		public TerminalNode SPECIFICATION() { return getToken(HanaParser.SPECIFICATION, 0); }
		public TerminalNode SQLDATA() { return getToken(HanaParser.SQLDATA, 0); }
		public TerminalNode SQLERROR() { return getToken(HanaParser.SQLERROR, 0); }
		public TerminalNode STANDALONE() { return getToken(HanaParser.STANDALONE, 0); }
		public TerminalNode STARTUP() { return getToken(HanaParser.STARTUP, 0); }
		public TerminalNode STATEMENT() { return getToken(HanaParser.STATEMENT, 0); }
		public TerminalNode STATEMENT_ID() { return getToken(HanaParser.STATEMENT_ID, 0); }
		public TerminalNode STATIC() { return getToken(HanaParser.STATIC, 0); }
		public TerminalNode STATISTICS() { return getToken(HanaParser.STATISTICS, 0); }
		public TerminalNode STRING() { return getToken(HanaParser.STRING, 0); }
		public TerminalNode SUBMULTISET() { return getToken(HanaParser.SUBMULTISET, 0); }
		public TerminalNode SUBPARTITION() { return getToken(HanaParser.SUBPARTITION, 0); }
		public TerminalNode SUBSTITUTABLE() { return getToken(HanaParser.SUBSTITUTABLE, 0); }
		public TerminalNode SUBTYPE() { return getToken(HanaParser.SUBTYPE, 0); }
		public TerminalNode SUCCESS() { return getToken(HanaParser.SUCCESS, 0); }
		public TerminalNode SUSPEND() { return getToken(HanaParser.SUSPEND, 0); }
		public TerminalNode TIME() { return getToken(HanaParser.TIME, 0); }
		public TerminalNode TIMESTAMP() { return getToken(HanaParser.TIMESTAMP, 0); }
		public TerminalNode TIMESTAMP_LTZ_UNCONSTRAINED() { return getToken(HanaParser.TIMESTAMP_LTZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_TZ_UNCONSTRAINED() { return getToken(HanaParser.TIMESTAMP_TZ_UNCONSTRAINED, 0); }
		public TerminalNode TIMESTAMP_UNCONSTRAINED() { return getToken(HanaParser.TIMESTAMP_UNCONSTRAINED, 0); }
		public TerminalNode TIMEZONE_ABBR() { return getToken(HanaParser.TIMEZONE_ABBR, 0); }
		public TerminalNode TIMEZONE_HOUR() { return getToken(HanaParser.TIMEZONE_HOUR, 0); }
		public TerminalNode TIMEZONE_MINUTE() { return getToken(HanaParser.TIMEZONE_MINUTE, 0); }
		public TerminalNode TIMEZONE_REGION() { return getToken(HanaParser.TIMEZONE_REGION, 0); }
		public TerminalNode TRAILING() { return getToken(HanaParser.TRAILING, 0); }
		public TerminalNode TRANSACTION() { return getToken(HanaParser.TRANSACTION, 0); }
		public TerminalNode TRANSLATE() { return getToken(HanaParser.TRANSLATE, 0); }
		public TerminalNode TREAT() { return getToken(HanaParser.TREAT, 0); }
		public TerminalNode TRIGGER() { return getToken(HanaParser.TRIGGER, 0); }
		public TerminalNode TRIM() { return getToken(HanaParser.TRIM, 0); }
		public TerminalNode TRUNCATE() { return getToken(HanaParser.TRUNCATE, 0); }
		public TerminalNode TYPE() { return getToken(HanaParser.TYPE, 0); }
		public TerminalNode UNBOUNDED() { return getToken(HanaParser.UNBOUNDED, 0); }
		public TerminalNode UNDER() { return getToken(HanaParser.UNDER, 0); }
		public TerminalNode UNLIMITED() { return getToken(HanaParser.UNLIMITED, 0); }
		public TerminalNode UNTIL() { return getToken(HanaParser.UNTIL, 0); }
		public TerminalNode UPDATED() { return getToken(HanaParser.UPDATED, 0); }
		public TerminalNode UPSERT() { return getToken(HanaParser.UPSERT, 0); }
		public TerminalNode UROWID() { return getToken(HanaParser.UROWID, 0); }
		public TerminalNode USE() { return getToken(HanaParser.USE, 0); }
		public TerminalNode VALIDATE() { return getToken(HanaParser.VALIDATE, 0); }
		public TerminalNode VALUE() { return getToken(HanaParser.VALUE, 0); }
		public TerminalNode VARCHAR() { return getToken(HanaParser.VARCHAR, 0); }
		public TerminalNode VARCHAR2() { return getToken(HanaParser.VARCHAR2, 0); }
		public TerminalNode VARIABLE() { return getToken(HanaParser.VARIABLE, 0); }
		public TerminalNode VARRAY() { return getToken(HanaParser.VARRAY, 0); }
		public TerminalNode VARYING() { return getToken(HanaParser.VARYING, 0); }
		public TerminalNode VERSION() { return getToken(HanaParser.VERSION, 0); }
		public TerminalNode VERSIONS() { return getToken(HanaParser.VERSIONS, 0); }
		public TerminalNode WAIT() { return getToken(HanaParser.WAIT, 0); }
		public TerminalNode WARNING() { return getToken(HanaParser.WARNING, 0); }
		public TerminalNode WELLFORMED() { return getToken(HanaParser.WELLFORMED, 0); }
		public TerminalNode WHENEVER() { return getToken(HanaParser.WHENEVER, 0); }
		public TerminalNode WHILE() { return getToken(HanaParser.WHILE, 0); }
		public TerminalNode WITHIN() { return getToken(HanaParser.WITHIN, 0); }
		public TerminalNode WORK() { return getToken(HanaParser.WORK, 0); }
		public TerminalNode WRITE() { return getToken(HanaParser.WRITE, 0); }
		public TerminalNode XML() { return getToken(HanaParser.XML, 0); }
		public TerminalNode XMLAGG() { return getToken(HanaParser.XMLAGG, 0); }
		public TerminalNode XMLATTRIBUTES() { return getToken(HanaParser.XMLATTRIBUTES, 0); }
		public TerminalNode XMLCAST() { return getToken(HanaParser.XMLCAST, 0); }
		public TerminalNode XMLCOLATTVAL() { return getToken(HanaParser.XMLCOLATTVAL, 0); }
		public TerminalNode XMLELEMENT() { return getToken(HanaParser.XMLELEMENT, 0); }
		public TerminalNode XMLEXISTS() { return getToken(HanaParser.XMLEXISTS, 0); }
		public TerminalNode XMLFOREST() { return getToken(HanaParser.XMLFOREST, 0); }
		public TerminalNode XMLNAMESPACES() { return getToken(HanaParser.XMLNAMESPACES, 0); }
		public TerminalNode XMLPARSE() { return getToken(HanaParser.XMLPARSE, 0); }
		public TerminalNode XMLPI() { return getToken(HanaParser.XMLPI, 0); }
		public TerminalNode XMLQUERY() { return getToken(HanaParser.XMLQUERY, 0); }
		public TerminalNode XMLROOT() { return getToken(HanaParser.XMLROOT, 0); }
		public TerminalNode XMLSERIALIZE() { return getToken(HanaParser.XMLSERIALIZE, 0); }
		public TerminalNode XMLTABLE() { return getToken(HanaParser.XMLTABLE, 0); }
		public TerminalNode YEAR() { return getToken(HanaParser.YEAR, 0); }
		public TerminalNode YES() { return getToken(HanaParser.YES, 0); }
		public TerminalNode YMINTERVAL_UNCONSTRAINED() { return getToken(HanaParser.YMINTERVAL_UNCONSTRAINED, 0); }
		public TerminalNode ZONE() { return getToken(HanaParser.ZONE, 0); }
		public TerminalNode PREDICTION() { return getToken(HanaParser.PREDICTION, 0); }
		public TerminalNode PREDICTION_BOUNDS() { return getToken(HanaParser.PREDICTION_BOUNDS, 0); }
		public TerminalNode PREDICTION_COST() { return getToken(HanaParser.PREDICTION_COST, 0); }
		public TerminalNode PREDICTION_DETAILS() { return getToken(HanaParser.PREDICTION_DETAILS, 0); }
		public TerminalNode PREDICTION_PROBABILITY() { return getToken(HanaParser.PREDICTION_PROBABILITY, 0); }
		public TerminalNode PREDICTION_SET() { return getToken(HanaParser.PREDICTION_SET, 0); }
		public TerminalNode CUME_DIST() { return getToken(HanaParser.CUME_DIST, 0); }
		public TerminalNode DENSE_RANK() { return getToken(HanaParser.DENSE_RANK, 0); }
		public TerminalNode LISTAGG() { return getToken(HanaParser.LISTAGG, 0); }
		public TerminalNode PERCENT_RANK() { return getToken(HanaParser.PERCENT_RANK, 0); }
		public TerminalNode PERCENTILE_CONT() { return getToken(HanaParser.PERCENTILE_CONT, 0); }
		public TerminalNode PERCENTILE_DISC() { return getToken(HanaParser.PERCENTILE_DISC, 0); }
		public TerminalNode RANK() { return getToken(HanaParser.RANK, 0); }
		public TerminalNode AVG() { return getToken(HanaParser.AVG, 0); }
		public TerminalNode CORR() { return getToken(HanaParser.CORR, 0); }
		public TerminalNode LAG() { return getToken(HanaParser.LAG, 0); }
		public TerminalNode LEAD() { return getToken(HanaParser.LEAD, 0); }
		public TerminalNode MAX() { return getToken(HanaParser.MAX, 0); }
		public TerminalNode MEDIAN() { return getToken(HanaParser.MEDIAN, 0); }
		public TerminalNode MIN() { return getToken(HanaParser.MIN, 0); }
		public TerminalNode NTILE() { return getToken(HanaParser.NTILE, 0); }
		public TerminalNode RATIO_TO_REPORT() { return getToken(HanaParser.RATIO_TO_REPORT, 0); }
		public TerminalNode ROW_NUMBER() { return getToken(HanaParser.ROW_NUMBER, 0); }
		public TerminalNode SUM() { return getToken(HanaParser.SUM, 0); }
		public TerminalNode VARIANCE() { return getToken(HanaParser.VARIANCE, 0); }
		public TerminalNode REGR_() { return getToken(HanaParser.REGR_, 0); }
		public TerminalNode STDDEV() { return getToken(HanaParser.STDDEV, 0); }
		public TerminalNode VAR_() { return getToken(HanaParser.VAR_, 0); }
		public TerminalNode COVAR_() { return getToken(HanaParser.COVAR_, 0); }
		public Regular_idContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_regular_id; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).enterRegular_id(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof HanaListener ) ((HanaListener)listener).exitRegular_id(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof HanaVisitor ) return ((HanaVisitor<? extends T>)visitor).visitRegular_id(this);
			else return visitor.visitChildren(this);
		}
	}

	public final Regular_idContext regular_id() throws RecognitionException {
		Regular_idContext _localctx = new Regular_idContext(_ctx, getState());
		enterRule(_localctx, 860, RULE_regular_id);
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(5598);
			_la = _input.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << A_LETTER) | (1L << ADD) | (1L << AFTER) | (1L << AGENT) | (1L << AGGREGATE) | (1L << ANALYZE) | (1L << ARRAY) | (1L << ASSOCIATE) | (1L << AT) | (1L << ATTRIBUTE) | (1L << AUDIT) | (1L << AUTHID) | (1L << AUTO) | (1L << AUTOMATIC) | (1L << AUTONOMOUS_TRANSACTION) | (1L << BATCH) | (1L << BEFORE) | (1L << BFILE) | (1L << BINARY_DOUBLE) | (1L << BINARY_FLOAT) | (1L << BINARY_INTEGER) | (1L << BLOB) | (1L << BLOCK) | (1L << BODY) | (1L << BOOLEAN) | (1L << BOTH) | (1L << BULK) | (1L << BYTE) | (1L << C_LETTER) | (1L << CALL) | (1L << CANONICAL) | (1L << CASCADE) | (1L << CAST) | (1L << CHAR) | (1L << CHAR_CS) | (1L << CHARACTER) | (1L << CHR) | (1L << CLOB) | (1L << CLOSE) | (1L << CLUSTER) | (1L << COLLECT))) != 0) || ((((_la - 64)) & ~0x3f) == 0 && ((1L << (_la - 64)) & ((1L << (COLUMNS - 64)) | (1L << (COMMENT - 64)) | (1L << (COMMIT - 64)) | (1L << (COMMITTED - 64)) | (1L << (COMPATIBILITY - 64)) | (1L << (COMPILE - 64)) | (1L << (COMPOUND - 64)) | (1L << (CONSTANT - 64)) | (1L << (CONSTRAINT - 64)) | (1L << (CONSTRAINTS - 64)) | (1L << (CONSTRUCTOR - 64)) | (1L << (CONTENT - 64)) | (1L << (CONTEXT - 64)) | (1L << (CONTINUE - 64)) | (1L << (CONVERT - 64)) | (1L << (CORRUPT_XID - 64)) | (1L << (CORRUPT_XID_ALL - 64)) | (1L << (COST - 64)) | (1L << (COUNT - 64)) | (1L << (CROSS - 64)) | (1L << (CUBE - 64)) | (1L << (CURRENT_USER - 64)) | (1L << (CURSOR - 64)) | (1L << (CUSTOMDATUM - 64)) | (1L << (CYCLE - 64)) | (1L << (DATA - 64)) | (1L << (DATABASE - 64)) | (1L << (DAY - 64)) | (1L << (DB_ROLE_CHANGE - 64)) | (1L << (DBTIMEZONE - 64)) | (1L << (DDL - 64)) | (1L << (DEBUG - 64)) | (1L << (DEC - 64)) | (1L << (DECIMAL - 64)) | (1L << (DECOMPOSE - 64)) | (1L << (DECREMENT - 64)) | (1L << (DEFAULTS - 64)) | (1L << (DEFERRED - 64)) | (1L << (DEFINER - 64)) | (1L << (DETERMINISTIC - 64)) | (1L << (DIMENSION - 64)) | (1L << (DISABLE - 64)) | (1L << (DISASSOCIATE - 64)) | (1L << (DOCUMENT - 64)) | (1L << (DOUBLE - 64)) | (1L << (DSINTERVAL_UNCONSTRAINED - 64)) | (1L << (EACH - 64)) | (1L << (ELEMENT - 64)) | (1L << (EMPTY - 64)) | (1L << (ENABLE - 64)))) != 0) || ((((_la - 128)) & ~0x3f) == 0 && ((1L << (_la - 128)) & ((1L << (ENCODING - 128)) | (1L << (ENTITYESCAPING - 128)) | (1L << (ERRORS - 128)) | (1L << (ESCAPE - 128)) | (1L << (EVALNAME - 128)) | (1L << (EXCEPTION_INIT - 128)) | (1L << (EXCEPTIONS - 128)) | (1L << (EXCLUDE - 128)) | (1L << (EXECUTE - 128)) | (1L << (EXIT - 128)) | (1L << (EXPLAIN - 128)) | (1L << (EXTERNAL - 128)) | (1L << (EXTRACT - 128)) | (1L << (FAILURE - 128)) | (1L << (FINAL - 128)) | (1L << (FIRST - 128)) | (1L << (FIRST_VALUE - 128)) | (1L << (FLOAT - 128)) | (1L << (FOLLOWING - 128)) | (1L << (FOLLOWS - 128)) | (1L << (FORALL - 128)) | (1L << (FORCE - 128)) | (1L << (FULL - 128)) | (1L << (FUNCTION - 128)) | (1L << (GROUPING - 128)) | (1L << (HASH - 128)) | (1L << (HIDE - 128)) | (1L << (HOUR - 128)) | (1L << (IGNORE - 128)) | (1L << (IMMEDIATE - 128)) | (1L << (INCLUDE - 128)) | (1L << (INCLUDING - 128)) | (1L << (INCREMENT - 128)) | (1L << (INDENT - 128)) | (1L << (INDEXED - 128)) | (1L << (INDICATOR - 128)) | (1L << (INDICES - 128)) | (1L << (INFINITE - 128)) | (1L << (INLINE - 128)) | (1L << (INNER - 128)) | (1L << (INOUT - 128)) | (1L << (INSTANTIABLE - 128)) | (1L << (INSTEAD - 128)) | (1L << (INT - 128)) | (1L << (INTEGER - 128)) | (1L << (INTERVAL - 128)))) != 0) || ((((_la - 193)) & ~0x3f) == 0 && ((1L << (_la - 193)) & ((1L << (INVALIDATE - 193)) | (1L << (ISOLATION - 193)) | (1L << (ITERATE - 193)) | (1L << (JAVA - 193)) | (1L << (JOIN - 193)) | (1L << (KEEP - 193)) | (1L << (LANGUAGE - 193)) | (1L << (LAST - 193)) | (1L << (LAST_VALUE - 193)) | (1L << (LEADING - 193)) | (1L << (LEFT - 193)) | (1L << (LEVEL - 193)) | (1L << (LIBRARY - 193)) | (1L << (LIKE2 - 193)) | (1L << (LIKE4 - 193)) | (1L << (LIKEC - 193)) | (1L << (LIMIT - 193)) | (1L << (LOCAL - 193)) | (1L << (LOCKED - 193)) | (1L << (LOG - 193)) | (1L << (LOGOFF - 193)) | (1L << (LOGON - 193)) | (1L << (LONG - 193)) | (1L << (LOOP - 193)) | (1L << (MAIN - 193)) | (1L << (MAP - 193)) | (1L << (MATCHED - 193)) | (1L << (MAXVALUE - 193)) | (1L << (MEASURES - 193)) | (1L << (MEMBER - 193)) | (1L << (MERGE - 193)) | (1L << (MINUTE - 193)) | (1L << (MINVALUE - 193)) | (1L << (MLSLABEL - 193)) | (1L << (MODEL - 193)) | (1L << (MODIFY - 193)) | (1L << (MONTH - 193)) | (1L << (MULTISET - 193)) | (1L << (NAME - 193)) | (1L << (NAN - 193)) | (1L << (NATURAL - 193)) | (1L << (NATURALN - 193)) | (1L << (NAV - 193)) | (1L << (NCHAR - 193)) | (1L << (NCHAR_CS - 193)) | (1L << (NCLOB - 193)) | (1L << (NESTED - 193)) | (1L << (NEW - 193)) | (1L << (NO - 193)) | (1L << (NOAUDIT - 193)) | (1L << (NOCOPY - 193)) | (1L << (NOCYCLE - 193)) | (1L << (NOENTITYESCAPING - 193)) | (1L << (NONE - 193)))) != 0) || ((((_la - 257)) & ~0x3f) == 0 && ((1L << (_la - 257)) & ((1L << (NOSCHEMACHECK - 257)) | (1L << (NULLS - 257)) | (1L << (NUMBER - 257)) | (1L << (NUMERIC - 257)) | (1L << (NVARCHAR - 257)) | (1L << (OBJECT - 257)) | (1L << (OFF - 257)) | (1L << (OID - 257)) | (1L << (OLD - 257)) | (1L << (ONLY - 257)) | (1L << (OPEN - 257)) | (1L << (ORADATA - 257)) | (1L << (ORDINALITY - 257)) | (1L << (OSERROR - 257)) | (1L << (OUT - 257)) | (1L << (OUTER - 257)) | (1L << (OVER - 257)) | (1L << (OVERRIDING - 257)) | (1L << (PACKAGE - 257)) | (1L << (PARALLEL_ENABLE - 257)) | (1L << (PARAMETERS - 257)) | (1L << (PARENT - 257)) | (1L << (PARTITION - 257)) | (1L << (PASSING - 257)) | (1L << (PATH - 257)) | (1L << (PIPELINED - 257)) | (1L << (PLAN - 257)) | (1L << (PLS_INTEGER - 257)) | (1L << (POSITIVE - 257)) | (1L << (POSITIVEN - 257)) | (1L << (PRAGMA - 257)) | (1L << (PRECEDING - 257)) | (1L << (PRECISION - 257)) | (1L << (PRESENT - 257)) | (1L << (RAISE - 257)) | (1L << (RANGE - 257)) | (1L << (RAW - 257)) | (1L << (READ - 257)) | (1L << (REAL - 257)) | (1L << (RECORD - 257)) | (1L << (REF - 257)) | (1L << (REFERENCE - 257)) | (1L << (REFERENCING - 257)) | (1L << (REJECT - 257)) | (1L << (RELIES_ON - 257)) | (1L << (RENAME - 257)) | (1L << (REPLACE - 257)) | (1L << (RESPECT - 257)) | (1L << (RESTRICT_REFERENCES - 257)) | (1L << (RESULT - 257)))) != 0) || ((((_la - 321)) & ~0x3f) == 0 && ((1L << (_la - 321)) & ((1L << (RESULT_CACHE - 321)) | (1L << (RETURN - 321)) | (1L << (RETURNS - 321)) | (1L << (RETURNING - 321)) | (1L << (REUSE - 321)) | (1L << (REVERSE - 321)) | (1L << (RIGHT - 321)) | (1L << (ROLLBACK - 321)) | (1L << (ROLLUP - 321)) | (1L << (ROW - 321)) | (1L << (ROWID - 321)) | (1L << (ROWS - 321)) | (1L << (RULES - 321)) | (1L << (SAMPLE - 321)) | (1L << (SAVE - 321)) | (1L << (SAVEPOINT - 321)) | (1L << (SCHEMA - 321)) | (1L << (SCHEMACHECK - 321)) | (1L << (SCN - 321)) | (1L << (SECOND - 321)) | (1L << (SEED - 321)) | (1L << (SEGMENT - 321)) | (1L << (SELF - 321)) | (1L << (SEQUENTIAL - 321)) | (1L << (SERIALIZABLE - 321)) | (1L << (SERIALLY_REUSABLE - 321)) | (1L << (SERVERERROR - 321)) | (1L << (SESSIONTIMEZONE - 321)) | (1L << (SET - 321)) | (1L << (SETS - 321)) | (1L << (SETTINGS - 321)) | (1L << (SHOW - 321)) | (1L << (SHUTDOWN - 321)) | (1L << (SIBLINGS - 321)) | (1L << (SIGNTYPE - 321)) | (1L << (SIMPLE_INTEGER - 321)) | (1L << (SINGLE - 321)) | (1L << (SKIP_ - 321)) | (1L << (SMALLINT - 321)) | (1L << (SNAPSHOT - 321)) | (1L << (SOME - 321)) | (1L << (SPECIFICATION - 321)) | (1L << (SQLDATA - 321)) | (1L << (SQLERROR - 321)) | (1L << (STANDALONE - 321)) | (1L << (STARTUP - 321)) | (1L << (STATEMENT - 321)) | (1L << (STATEMENT_ID - 321)) | (1L << (STATIC - 321)) | (1L << (STATISTICS - 321)) | (1L << (STRING - 321)))) != 0) || ((((_la - 385)) & ~0x3f) == 0 && ((1L << (_la - 385)) & ((1L << (SUBMULTISET - 385)) | (1L << (SUBPARTITION - 385)) | (1L << (SUBSTITUTABLE - 385)) | (1L << (SUBTYPE - 385)) | (1L << (SUCCESS - 385)) | (1L << (SUSPEND - 385)) | (1L << (TIME - 385)) | (1L << (TIMESTAMP - 385)) | (1L << (TIMESTAMP_LTZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_TZ_UNCONSTRAINED - 385)) | (1L << (TIMESTAMP_UNCONSTRAINED - 385)) | (1L << (TIMEZONE_ABBR - 385)) | (1L << (TIMEZONE_HOUR - 385)) | (1L << (TIMEZONE_MINUTE - 385)) | (1L << (TIMEZONE_REGION - 385)) | (1L << (TRAILING - 385)) | (1L << (TRANSACTION - 385)) | (1L << (TRANSLATE - 385)) | (1L << (TREAT - 385)) | (1L << (TRIGGER - 385)) | (1L << (TRIM - 385)) | (1L << (TRUNCATE - 385)) | (1L << (TYPE - 385)) | (1L << (UNBOUNDED - 385)) | (1L << (UNDER - 385)) | (1L << (UNLIMITED - 385)) | (1L << (UNTIL - 385)) | (1L << (UPDATED - 385)) | (1L << (UPSERT - 385)) | (1L << (UROWID - 385)) | (1L << (USE - 385)) | (1L << (VALIDATE - 385)) | (1L << (VALUE - 385)) | (1L << (VARCHAR - 385)) | (1L << (VARCHAR2 - 385)) | (1L << (VARIABLE - 385)) | (1L << (VARRAY - 385)) | (1L << (VARYING - 385)) | (1L << (VERSION - 385)) | (1L << (VERSIONS - 385)) | (1L << (WAIT - 385)) | (1L << (WARNING - 385)) | (1L << (WELLFORMED - 385)) | (1L << (WHENEVER - 385)) | (1L << (WHILE - 385)) | (1L << (WITHIN - 385)) | (1L << (WORK - 385)) | (1L << (WRITE - 385)))) != 0) || ((((_la - 449)) & ~0x3f) == 0 && ((1L << (_la - 449)) & ((1L << (XML - 449)) | (1L << (XMLAGG - 449)) | (1L << (XMLATTRIBUTES - 449)) | (1L << (XMLCAST - 449)) | (1L << (XMLCOLATTVAL - 449)) | (1L << (XMLELEMENT - 449)) | (1L << (XMLEXISTS - 449)) | (1L << (XMLFOREST - 449)) | (1L << (XMLNAMESPACES - 449)) | (1L << (XMLPARSE - 449)) | (1L << (XMLPI - 449)) | (1L << (XMLQUERY - 449)) | (1L << (XMLROOT - 449)) | (1L << (XMLSERIALIZE - 449)) | (1L << (XMLTABLE - 449)) | (1L << (YEAR - 449)) | (1L << (YES - 449)) | (1L << (YMINTERVAL_UNCONSTRAINED - 449)) | (1L << (ZONE - 449)) | (1L << (PREDICTION - 449)) | (1L << (PREDICTION_BOUNDS - 449)) | (1L << (PREDICTION_COST - 449)) | (1L << (PREDICTION_DETAILS - 449)) | (1L << (PREDICTION_PROBABILITY - 449)) | (1L << (PREDICTION_SET - 449)) | (1L << (CUME_DIST - 449)) | (1L << (DENSE_RANK - 449)) | (1L << (LISTAGG - 449)) | (1L << (PERCENT_RANK - 449)) | (1L << (PERCENTILE_CONT - 449)) | (1L << (PERCENTILE_DISC - 449)) | (1L << (RANK - 449)) | (1L << (AVG - 449)) | (1L << (CORR - 449)) | (1L << (LAG - 449)) | (1L << (LEAD - 449)) | (1L << (MAX - 449)) | (1L << (MEDIAN - 449)) | (1L << (MIN - 449)) | (1L << (NTILE - 449)) | (1L << (RATIO_TO_REPORT - 449)) | (1L << (ROW_NUMBER - 449)))) != 0) || ((((_la - 513)) & ~0x3f) == 0 && ((1L << (_la - 513)) & ((1L << (SUM - 513)) | (1L << (VARIANCE - 513)) | (1L << (REGR_ - 513)) | (1L << (STDDEV - 513)) | (1L << (VAR_ - 513)) | (1L << (COVAR_ - 513)) | (1L << (REGULAR_ID - 513)))) != 0)) ) {
			_errHandler.recoverInline(this);
			}
			else {
				if ( _input.LA(1)==Token.EOF ) matchedEOF = true;
				_errHandler.reportMatch(this);
				consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 276:
			return condition__sempred((Condition_Context)_localctx, predIndex);
		case 286:
			return expression__sempred((Expression_Context)_localctx, predIndex);
		}
		return true;
	}
	private boolean condition__sempred(Condition_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 0:
			return precpred(_ctx, 5);
		case 1:
			return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean expression__sempred(Expression_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 2:
			return precpred(_ctx, 4);
		}
		return true;
	}

	private static final String _serializedATNSegment0 =
		"\u0004\u0001\u0231\u15e1\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001"+
		"\u0002\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004"+
		"\u0002\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007"+
		"\u0002\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b"+
		"\u0002\f\u0007\f\u0002\r\u0007\r\u0002\u000e\u0007\u000e\u0002\u000f\u0007"+
		"\u000f\u0002\u0010\u0007\u0010\u0002\u0011\u0007\u0011\u0002\u0012\u0007"+
		"\u0012\u0002\u0013\u0007\u0013\u0002\u0014\u0007\u0014\u0002\u0015\u0007"+
		"\u0015\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007"+
		"\u0018\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007"+
		"\u001b\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007"+
		"\u001e\u0002\u001f\u0007\u001f\u0002 \u0007 \u0002!\u0007!\u0002\"\u0007"+
		"\"\u0002#\u0007#\u0002$\u0007$\u0002%\u0007%\u0002&\u0007&\u0002\'\u0007"+
		"\'\u0002(\u0007(\u0002)\u0007)\u0002*\u0007*\u0002+\u0007+\u0002,\u0007"+
		",\u0002-\u0007-\u0002.\u0007.\u0002/\u0007/\u00020\u00070\u00021\u0007"+
		"1\u00022\u00072\u00023\u00073\u00024\u00074\u00025\u00075\u00026\u0007"+
		"6\u00027\u00077\u00028\u00078\u00029\u00079\u0002:\u0007:\u0002;\u0007"+
		";\u0002<\u0007<\u0002=\u0007=\u0002>\u0007>\u0002?\u0007?\u0002@\u0007"+
		"@\u0002A\u0007A\u0002B\u0007B\u0002C\u0007C\u0002D\u0007D\u0002E\u0007"+
		"E\u0002F\u0007F\u0002G\u0007G\u0002H\u0007H\u0002I\u0007I\u0002J\u0007"+
		"J\u0002K\u0007K\u0002L\u0007L\u0002M\u0007M\u0002N\u0007N\u0002O\u0007"+
		"O\u0002P\u0007P\u0002Q\u0007Q\u0002R\u0007R\u0002S\u0007S\u0002T\u0007"+
		"T\u0002U\u0007U\u0002V\u0007V\u0002W\u0007W\u0002X\u0007X\u0002Y\u0007"+
		"Y\u0002Z\u0007Z\u0002[\u0007[\u0002\\\u0007\\\u0002]\u0007]\u0002^\u0007"+
		"^\u0002_\u0007_\u0002`\u0007`\u0002a\u0007a\u0002b\u0007b\u0002c\u0007"+
		"c\u0002d\u0007d\u0002e\u0007e\u0002f\u0007f\u0002g\u0007g\u0002h\u0007"+
		"h\u0002i\u0007i\u0002j\u0007j\u0002k\u0007k\u0002l\u0007l\u0002m\u0007"+
		"m\u0002n\u0007n\u0002o\u0007o\u0002p\u0007p\u0002q\u0007q\u0002r\u0007"+
		"r\u0002s\u0007s\u0002t\u0007t\u0002u\u0007u\u0002v\u0007v\u0002w\u0007"+
		"w\u0002x\u0007x\u0002y\u0007y\u0002z\u0007z\u0002{\u0007{\u0002|\u0007"+
		"|\u0002}\u0007}\u0002~\u0007~\u0002\u007f\u0007\u007f\u0002\u0080\u0007"+
		"\u0080\u0002\u0081\u0007\u0081\u0002\u0082\u0007\u0082\u0002\u0083\u0007"+
		"\u0083\u0002\u0084\u0007\u0084\u0002\u0085\u0007\u0085\u0002\u0086\u0007"+
		"\u0086\u0002\u0087\u0007\u0087\u0002\u0088\u0007\u0088\u0002\u0089\u0007"+
		"\u0089\u0002\u008a\u0007\u008a\u0002\u008b\u0007\u008b\u0002\u008c\u0007"+
		"\u008c\u0002\u008d\u0007\u008d\u0002\u008e\u0007\u008e\u0002\u008f\u0007"+
		"\u008f\u0002\u0090\u0007\u0090\u0002\u0091\u0007\u0091\u0002\u0092\u0007"+
		"\u0092\u0002\u0093\u0007\u0093\u0002\u0094\u0007\u0094\u0002\u0095\u0007"+
		"\u0095\u0002\u0096\u0007\u0096\u0002\u0097\u0007\u0097\u0002\u0098\u0007"+
		"\u0098\u0002\u0099\u0007\u0099\u0002\u009a\u0007\u009a\u0002\u009b\u0007"+
		"\u009b\u0002\u009c\u0007\u009c\u0002\u009d\u0007\u009d\u0002\u009e\u0007"+
		"\u009e\u0002\u009f\u0007\u009f\u0002\u00a0\u0007\u00a0\u0002\u00a1\u0007"+
		"\u00a1\u0002\u00a2\u0007\u00a2\u0002\u00a3\u0007\u00a3\u0002\u00a4\u0007"+
		"\u00a4\u0002\u00a5\u0007\u00a5\u0002\u00a6\u0007\u00a6\u0002\u00a7\u0007"+
		"\u00a7\u0002\u00a8\u0007\u00a8\u0002\u00a9\u0007\u00a9\u0002\u00aa\u0007"+
		"\u00aa\u0002\u00ab\u0007\u00ab\u0002\u00ac\u0007\u00ac\u0002\u00ad\u0007"+
		"\u00ad\u0002\u00ae\u0007\u00ae\u0002\u00af\u0007\u00af\u0002\u00b0\u0007"+
		"\u00b0\u0002\u00b1\u0007\u00b1\u0002\u00b2\u0007\u00b2\u0002\u00b3\u0007"+
		"\u00b3\u0002\u00b4\u0007\u00b4\u0002\u00b5\u0007\u00b5\u0002\u00b6\u0007"+
		"\u00b6\u0002\u00b7\u0007\u00b7\u0002\u00b8\u0007\u00b8\u0002\u00b9\u0007"+
		"\u00b9\u0002\u00ba\u0007\u00ba\u0002\u00bb\u0007\u00bb\u0002\u00bc\u0007"+
		"\u00bc\u0002\u00bd\u0007\u00bd\u0002\u00be\u0007\u00be\u0002\u00bf\u0007"+
		"\u00bf\u0002\u00c0\u0007\u00c0\u0002\u00c1\u0007\u00c1\u0002\u00c2\u0007"+
		"\u00c2\u0002\u00c3\u0007\u00c3\u0002\u00c4\u0007\u00c4\u0002\u00c5\u0007"+
		"\u00c5\u0002\u00c6\u0007\u00c6\u0002\u00c7\u0007\u00c7\u0002\u00c8\u0007"+
		"\u00c8\u0002\u00c9\u0007\u00c9\u0002\u00ca\u0007\u00ca\u0002\u00cb\u0007"+
		"\u00cb\u0002\u00cc\u0007\u00cc\u0002\u00cd\u0007\u00cd\u0002\u00ce\u0007"+
		"\u00ce\u0002\u00cf\u0007\u00cf\u0002\u00d0\u0007\u00d0\u0002\u00d1\u0007"+
		"\u00d1\u0002\u00d2\u0007\u00d2\u0002\u00d3\u0007\u00d3\u0002\u00d4\u0007"+
		"\u00d4\u0002\u00d5\u0007\u00d5\u0002\u00d6\u0007\u00d6\u0002\u00d7\u0007"+
		"\u00d7\u0002\u00d8\u0007\u00d8\u0002\u00d9\u0007\u00d9\u0002\u00da\u0007"+
		"\u00da\u0002\u00db\u0007\u00db\u0002\u00dc\u0007\u00dc\u0002\u00dd\u0007"+
		"\u00dd\u0002\u00de\u0007\u00de\u0002\u00df\u0007\u00df\u0002\u00e0\u0007"+
		"\u00e0\u0002\u00e1\u0007\u00e1\u0002\u00e2\u0007\u00e2\u0002\u00e3\u0007"+
		"\u00e3\u0002\u00e4\u0007\u00e4\u0002\u00e5\u0007\u00e5\u0002\u00e6\u0007"+
		"\u00e6\u0002\u00e7\u0007\u00e7\u0002\u00e8\u0007\u00e8\u0002\u00e9\u0007"+
		"\u00e9\u0002\u00ea\u0007\u00ea\u0002\u00eb\u0007\u00eb\u0002\u00ec\u0007"+
		"\u00ec\u0002\u00ed\u0007\u00ed\u0002\u00ee\u0007\u00ee\u0002\u00ef\u0007"+
		"\u00ef\u0002\u00f0\u0007\u00f0\u0002\u00f1\u0007\u00f1\u0002\u00f2\u0007"+
		"\u00f2\u0002\u00f3\u0007\u00f3\u0002\u00f4\u0007\u00f4\u0002\u00f5\u0007"+
		"\u00f5\u0002\u00f6\u0007\u00f6\u0002\u00f7\u0007\u00f7\u0002\u00f8\u0007"+
		"\u00f8\u0002\u00f9\u0007\u00f9\u0002\u00fa\u0007\u00fa\u0002\u00fb\u0007"+
		"\u00fb\u0002\u00fc\u0007\u00fc\u0002\u00fd\u0007\u00fd\u0002\u00fe\u0007"+
		"\u00fe\u0002\u00ff\u0007\u00ff\u0002\u0100\u0007\u0100\u0002\u0101\u0007"+
		"\u0101\u0002\u0102\u0007\u0102\u0002\u0103\u0007\u0103\u0002\u0104\u0007"+
		"\u0104\u0002\u0105\u0007\u0105\u0002\u0106\u0007\u0106\u0002\u0107\u0007"+
		"\u0107\u0002\u0108\u0007\u0108\u0002\u0109\u0007\u0109\u0002\u010a\u0007"+
		"\u010a\u0002\u010b\u0007\u010b\u0002\u010c\u0007\u010c\u0002\u010d\u0007"+
		"\u010d\u0002\u010e\u0007\u010e\u0002\u010f\u0007\u010f\u0002\u0110\u0007"+
		"\u0110\u0002\u0111\u0007\u0111\u0002\u0112\u0007\u0112\u0002\u0113\u0007"+
		"\u0113\u0002\u0114\u0007\u0114\u0002\u0115\u0007\u0115\u0002\u0116\u0007"+
		"\u0116\u0002\u0117\u0007\u0117\u0002\u0118\u0007\u0118\u0002\u0119\u0007"+
		"\u0119\u0002\u011a\u0007\u011a\u0002\u011b\u0007\u011b\u0002\u011c\u0007"+
		"\u011c\u0002\u011d\u0007\u011d\u0002\u011e\u0007\u011e\u0002\u011f\u0007"+
		"\u011f\u0002\u0120\u0007\u0120\u0002\u0121\u0007\u0121\u0002\u0122\u0007"+
		"\u0122\u0002\u0123\u0007\u0123\u0002\u0124\u0007\u0124\u0002\u0125\u0007"+
		"\u0125\u0002\u0126\u0007\u0126\u0002\u0127\u0007\u0127\u0002\u0128\u0007"+
		"\u0128\u0002\u0129\u0007\u0129\u0002\u012a\u0007\u012a\u0002\u012b\u0007"+
		"\u012b\u0002\u012c\u0007\u012c\u0002\u012d\u0007\u012d\u0002\u012e\u0007"+
		"\u012e\u0002\u012f\u0007\u012f\u0002\u0130\u0007\u0130\u0002\u0131\u0007"+
		"\u0131\u0002\u0132\u0007\u0132\u0002\u0133\u0007\u0133\u0002\u0134\u0007"+
		"\u0134\u0002\u0135\u0007\u0135\u0002\u0136\u0007\u0136\u0002\u0137\u0007"+
		"\u0137\u0002\u0138\u0007\u0138\u0002\u0139\u0007\u0139\u0002\u013a\u0007"+
		"\u013a\u0002\u013b\u0007\u013b\u0002\u013c\u0007\u013c\u0002\u013d\u0007"+
		"\u013d\u0002\u013e\u0007\u013e\u0002\u013f\u0007\u013f\u0002\u0140\u0007"+
		"\u0140\u0002\u0141\u0007\u0141\u0002\u0142\u0007\u0142\u0002\u0143\u0007"+
		"\u0143\u0002\u0144\u0007\u0144\u0002\u0145\u0007\u0145\u0002\u0146\u0007"+
		"\u0146\u0002\u0147\u0007\u0147\u0002\u0148\u0007\u0148\u0002\u0149\u0007"+
		"\u0149\u0002\u014a\u0007\u014a\u0002\u014b\u0007\u014b\u0002\u014c\u0007"+
		"\u014c\u0002\u014d\u0007\u014d\u0002\u014e\u0007\u014e\u0002\u014f\u0007"+
		"\u014f\u0002\u0150\u0007\u0150\u0002\u0151\u0007\u0151\u0002\u0152\u0007"+
		"\u0152\u0002\u0153\u0007\u0153\u0002\u0154\u0007\u0154\u0002\u0155\u0007"+
		"\u0155\u0002\u0156\u0007\u0156\u0002\u0157\u0007\u0157\u0002\u0158\u0007"+
		"\u0158\u0002\u0159\u0007\u0159\u0002\u015a\u0007\u015a\u0002\u015b\u0007"+
		"\u015b\u0002\u015c\u0007\u015c\u0002\u015d\u0007\u015d\u0002\u015e\u0007"+
		"\u015e\u0002\u015f\u0007\u015f\u0002\u0160\u0007\u0160\u0002\u0161\u0007"+
		"\u0161\u0002\u0162\u0007\u0162\u0002\u0163\u0007\u0163\u0002\u0164\u0007"+
		"\u0164\u0002\u0165\u0007\u0165\u0002\u0166\u0007\u0166\u0002\u0167\u0007"+
		"\u0167\u0002\u0168\u0007\u0168\u0002\u0169\u0007\u0169\u0002\u016a\u0007"+
		"\u016a\u0002\u016b\u0007\u016b\u0002\u016c\u0007\u016c\u0002\u016d\u0007"+
		"\u016d\u0002\u016e\u0007\u016e\u0002\u016f\u0007\u016f\u0002\u0170\u0007"+
		"\u0170\u0002\u0171\u0007\u0171\u0002\u0172\u0007\u0172\u0002\u0173\u0007"+
		"\u0173\u0002\u0174\u0007\u0174\u0002\u0175\u0007\u0175\u0002\u0176\u0007"+
		"\u0176\u0002\u0177\u0007\u0177\u0002\u0178\u0007\u0178\u0002\u0179\u0007"+
		"\u0179\u0002\u017a\u0007\u017a\u0002\u017b\u0007\u017b\u0002\u017c\u0007"+
		"\u017c\u0002\u017d\u0007\u017d\u0002\u017e\u0007\u017e\u0002\u017f\u0007"+
		"\u017f\u0002\u0180\u0007\u0180\u0002\u0181\u0007\u0181\u0002\u0182\u0007"+
		"\u0182\u0002\u0183\u0007\u0183\u0002\u0184\u0007\u0184\u0002\u0185\u0007"+
		"\u0185\u0002\u0186\u0007\u0186\u0002\u0187\u0007\u0187\u0002\u0188\u0007"+
		"\u0188\u0002\u0189\u0007\u0189\u0002\u018a\u0007\u018a\u0002\u018b\u0007"+
		"\u018b\u0002\u018c\u0007\u018c\u0002\u018d\u0007\u018d\u0002\u018e\u0007"+
		"\u018e\u0002\u018f\u0007\u018f\u0002\u0190\u0007\u0190\u0002\u0191\u0007"+
		"\u0191\u0002\u0192\u0007\u0192\u0002\u0193\u0007\u0193\u0002\u0194\u0007"+
		"\u0194\u0002\u0195\u0007\u0195\u0002\u0196\u0007\u0196\u0002\u0197\u0007"+
		"\u0197\u0002\u0198\u0007\u0198\u0002\u0199\u0007\u0199\u0002\u019a\u0007"+
		"\u019a\u0002\u019b\u0007\u019b\u0002\u019c\u0007\u019c\u0002\u019d\u0007"+
		"\u019d\u0002\u019e\u0007\u019e\u0002\u019f\u0007\u019f\u0002\u01a0\u0007"+
		"\u01a0\u0002\u01a1\u0007\u01a1\u0002\u01a2\u0007\u01a2\u0002\u01a3\u0007"+
		"\u01a3\u0002\u01a4\u0007\u01a4\u0002\u01a5\u0007\u01a5\u0002\u01a6\u0007"+
		"\u01a6\u0002\u01a7\u0007\u01a7\u0002\u01a8\u0007\u01a8\u0002\u01a9\u0007"+
		"\u01a9\u0002\u01aa\u0007\u01aa\u0002\u01ab\u0007\u01ab\u0002\u01ac\u0007"+
		"\u01ac\u0002\u01ad\u0007\u01ad\u0002\u01ae\u0007\u01ae\u0001\u0000\u0004"+
		"\u0000\u0360\b\u0000\u000b\u0000\f\u0000\u0361\u0001\u0001\u0005\u0001"+
		"\u0365\b\u0001\n\u0001\f\u0001\u0368\t\u0001\u0001\u0001\u0001\u0001\u0001"+
		"\u0002\u0005\u0002\u036d\b\u0002\n\u0002\f\u0002\u0370\t\u0002\u0001\u0002"+
		"\u0001\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0001\u0003"+
		"\u0001\u0003\u0003\u0003\u037a\b\u0003\u0001\u0004\u0001\u0004\u0001\u0004"+
		"\u0001\u0004\u0001\u0004\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005"+
		"\u0001\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006"+
		"\u038a\b\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u038e\b\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u0393\b\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0003\u0006\u0398\b\u0006\u0001\u0006\u0001\u0006\u0001"+
		"\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0006\u0003\u0006\u03a1"+
		"\b\u0006\u0003\u0006\u03a3\b\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0003\u0006\u03a9\b\u0006\u0001\u0006\u0001\u0006\u0001\u0006"+
		"\u0001\u0006\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03b2\b\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03b8\b\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007\u03bd\b\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0003\u0007\u03c2\b\u0007\u0001\u0007\u0001\u0007"+
		"\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0003\u0007"+
		"\u03cb\b\u0007\u0003\u0007\u03cd\b\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0003\u0007\u03d3\b\u0007\u0001\u0007\u0001\u0007\u0001"+
		"\u0007\u0001\u0007\u0001\b\u0001\b\u0001\t\u0001\t\u0003\t\u03dd\b\t\u0001"+
		"\n\u0001\n\u0001\n\u0001\u000b\u0001\u000b\u0001\u000b\u0003\u000b\u03e5"+
		"\b\u000b\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
		"\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f\u03f5\b\f\u0001"+
		"\f\u0001\f\u0003\f\u03f9\b\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
		"\f\u0001\f\u0001\f\u0003\f\u0403\b\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001"+
		"\f\u0003\f\u040a\b\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f\u0411"+
		"\b\f\u0001\f\u0001\f\u0001\f\u0001\f\u0001\f\u0003\f\u0418\b\f\u0001\f"+
		"\u0001\f\u0001\f\u0003\f\u041d\b\f\u0001\r\u0001\r\u0001\u000e\u0001\u000e"+
		"\u0001\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0005\u000f"+
		"\u0428\b\u000f\n\u000f\f\u000f\u042b\t\u000f\u0001\u000f\u0001\u000f\u0001"+
		"\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0012\u0001"+
		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u043a"+
		"\b\u0012\u0001\u0012\u0003\u0012\u043d\b\u0012\u0001\u0013\u0003\u0013"+
		"\u0440\b\u0013\u0001\u0013\u0001\u0013\u0001\u0013\u0003\u0013\u0445\b"+
		"\u0013\u0001\u0014\u0001\u0014\u0003\u0014\u0449\b\u0014\u0001\u0014\u0001"+
		"\u0014\u0005\u0014\u044d\b\u0014\n\u0014\f\u0014\u0450\t\u0014\u0001\u0014"+
		"\u0001\u0014\u0001\u0015\u0001\u0015\u0001\u0016\u0001\u0016\u0001\u0017"+
		"\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0005\u0019"+
		"\u045e\b\u0019\n\u0019\f\u0019\u0461\t\u0019\u0001\u001a\u0001\u001a\u0001"+
		"\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001\u001b\u0003"+
		"\u001b\u046b\b\u001b\u0001\u001c\u0001\u001c\u0003\u001c\u046f\b\u001c"+
		"\u0001\u001c\u0001\u001c\u0003\u001c\u0473\b\u001c\u0001\u001c\u0001\u001c"+
		"\u0003\u001c\u0477\b\u001c\u0001\u001c\u0003\u001c\u047a\b\u001c\u0001"+
		"\u001d\u0001\u001d\u0001\u001d\u0003\u001d\u047f\b\u001d\u0001\u001e\u0001"+
		"\u001e\u0001\u001e\u0003\u001e\u0484\b\u001e\u0001\u001f\u0001\u001f\u0001"+
		"\u001f\u0001\u001f\u0001\u001f\u0001 \u0001 \u0001 \u0001 \u0001 \u0005"+
		" \u0490\b \n \f \u0493\t \u0001 \u0001 \u0001!\u0001!\u0001!\u0001\"\u0001"+
		"\"\u0001\"\u0003\"\u049d\b\"\u0001\"\u0001\"\u0001#\u0001#\u0001#\u0005"+
		"#\u04a4\b#\n#\f#\u04a7\t#\u0001$\u0001$\u0001%\u0001%\u0001&\u0001&\u0001"+
		"&\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0001\'\u0003"+
		"\'\u04b8\b\'\u0001(\u0001(\u0001(\u0003(\u04bd\b(\u0001)\u0004)\u04c0"+
		"\b)\u000b)\f)\u04c1\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001*\u0001"+
		"+\u0001+\u0001+\u0005+\u04ce\b+\n+\f+\u04d1\t+\u0001,\u0001,\u0001,\u0001"+
		",\u0003,\u04d7\b,\u0001-\u0004-\u04da\b-\u000b-\f-\u04db\u0001.\u0004"+
		".\u04df\b.\u000b.\f.\u04e0\u0001/\u0001/\u0001/\u0001/\u0001/\u0001/\u0001"+
		"/\u0001/\u0003/\u04eb\b/\u00010\u00010\u00010\u00010\u00010\u00010\u0001"+
		"0\u00010\u00010\u00030\u04f6\b0\u00011\u00011\u00011\u00011\u00031\u04fc"+
		"\b1\u00011\u00031\u04ff\b1\u00011\u00031\u0502\b1\u00011\u00031\u0505"+
		"\b1\u00012\u00012\u00012\u00032\u050a\b2\u00013\u00013\u00013\u00033\u050f"+
		"\b3\u00013\u00013\u00014\u00014\u00034\u0515\b4\u00014\u00034\u0518\b"+
		"4\u00014\u00014\u00015\u00015\u00035\u051e\b5\u00016\u00016\u00017\u0001"+
		"7\u00017\u00017\u00017\u00017\u00017\u00018\u00018\u00019\u00019\u0001"+
		"9\u00019\u00019\u00059\u0530\b9\n9\f9\u0533\t9\u00019\u00039\u0536\b9"+
		"\u00019\u00039\u0539\b9\u00019\u00039\u053c\b9\u00019\u00039\u053f\b9"+
		"\u00019\u00039\u0542\b9\u00019\u00019\u00019\u00019\u0001:\u0001:\u0001"+
		":\u0001:\u0001:\u0005:\u054d\b:\n:\f:\u0550\t:\u0001:\u0003:\u0553\b:"+
		"\u0001:\u0003:\u0556\b:\u0001:\u0003:\u0559\b:\u0001;\u0001;\u0001;\u0005"+
		";\u055e\b;\n;\f;\u0561\t;\u0001;\u0003;\u0564\b;\u0001;\u0003;\u0567\b"+
		";\u0001;\u0003;\u056a\b;\u0001<\u0001<\u0003<\u056e\b<\u0001<\u0003<\u0571"+
		"\b<\u0001<\u0003<\u0574\b<\u0001<\u0003<\u0577\b<\u0001<\u0001<\u0001"+
		"<\u0001=\u0001=\u0001=\u0001=\u0001=\u0003=\u0581\b=\u0001=\u0001=\u0001"+
		"=\u0001=\u0001=\u0003=\u0588\b=\u0003=\u058a\b=\u0001>\u0001>\u0001>\u0001"+
		">\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0001>\u0003"+
		">\u0599\b>\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001?\u0001"+
		"?\u0001?\u0003?\u05a5\b?\u0001@\u0001@\u0001@\u0001@\u0001@\u0001@\u0003"+
		"@\u05ad\b@\u0001@\u0003@\u05b0\b@\u0001@\u0001@\u0001A\u0001A\u0001A\u0003"+
		"A\u05b7\bA\u0001A\u0001A\u0001B\u0001B\u0001B\u0001B\u0001B\u0001B\u0001"+
		"C\u0001C\u0001C\u0005C\u05c4\bC\nC\fC\u05c7\tC\u0001D\u0001D\u0001D\u0001"+
		"D\u0001D\u0001D\u0001D\u0005D\u05d0\bD\nD\fD\u05d3\tD\u0001D\u0001D\u0001"+
		"E\u0001E\u0001E\u0005E\u05da\bE\nE\fE\u05dd\tE\u0001F\u0001F\u0001F\u0003"+
		"F\u05e2\bF\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0001G\u0003"+
		"G\u05ec\bG\u0001H\u0003H\u05ef\bH\u0001H\u0003H\u05f2\bH\u0001H\u0001"+
		"H\u0001I\u0001I\u0001J\u0001J\u0001K\u0001K\u0001L\u0001L\u0001L\u0001"+
		"L\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0001M\u0005M\u0607\bM\nM"+
		"\fM\u060a\tM\u0001M\u0001M\u0003M\u060e\bM\u0001N\u0001N\u0003N\u0612"+
		"\bN\u0001O\u0001O\u0001O\u0001O\u0001O\u0001O\u0003O\u061a\bO\u0001P\u0001"+
		"P\u0001P\u0001P\u0001P\u0001P\u0003P\u0622\bP\u0001P\u0001P\u0001P\u0003"+
		"P\u0627\bP\u0001P\u0003P\u062a\bP\u0003P\u062c\bP\u0001Q\u0003Q\u062f"+
		"\bQ\u0001Q\u0001Q\u0001Q\u0001Q\u0001R\u0001R\u0001R\u0003R\u0638\bR\u0001"+
		"R\u0003R\u063b\bR\u0001S\u0003S\u063e\bS\u0001S\u0001S\u0003S\u0642\b"+
		"S\u0001S\u0003S\u0645\bS\u0001S\u0001S\u0001S\u0001S\u0005S\u064b\bS\n"+
		"S\fS\u064e\tS\u0001S\u0001S\u0003S\u0652\bS\u0001S\u0005S\u0655\bS\nS"+
		"\fS\u0658\tS\u0001T\u0001T\u0001T\u0001T\u0003T\u065e\bT\u0001U\u0001"+
		"U\u0001U\u0001V\u0001V\u0001V\u0001V\u0001V\u0003V\u0668\bV\u0001W\u0001"+
		"W\u0001W\u0001W\u0001W\u0001W\u0001W\u0001W\u0001X\u0001X\u0001X\u0001"+
		"X\u0001X\u0001X\u0005X\u0678\bX\nX\fX\u067b\tX\u0001X\u0001X\u0001Y\u0001"+
		"Y\u0003Y\u0681\bY\u0001Z\u0001Z\u0001Z\u0001Z\u0001[\u0001[\u0001[\u0001"+
		"[\u0003[\u068b\b[\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0001\\\u0005"+
		"\\\u0693\b\\\n\\\f\\\u0696\t\\\u0001\\\u0001\\\u0001\\\u0001\\\u0003\\"+
		"\u069c\b\\\u0001\\\u0005\\\u069f\b\\\n\\\f\\\u06a2\t\\\u0001\\\u0001\\"+
		"\u0001\\\u0003\\\u06a7\b\\\u0001]\u0001]\u0001]\u0001]\u0001]\u0001]\u0005"+
		"]\u06af\b]\n]\f]\u06b2\t]\u0001]\u0001]\u0003]\u06b6\b]\u0001]\u0001]"+
		"\u0001]\u0001]\u0001]\u0003]\u06bd\b]\u0001]\u0005]\u06c0\b]\n]\f]\u06c3"+
		"\t]\u0001]\u0001]\u0001]\u0003]\u06c8\b]\u0001^\u0003^\u06cb\b^\u0001"+
		"^\u0003^\u06ce\b^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001"+
		"^\u0001^\u0001^\u0001^\u0001^\u0001^\u0005^\u06dd\b^\n^\f^\u06e0\t^\u0001"+
		"^\u0001^\u0003^\u06e4\b^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001^\u0001"+
		"^\u0003^\u06ed\b^\u0001^\u0005^\u06f0\b^\n^\f^\u06f3\t^\u0001^\u0001^"+
		"\u0001^\u0003^\u06f8\b^\u0001_\u0003_\u06fb\b_\u0001_\u0001_\u0001`\u0001"+
		"`\u0001`\u0003`\u0702\b`\u0001`\u0003`\u0705\b`\u0001a\u0001a\u0001a\u0001"+
		"a\u0001b\u0003b\u070c\bb\u0001b\u0004b\u070f\bb\u000bb\fb\u0710\u0001"+
		"b\u0001b\u0003b\u0715\bb\u0001c\u0001c\u0001c\u0003c\u071a\bc\u0001d\u0001"+
		"d\u0001d\u0003d\u071f\bd\u0001e\u0001e\u0001e\u0001e\u0001e\u0001e\u0005"+
		"e\u0727\be\ne\fe\u072a\te\u0001e\u0001e\u0001e\u0003e\u072f\be\u0001f"+
		"\u0001f\u0001f\u0001f\u0001f\u0001f\u0005f\u0737\bf\nf\ff\u073a\tf\u0001"+
		"f\u0001f\u0003f\u073e\bf\u0001f\u0001f\u0001f\u0001f\u0001f\u0003f\u0745"+
		"\bf\u0001f\u0001f\u0001f\u0001f\u0003f\u074b\bf\u0001f\u0001f\u0003f\u074f"+
		"\bf\u0001g\u0003g\u0752\bg\u0001g\u0003g\u0755\bg\u0001g\u0001g\u0001"+
		"g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001g\u0001"+
		"g\u0005g\u0764\bg\ng\fg\u0767\tg\u0001g\u0001g\u0003g\u076b\bg\u0001g"+
		"\u0001g\u0001g\u0001g\u0001g\u0001g\u0003g\u0773\bg\u0001h\u0001h\u0001"+
		"h\u0001h\u0001i\u0001i\u0001i\u0001i\u0001i\u0001i\u0005i\u077f\bi\ni"+
		"\fi\u0782\ti\u0001i\u0001i\u0001j\u0001j\u0003j\u0788\bj\u0001k\u0001"+
		"k\u0001k\u0001l\u0001l\u0001l\u0001l\u0001l\u0005l\u0792\bl\nl\fl\u0795"+
		"\tl\u0001l\u0001l\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001"+
		"m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0001m\u0003m\u07a9"+
		"\bm\u0001n\u0001n\u0001n\u0001n\u0001o\u0001o\u0001o\u0001p\u0001p\u0001"+
		"p\u0001p\u0001q\u0001q\u0001q\u0003q\u07b9\bq\u0001r\u0001r\u0001r\u0001"+
		"r\u0001s\u0001s\u0001s\u0003s\u07c2\bs\u0001s\u0001s\u0001s\u0003s\u07c7"+
		"\bs\u0001s\u0001s\u0003s\u07cb\bs\u0001s\u0003s\u07ce\bs\u0001t\u0001"+
		"t\u0001t\u0001t\u0001t\u0001t\u0005t\u07d6\bt\nt\ft\u07d9\tt\u0001t\u0001"+
		"t\u0001u\u0001u\u0001u\u0001u\u0001u\u0005u\u07e2\bu\nu\fu\u07e5\tu\u0001"+
		"u\u0001u\u0001u\u0003u\u07ea\bu\u0001u\u0001u\u0001v\u0001v\u0001v\u0001"+
		"w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0001w\u0003w\u07f9\bw\u0001"+
		"x\u0001x\u0003x\u07fd\bx\u0001x\u0001x\u0001x\u0003x\u0802\bx\u0001x\u0003"+
		"x\u0805\bx\u0001x\u0001x\u0001y\u0001y\u0001y\u0001y\u0001y\u0001y\u0001"+
		"y\u0001y\u0001y\u0003y\u0812\by\u0001y\u0001y\u0003y\u0816\by\u0001y\u0001"+
		"y\u0001z\u0001z\u0001z\u0001z\u0001z\u0001z\u0005z\u0820\bz\nz\fz\u0823"+
		"\tz\u0001z\u0001z\u0003z\u0827\bz\u0001z\u0001z\u0003z\u082b\bz\u0001"+
		"z\u0001z\u0003z\u082f\bz\u0001z\u0001z\u0001{\u0001{\u0003{\u0835\b{\u0001"+
		"{\u0003{\u0838\b{\u0001{\u0003{\u083b\b{\u0001|\u0001|\u0001|\u0001|\u0001"+
		"}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001"+
		"}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001}\u0001"+
		"}\u0003}\u0856\b}\u0001}\u0001}\u0004}\u085a\b}\u000b}\f}\u085b\u0001"+
		"}\u0001}\u0003}\u0860\b}\u0001}\u0001}\u0001~\u0001~\u0003~\u0866\b~\u0001"+
		"\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u007f\u0005\u007f\u0870\b\u007f\n\u007f\f\u007f\u0873\t\u007f"+
		"\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f\u0001\u007f"+
		"\u0003\u007f\u087b\b\u007f\u0003\u007f\u087d\b\u007f\u0001\u007f\u0001"+
		"\u007f\u0001\u0080\u0001\u0080\u0003\u0080\u0883\b\u0080\u0001\u0080\u0001"+
		"\u0080\u0003\u0080\u0887\b\u0080\u0001\u0080\u0003\u0080\u088a\b\u0080"+
		"\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0081\u0001\u0082"+
		"\u0001\u0082\u0003\u0082\u0893\b\u0082\u0001\u0082\u0001\u0082\u0001\u0083"+
		"\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083\u0001\u0083"+
		"\u0003\u0083\u089e\b\u0083\u0001\u0083\u0001\u0083\u0003\u0083\u08a2\b"+
		"\u0083\u0001\u0083\u0003\u0083\u08a5\b\u0083\u0001\u0084\u0001\u0084\u0003"+
		"\u0084\u08a9\b\u0084\u0001\u0084\u0001\u0084\u0001\u0084\u0001\u0085\u0001"+
		"\u0085\u0001\u0085\u0003\u0085\u08b1\b\u0085\u0001\u0085\u0001\u0085\u0001"+
		"\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0001\u0085\u0003\u0085\u08ba"+
		"\b\u0085\u0001\u0086\u0001\u0086\u0001\u0086\u0001\u0087\u0001\u0087\u0001"+
		"\u0087\u0001\u0087\u0004\u0087\u08c3\b\u0087\u000b\u0087\f\u0087\u08c4"+
		"\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088\u0001\u0088"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089"+
		"\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0001\u0089\u0003\u0089"+
		"\u08e4\b\u0089\u0001\u008a\u0001\u008a\u0003\u008a\u08e8\b\u008a\u0001"+
		"\u008a\u0001\u008a\u0001\u008a\u0001\u008b\u0001\u008b\u0003\u008b\u08ef"+
		"\b\u008b\u0001\u008b\u0001\u008b\u0003\u008b\u08f3\b\u008b\u0001\u008c"+
		"\u0001\u008c\u0003\u008c\u08f7\b\u008c\u0001\u008c\u0001\u008c\u0003\u008c"+
		"\u08fb\b\u008c\u0001\u008d\u0001\u008d\u0001\u008d\u0001\u008e\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008e\u0005\u008e\u0905\b\u008e\n\u008e"+
		"\f\u008e\u0908\t\u008e\u0001\u008e\u0003\u008e\u090b\b\u008e\u0001\u008e"+
		"\u0001\u008e\u0001\u008e\u0001\u008f\u0001\u008f\u0001\u008f\u0001\u008f"+
		"\u0001\u008f\u0001\u0090\u0001\u0090\u0001\u0090\u0001\u0091\u0003\u0091"+
		"\u0919\b\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0003\u0091"+
		"\u091f\b\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091\u0001\u0091"+
		"\u0003\u0091\u0926\b\u0091\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092"+
		"\u092b\b\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092\u0001\u0092"+
		"\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u0935\b\u0092\u0001\u0092"+
		"\u0001\u0092\u0001\u0092\u0001\u0092\u0003\u0092\u093b\b\u0092\u0003\u0092"+
		"\u093d\b\u0092\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093\u0001\u0093"+
		"\u0001\u0093\u0001\u0093\u0003\u0093\u0946\b\u0093\u0001\u0094\u0001\u0094"+
		"\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0001\u0094"+
		"\u0003\u0094\u0950\b\u0094\u0001\u0094\u0001\u0094\u0001\u0094\u0003\u0094"+
		"\u0955\b\u0094\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095\u0001\u0095"+
		"\u0001\u0096\u0001\u0096\u0001\u0097\u0001\u0097\u0001\u0098\u0001\u0098"+
		"\u0001\u0099\u0001\u0099\u0003\u0099\u0964\b\u0099\u0001\u009a\u0001\u009a"+
		"\u0003\u009a\u0968\b\u009a\u0001\u009a\u0001\u009a\u0003\u009a\u096c\b"+
		"\u009a\u0001\u009b\u0003\u009b\u096f\b\u009b\u0001\u009b\u0001\u009b\u0003"+
		"\u009b\u0973\b\u009b\u0001\u009c\u0001\u009c\u0001\u009c\u0003\u009c\u0978"+
		"\b\u009c\u0001\u009c\u0001\u009c\u0003\u009c\u097c\b\u009c\u0001\u009d"+
		"\u0001\u009d\u0004\u009d\u0980\b\u009d\u000b\u009d\f\u009d\u0981\u0001"+
		"\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0005\u009e\u0988\b\u009e\n"+
		"\u009e\f\u009e\u098b\t\u009e\u0001\u009e\u0001\u009e\u0001\u009e\u0001"+
		"\u009f\u0003\u009f\u0991\b\u009f\u0001\u009f\u0004\u009f\u0994\b\u009f"+
		"\u000b\u009f\f\u009f\u0995\u0003\u009f\u0998\b\u009f\u0001\u009f\u0001"+
		"\u009f\u0001\u00a0\u0003\u00a0\u099d\b\u00a0\u0001\u00a0\u0004\u00a0\u09a0"+
		"\b\u00a0\u000b\u00a0\f\u00a0\u09a1\u0001\u00a0\u0001\u00a0\u0001\u00a1"+
		"\u0001\u00a1\u0001\u00a1\u0001\u00a1\u0003\u00a1\u09aa\b\u00a1\u0001\u00a2"+
		"\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0001\u00a2\u0003\u00a2\u09b1\b\u00a2"+
		"\u0001\u00a2\u0001\u00a2\u0003\u00a2\u09b5\b\u00a2\u0001\u00a2\u0003\u00a2"+
		"\u09b8\b\u00a2\u0001\u00a3\u0001\u00a3\u0001\u00a3\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4\u0001\u00a4"+
		"\u0001\u00a4\u0003\u00a4\u09c6\b\u00a4\u0001\u00a5\u0001\u00a5\u0001\u00a5"+
		"\u0001\u00a5\u0003\u00a5\u09cc\b\u00a5\u0001\u00a6\u0001\u00a6\u0001\u00a6"+
		"\u0001\u00a7\u0001\u00a7\u0001\u00a7\u0003\u00a7\u09d4\b\u00a7\u0001\u00a8"+
		"\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0005\u00a8"+
		"\u09dc\b\u00a8\n\u00a8\f\u00a8\u09df\t\u00a8\u0001\u00a8\u0001\u00a8\u0001"+
		"\u00a8\u0001\u00a8\u0001\u00a8\u0001\u00a8\u0005\u00a8\u09e7\b\u00a8\n"+
		"\u00a8\f\u00a8\u09ea\t\u00a8\u0003\u00a8\u09ec\b\u00a8\u0001\u00a9\u0001"+
		"\u00a9\u0001\u00a9\u0001\u00a9\u0001\u00a9\u0003\u00a9\u09f3\b\u00a9\u0001"+
		"\u00a9\u0003\u00a9\u09f6\b\u00a9\u0001\u00aa\u0001\u00aa\u0001\u00aa\u0001"+
		"\u00aa\u0001\u00aa\u0003\u00aa\u09fd\b\u00aa\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0003\u00ab\u0a08\b\u00ab\u0001\u00ab\u0001\u00ab\u0001\u00ab\u0001"+
		"\u00ab\u0003\u00ab\u0a0e\b\u00ab\u0001\u00ab\u0001\u00ab\u0003\u00ab\u0a12"+
		"\b\u00ab\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ac\u0001"+
		"\u00ac\u0005\u00ac\u0a1a\b\u00ac\n\u00ac\f\u00ac\u0a1d\t\u00ac\u0003\u00ac"+
		"\u0a1f\b\u00ac\u0001\u00ac\u0001\u00ac\u0001\u00ad\u0001\u00ad\u0003\u00ad"+
		"\u0a25\b\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad"+
		"\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0001\u00ad\u0003\u00ad\u0a30\b\u00ad"+
		"\u0003\u00ad\u0a32\b\u00ad\u0003\u00ad\u0a34\b\u00ad\u0001\u00ad\u0003"+
		"\u00ad\u0a37\b\u00ad\u0001\u00ae\u0001\u00ae\u0003\u00ae\u0a3b\b\u00ae"+
		"\u0001\u00ae\u0003\u00ae\u0a3e\b\u00ae\u0001\u00af\u0001\u00af\u0003\u00af"+
		"\u0a42\b\u00af\u0001\u00af\u0001\u00af\u0003\u00af\u0a46\b\u00af\u0001"+
		"\u00af\u0001\u00af\u0001\u00af\u0003\u00af\u0a4b\b\u00af\u0001\u00b0\u0001"+
		"\u00b0\u0001\u00b0\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001"+
		"\u00b1\u0001\u00b1\u0003\u00b1\u0a56\b\u00b1\u0001\u00b1\u0001\u00b1\u0003"+
		"\u00b1\u0a5a\b\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001\u00b1\u0001"+
		"\u00b1\u0001\u00b1\u0003\u00b1\u0a62\b\u00b1\u0001\u00b2\u0003\u00b2\u0a65"+
		"\b\u00b2\u0001\u00b2\u0001\u00b2\u0001\u00b2\u0005\u00b2\u0a6a\b\u00b2"+
		"\n\u00b2\f\u00b2\u0a6d\t\u00b2\u0001\u00b3\u0001\u00b3\u0001\u00b3\u0001"+
		"\u00b3\u0005\u00b3\u0a73\b\u00b3\n\u00b3\f\u00b3\u0a76\t\u00b3\u0001\u00b4"+
		"\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0005\u00b4\u0a7d\b\u00b4"+
		"\n\u00b4\f\u00b4\u0a80\t\u00b4\u0001\u00b4\u0001\u00b4\u0003\u00b4\u0a84"+
		"\b\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0001\u00b4\u0003\u00b4\u0a8a"+
		"\b\u00b4\u0001\u00b4\u0001\u00b4\u0003\u00b4\u0a8e\b\u00b4\u0001\u00b4"+
		"\u0003\u00b4\u0a91\b\u00b4\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5"+
		"\u0001\u00b5\u0001\u00b5\u0003\u00b5\u0a99\b\u00b5\u0001\u00b5\u0003\u00b5"+
		"\u0a9c\b\u00b5\u0001\u00b5\u0001\u00b5\u0003\u00b5\u0aa0\b\u00b5\u0001"+
		"\u00b5\u0001\u00b5\u0003\u00b5\u0aa4\b\u00b5\u0001\u00b5\u0001\u00b5\u0001"+
		"\u00b5\u0003\u00b5\u0aa9\b\u00b5\u0001\u00b5\u0003\u00b5\u0aac\b\u00b5"+
		"\u0001\u00b5\u0001\u00b5\u0003\u00b5\u0ab0\b\u00b5\u0001\u00b5\u0001\u00b5"+
		"\u0003\u00b5\u0ab4\b\u00b5\u0005\u00b5\u0ab6\b\u00b5\n\u00b5\f\u00b5\u0ab9"+
		"\t\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b5\u0001\u00b6\u0001\u00b6\u0001"+
		"\u00b6\u0001\u00b6\u0005\u00b6\u0ac2\b\u00b6\n\u00b6\f\u00b6\u0ac5\t\u00b6"+
		"\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6\u0001\u00b6"+
		"\u0001\u00b6\u0001\u00b7\u0001\u00b7\u0005\u00b7\u0ad0\b\u00b7\n\u00b7"+
		"\f\u00b7\u0ad3\t\u00b7\u0001\u00b8\u0001\u00b8\u0003\u00b8\u0ad7\b\u00b8"+
		"\u0001\u00b8\u0001\u00b8\u0003\u00b8\u0adb\b\u00b8\u0001\u00b8\u0001\u00b8"+
		"\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0001\u00b9\u0003\u00b9"+
		"\u0ae4\b\u00b9\u0001\u00ba\u0001\u00ba\u0003\u00ba\u0ae8\b\u00ba\u0001"+
		"\u00ba\u0001\u00ba\u0001\u00ba\u0001\u00ba\u0005\u00ba\u0aee\b\u00ba\n"+
		"\u00ba\f\u00ba\u0af1\t\u00ba\u0003\u00ba\u0af3\b\u00ba\u0001\u00ba\u0003"+
		"\u00ba\u0af6\b\u00ba\u0001\u00ba\u0001\u00ba\u0003\u00ba\u0afa\b\u00ba"+
		"\u0001\u00ba\u0003\u00ba\u0afd\b\u00ba\u0001\u00ba\u0003\u00ba\u0b00\b"+
		"\u00ba\u0001\u00ba\u0003\u00ba\u0b03\b\u00ba\u0001\u00bb\u0001\u00bb\u0003"+
		"\u00bb\u0b07\b\u00bb\u0001\u00bc\u0001\u00bc\u0001\u00bc\u0001\u00bd\u0001"+
		"\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0001\u00bd\u0003\u00bd\u0b12"+
		"\b\u00bd\u0001\u00be\u0001\u00be\u0001\u00be\u0005\u00be\u0b17\b\u00be"+
		"\n\u00be\f\u00be\u0b1a\t\u00be\u0001\u00bf\u0001\u00bf\u0005\u00bf\u0b1e"+
		"\b\u00bf\n\u00bf\f\u00bf\u0b21\t\u00bf\u0001\u00bf\u0001\u00bf\u0003\u00bf"+
		"\u0b25\b\u00bf\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0003\u00c0\u0b2a\b"+
		"\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0005\u00c0\u0b2f\b\u00c0\n"+
		"\u00c0\f\u00c0\u0b32\t\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0003"+
		"\u00c0\u0b37\b\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0001"+
		"\u00c0\u0001\u00c0\u0001\u00c0\u0001\u00c0\u0003\u00c0\u0b41\b\u00c0\u0003"+
		"\u00c0\u0b43\b\u00c0\u0001\u00c0\u0005\u00c0\u0b46\b\u00c0\n\u00c0\f\u00c0"+
		"\u0b49\t\u00c0\u0001\u00c0\u0003\u00c0\u0b4c\b\u00c0\u0001\u00c0\u0003"+
		"\u00c0\u0b4f\b\u00c0\u0001\u00c0\u0001\u00c0\u0003\u00c0\u0b53\b\u00c0"+
		"\u0001\u00c0\u0003\u00c0\u0b56\b\u00c0\u0003\u00c0\u0b58\b\u00c0\u0001"+
		"\u00c1\u0003\u00c1\u0b5b\b\u00c1\u0001\u00c1\u0003\u00c1\u0b5e\b\u00c1"+
		"\u0001\u00c1\u0001\u00c1\u0003\u00c1\u0b62\b\u00c1\u0001\u00c1\u0001\u00c1"+
		"\u0001\u00c1\u0003\u00c1\u0b67\b\u00c1\u0001\u00c1\u0001\u00c1\u0005\u00c1"+
		"\u0b6b\b\u00c1\n\u00c1\f\u00c1\u0b6e\t\u00c1\u0001\u00c2\u0001\u00c2\u0001"+
		"\u00c2\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0001\u00c3\u0005"+
		"\u00c3\u0b78\b\u00c3\n\u00c3\f\u00c3\u0b7b\t\u00c3\u0001\u00c3\u0001\u00c3"+
		"\u0001\u00c4\u0001\u00c4\u0003\u00c4\u0b81\b\u00c4\u0001\u00c5\u0001\u00c5"+
		"\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5\u0001\u00c5"+
		"\u0001\u00c5\u0001\u00c5\u0005\u00c5\u0b8d\b\u00c5\n\u00c5\f\u00c5\u0b90"+
		"\t\u00c5\u0003\u00c5\u0b92\b\u00c5\u0001\u00c6\u0001\u00c6\u0001\u00c6"+
		"\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0001\u00c6\u0003\u00c6"+
		"\u0b9c\b\u00c6\u0001\u00c7\u0001\u00c7\u0003\u00c7\u0ba0\b\u00c7\u0001"+
		"\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0005\u00c7\u0ba6\b\u00c7\n"+
		"\u00c7\f\u00c7\u0ba9\t\u00c7\u0001\u00c7\u0001\u00c7\u0001\u00c7\u0001"+
		"\u00c7\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0001\u00c8\u0003"+
		"\u00c8\u0bb4\b\u00c8\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001\u00c9\u0001"+
		"\u00c9\u0001\u00c9\u0005\u00c9\u0bbc\b\u00c9\n\u00c9\f\u00c9\u0bbf\t\u00c9"+
		"\u0001\u00c9\u0001\u00c9\u0003\u00c9\u0bc3\b\u00c9\u0001\u00ca\u0001\u00ca"+
		"\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0005\u00ca\u0bcb\b\u00ca"+
		"\n\u00ca\f\u00ca\u0bce\t\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00ca\u0005"+
		"\u00ca\u0bd3\b\u00ca\n\u00ca\f\u00ca\u0bd6\t\u00ca\u0003\u00ca\u0bd8\b"+
		"\u00ca\u0001\u00ca\u0001\u00ca\u0001\u00cb\u0001\u00cb\u0003\u00cb\u0bde"+
		"\b\u00cb\u0001\u00cc\u0001\u00cc\u0003\u00cc\u0be2\b\u00cc\u0001\u00cd"+
		"\u0001\u00cd\u0001\u00cd\u0003\u00cd\u0be7\b\u00cd\u0001\u00cd\u0001\u00cd"+
		"\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0005\u00cd\u0bef\b\u00cd"+
		"\n\u00cd\f\u00cd\u0bf2\t\u00cd\u0001\u00cd\u0001\u00cd\u0003\u00cd\u0bf6"+
		"\b\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00cd\u0001\u00ce\u0001"+
		"\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00ce\u0005\u00ce\u0c01\b\u00ce\n"+
		"\u00ce\f\u00ce\u0c04\t\u00ce\u0001\u00ce\u0001\u00ce\u0001\u00cf\u0001"+
		"\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0005\u00cf\u0c0d\b\u00cf\n"+
		"\u00cf\f\u00cf\u0c10\t\u00cf\u0001\u00cf\u0001\u00cf\u0003\u00cf\u0c14"+
		"\b\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001\u00cf\u0001"+
		"\u00cf\u0005\u00cf\u0c1c\b\u00cf\n\u00cf\f\u00cf\u0c1f\t\u00cf\u0001\u00cf"+
		"\u0001\u00cf\u0003\u00cf\u0c23\b\u00cf\u0003\u00cf\u0c25\b\u00cf\u0001"+
		"\u00d0\u0001\u00d0\u0001\u00d0\u0003\u00d0\u0c2a\b\u00d0\u0001\u00d0\u0001"+
		"\u00d0\u0003\u00d0\u0c2e\b\u00d0\u0001\u00d0\u0001\u00d0\u0001\u00d0\u0001"+
		"\u00d0\u0003\u00d0\u0c34\b\u00d0\u0001\u00d0\u0001\u00d0\u0003\u00d0\u0c38"+
		"\b\u00d0\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d1\u0001\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0005\u00d2\u0c43\b\u00d2\n"+
		"\u00d2\f\u00d2\u0c46\t\u00d2\u0001\u00d2\u0003\u00d2\u0c49\b\u00d2\u0001"+
		"\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0001\u00d2\u0005"+
		"\u00d2\u0c51\b\u00d2\n\u00d2\f\u00d2\u0c54\t\u00d2\u0003\u00d2\u0c56\b"+
		"\u00d2\u0003\u00d2\u0c58\b\u00d2\u0001\u00d3\u0001\u00d3\u0001\u00d3\u0003"+
		"\u00d3\u0c5d\b\u00d3\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001\u00d4\u0001"+
		"\u00d4\u0005\u00d4\u0c64\b\u00d4\n\u00d4\f\u00d4\u0c67\t\u00d4\u0001\u00d4"+
		"\u0001\u00d4\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5\u0001\u00d5"+
		"\u0001\u00d5\u0005\u00d5\u0c71\b\u00d5\n\u00d5\f\u00d5\u0c74\t\u00d5\u0001"+
		"\u00d5\u0001\u00d5\u0001\u00d6\u0001\u00d6\u0001\u00d6\u0003\u00d6\u0c7b"+
		"\b\u00d6\u0001\u00d7\u0001\u00d7\u0001\u00d7\u0001\u00d8\u0001\u00d8\u0005"+
		"\u00d8\u0c82\b\u00d8\n\u00d8\f\u00d8\u0c85\t\u00d8\u0001\u00d8\u0003\u00d8"+
		"\u0c88\b\u00d8\u0001\u00d8\u0005\u00d8\u0c8b\b\u00d8\n\u00d8\f\u00d8\u0c8e"+
		"\t\u00d8\u0001\u00d8\u0001\u00d8\u0001\u00d9\u0001\u00d9\u0001\u00d9\u0001"+
		"\u00d9\u0001\u00d9\u0001\u00d9\u0003\u00d9\u0c98\b\u00d9\u0003\u00d9\u0c9a"+
		"\b\u00d9\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00da\u0001\u00db\u0001"+
		"\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0001\u00db\u0001"+
		"\u00db\u0005\u00db\u0ca8\b\u00db\n\u00db\f\u00db\u0cab\t\u00db\u0001\u00dc"+
		"\u0001\u00dc\u0003\u00dc\u0caf\b\u00dc\u0001\u00dc\u0001\u00dc\u0005\u00dc"+
		"\u0cb3\b\u00dc\n\u00dc\f\u00dc\u0cb6\t\u00dc\u0001\u00dc\u0001\u00dc\u0001"+
		"\u00dd\u0003\u00dd\u0cbb\b\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00dd\u0001"+
		"\u00dd\u0001\u00dd\u0001\u00dd\u0001\u00de\u0001\u00de\u0001\u00de\u0001"+
		"\u00de\u0001\u00df\u0001\u00df\u0001\u00df\u0001\u00df\u0005\u00df\u0ccb"+
		"\b\u00df\n\u00df\f\u00df\u0cce\t\u00df\u0001\u00df\u0001\u00df\u0001\u00e0"+
		"\u0001\u00e0\u0003\u00e0\u0cd4\b\u00e0\u0001\u00e1\u0003\u00e1\u0cd7\b"+
		"\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e1\u0005\u00e1\u0cdd"+
		"\b\u00e1\n\u00e1\f\u00e1\u0ce0\t\u00e1\u0001\u00e1\u0001\u00e1\u0001\u00e2"+
		"\u0001\u00e2\u0001\u00e2\u0001\u00e2\u0003\u00e2\u0ce8\b\u00e2\u0003\u00e2"+
		"\u0cea\b\u00e2\u0001\u00e2\u0001\u00e2\u0003\u00e2\u0cee\b\u00e2\u0001"+
		"\u00e2\u0003\u00e2\u0cf1\b\u00e2\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0003"+
		"\u00e3\u0cf6\b\u00e3\u0003\u00e3\u0cf8\b\u00e3\u0001\u00e3\u0001\u00e3"+
		"\u0003\u00e3\u0cfc\b\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e3\u0001\u00e4"+
		"\u0001\u00e4\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5\u0001\u00e5"+
		"\u0003\u00e5\u0d08\b\u00e5\u0001\u00e6\u0001\u00e6\u0001\u00e6\u0001\u00e6"+
		"\u0001\u00e6\u0001\u00e7\u0001\u00e7\u0003\u00e7\u0d11\b\u00e7\u0001\u00e7"+
		"\u0001\u00e7\u0001\u00e7\u0001\u00e7\u0005\u00e7\u0d17\b\u00e7\n\u00e7"+
		"\f\u00e7\u0d1a\t\u00e7\u0001\u00e8\u0001\u00e8\u0003\u00e8\u0d1e\b\u00e8"+
		"\u0001\u00e8\u0001\u00e8\u0003\u00e8\u0d22\b\u00e8\u0001\u00e9\u0001\u00e9"+
		"\u0001\u00e9\u0003\u00e9\u0d27\b\u00e9\u0001\u00e9\u0003\u00e9\u0d2a\b"+
		"\u00e9\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0001\u00ea\u0005\u00ea\u0d30"+
		"\b\u00ea\n\u00ea\f\u00ea\u0d33\t\u00ea\u0001\u00eb\u0001\u00eb\u0001\u00eb"+
		"\u0001\u00eb\u0001\u00eb\u0003\u00eb\u0d3a\b\u00eb\u0001\u00ec\u0001\u00ec"+
		"\u0001\u00ec\u0001\u00ec\u0003\u00ec\u0d40\b\u00ec\u0001\u00ec\u0003\u00ec"+
		"\u0d43\b\u00ec\u0001\u00ec\u0003\u00ec\u0d46\b\u00ec\u0001\u00ed\u0001"+
		"\u00ed\u0001\u00ed\u0001\u00ed\u0005\u00ed\u0d4c\b\u00ed\n\u00ed\f\u00ed"+
		"\u0d4f\t\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed\u0001\u00ed"+
		"\u0001\u00ed\u0001\u00ed\u0003\u00ed\u0d58\b\u00ed\u0001\u00ee\u0001\u00ee"+
		"\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee\u0001\u00ee"+
		"\u0005\u00ee\u0d62\b\u00ee\n\u00ee\f\u00ee\u0d65\t\u00ee\u0001\u00ee\u0001"+
		"\u00ee\u0001\u00ee\u0001\u00ee\u0003\u00ee\u0d6b\b\u00ee\u0001\u00ef\u0001"+
		"\u00ef\u0003\u00ef\u0d6f\b\u00ef\u0001\u00ef\u0001\u00ef\u0003\u00ef\u0d73"+
		"\b\u00ef\u0001\u00ef\u0003\u00ef\u0d76\b\u00ef\u0001\u00ef\u0003\u00ef"+
		"\u0d79\b\u00ef\u0001\u00f0\u0001\u00f0\u0001\u00f0\u0003\u00f0\u0d7e\b"+
		"\u00f0\u0001\u00f1\u0001\u00f1\u0001\u00f1\u0003\u00f1\u0d83\b\u00f1\u0001"+
		"\u00f1\u0003\u00f1\u0d86\b\u00f1\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001"+
		"\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f2\u0001\u00f3\u0001\u00f3\u0003"+
		"\u00f3\u0d91\b\u00f3\u0001\u00f4\u0001\u00f4\u0001\u00f4\u0003\u00f4\u0d96"+
		"\b\u00f4\u0001\u00f4\u0003\u00f4\u0d99\b\u00f4\u0001\u00f4\u0003\u00f4"+
		"\u0d9c\b\u00f4\u0001\u00f5\u0001\u00f5\u0004\u00f5\u0da0\b\u00f5\u000b"+
		"\u00f5\f\u00f5\u0da1\u0001\u00f5\u0003\u00f5\u0da5\b\u00f5\u0001\u00f5"+
		"\u0001\u00f5\u0001\u00f6\u0001\u00f6\u0003\u00f6\u0dab\b\u00f6\u0001\u00f6"+
		"\u0003\u00f6\u0dae\b\u00f6\u0001\u00f7\u0003\u00f7\u0db1\b\u00f7\u0001"+
		"\u00f7\u0004\u00f7\u0db4\b\u00f7\u000b\u00f7\f\u00f7\u0db5\u0001\u00f7"+
		"\u0003\u00f7\u0db9\b\u00f7\u0001\u00f8\u0001\u00f8\u0001\u00f8\u0001\u00f8"+
		"\u0004\u00f8\u0dbf\b\u00f8\u000b\u00f8\f\u00f8\u0dc0\u0001\u00f9\u0001"+
		"\u00f9\u0004\u00f9\u0dc5\b\u00f9\u000b\u00f9\f\u00f9\u0dc6\u0001\u00fa"+
		"\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0001\u00fa\u0005\u00fa"+
		"\u0dcf\b\u00fa\n\u00fa\f\u00fa\u0dd2\t\u00fa\u0001\u00fa\u0001\u00fa\u0003"+
		"\u00fa\u0dd6\b\u00fa\u0001\u00fb\u0001\u00fb\u0001\u00fb\u0001\u00fc\u0001"+
		"\u00fc\u0001\u00fc\u0001\u00fc\u0003\u00fc\u0ddf\b\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001\u00fc\u0001"+
		"\u00fc\u0003\u00fc\u0de9\b\u00fc\u0001\u00fc\u0001\u00fc\u0003\u00fc\u0ded"+
		"\b\u00fc\u0003\u00fc\u0def\b\u00fc\u0001\u00fc\u0003\u00fc\u0df2\b\u00fc"+
		"\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd\u0001\u00fd"+
		"\u0001\u00fd\u0001\u00fd\u0005\u00fd\u0dfc\b\u00fd\n\u00fd\f\u00fd\u0dff"+
		"\t\u00fd\u0001\u00fd\u0003\u00fd\u0e02\b\u00fd\u0001\u00fd\u0003\u00fd"+
		"\u0e05\b\u00fd\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00fe\u0001\u00ff"+
		"\u0001\u00ff\u0001\u00ff\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100"+
		"\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0005\u0100"+
		"\u0e17\b\u0100\n\u0100\f\u0100\u0e1a\t\u0100\u0001\u0100\u0001\u0100\u0003"+
		"\u0100\u0e1e\b\u0100\u0001\u0100\u0001\u0100\u0001\u0100\u0003\u0100\u0e23"+
		"\b\u0100\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0001\u0101\u0003"+
		"\u0101\u0e2a\b\u0101\u0001\u0101\u0003\u0101\u0e2d\b\u0101\u0001\u0102"+
		"\u0001\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0005\u0102\u0e34\b\u0102"+
		"\n\u0102\f\u0102\u0e37\t\u0102\u0001\u0102\u0001\u0102\u0001\u0102\u0001"+
		"\u0102\u0003\u0102\u0e3d\b\u0102\u0001\u0103\u0001\u0103\u0001\u0103\u0003"+
		"\u0103\u0e42\b\u0103\u0001\u0104\u0001\u0104\u0003\u0104\u0e46\b\u0104"+
		"\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105"+
		"\u0003\u0105\u0e4e\b\u0105\u0001\u0105\u0001\u0105\u0001\u0105\u0001\u0105"+
		"\u0003\u0105\u0e54\b\u0105\u0001\u0106\u0001\u0106\u0001\u0106\u0001\u0106"+
		"\u0001\u0106\u0001\u0106\u0003\u0106\u0e5c\b\u0106\u0001\u0106\u0003\u0106"+
		"\u0e5f\b\u0106\u0001\u0107\u0001\u0107\u0001\u0107\u0001\u0107\u0005\u0107"+
		"\u0e65\b\u0107\n\u0107\f\u0107\u0e68\t\u0107\u0001\u0107\u0001\u0107\u0001"+
		"\u0108\u0001\u0108\u0001\u0108\u0003\u0108\u0e6f\b\u0108\u0001\u0108\u0003"+
		"\u0108\u0e72\b\u0108\u0001\u0108\u0003\u0108\u0e75\b\u0108\u0001\u0109"+
		"\u0001\u0109\u0001\u0109\u0001\u010a\u0001\u010a\u0001\u010a\u0001\u010a"+
		"\u0003\u010a\u0e7e\b\u010a\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0003\u010b\u0e84\b\u010b\u0001\u010b\u0001\u010b\u0001\u010b\u0001\u010b"+
		"\u0003\u010b\u0e8a\b\u010b\u0003\u010b\u0e8c\b\u010b\u0001\u010c\u0001"+
		"\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0001"+
		"\u010c\u0001\u010c\u0001\u010c\u0001\u010c\u0003\u010c\u0e99\b\u010c\u0003"+
		"\u010c\u0e9b\b\u010c\u0001\u010d\u0001\u010d\u0001\u010d\u0001\u010d\u0001"+
		"\u010d\u0001\u010d\u0001\u010d\u0003\u010d\u0ea4\b\u010d\u0003\u010d\u0ea6"+
		"\b\u010d\u0001\u010e\u0001\u010e\u0003\u010e\u0eaa\b\u010e\u0001\u010e"+
		"\u0001\u010e\u0001\u010e\u0001\u010e\u0003\u010e\u0eb0\b\u010e\u0001\u010e"+
		"\u0001\u010e\u0003\u010e\u0eb4\b\u010e\u0001\u010f\u0001\u010f\u0001\u010f"+
		"\u0001\u010f\u0001\u010f\u0001\u0110\u0001\u0110\u0001\u0110\u0001\u0110"+
		"\u0001\u0110\u0001\u0111\u0001\u0111\u0003\u0111\u0ec2\b\u0111\u0001\u0111"+
		"\u0001\u0111\u0005\u0111\u0ec6\b\u0111\n\u0111\f\u0111\u0ec9\t\u0111\u0001"+
		"\u0111\u0001\u0111\u0001\u0112\u0001\u0112\u0001\u0113\u0001\u0113\u0001"+
		"\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0001"+
		"\u0114\u0001\u0114\u0003\u0114\u0ed9\b\u0114\u0001\u0114\u0001\u0114\u0001"+
		"\u0114\u0001\u0114\u0001\u0114\u0001\u0114\u0005\u0114\u0ee1\b\u0114\n"+
		"\u0114\f\u0114\u0ee4\t\u0114\u0001\u0115\u0001\u0115\u0001\u0115\u0001"+
		"\u0115\u0001\u0115\u0001\u0115\u0003\u0115\u0eec\b\u0115\u0001\u0116\u0001"+
		"\u0116\u0001\u0116\u0003\u0116\u0ef1\b\u0116\u0001\u0116\u0001\u0116\u0003"+
		"\u0116\u0ef5\b\u0116\u0001\u0117\u0001\u0117\u0001\u0118\u0001\u0118\u0003"+
		"\u0118\u0efb\b\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001\u0118\u0001"+
		"\u0118\u0001\u0119\u0001\u0119\u0003\u0119\u0f04\b\u0119\u0001\u0119\u0001"+
		"\u0119\u0001\u0119\u0003\u0119\u0f09\b\u0119\u0001\u011a\u0003\u011a\u0f0c"+
		"\b\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001\u011a\u0001"+
		"\u011b\u0001\u011b\u0003\u011b\u0f15\b\u011b\u0001\u011b\u0001\u011b\u0001"+
		"\u011b\u0001\u011b\u0003\u011b\u0f1b\b\u011b\u0001\u011c\u0001\u011c\u0001"+
		"\u011c\u0003\u011c\u0f20\b\u011c\u0001\u011c\u0001\u011c\u0001\u011d\u0001"+
		"\u011d\u0001\u011d\u0005\u011d\u0f27\b\u011d\n\u011d\f\u011d\u0f2a\t\u011d"+
		"\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e"+
		"\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e"+
		"\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e"+
		"\u0001\u011e\u0003\u011e\u0f3f\b\u011e\u0001\u011e\u0003\u011e\u0f42\b"+
		"\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0001\u011e\u0005\u011e\u0f48"+
		"\b\u011e\n\u011e\f\u011e\u0f4b\t\u011e\u0001\u011f\u0001\u011f\u0001\u0120"+
		"\u0001\u0120\u0001\u0121\u0001\u0121\u0003\u0121\u0f53\b\u0121\u0001\u0122"+
		"\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122"+
		"\u0001\u0122\u0001\u0122\u0001\u0122\u0001\u0122\u0005\u0122\u0f60\b\u0122"+
		"\n\u0122\f\u0122\u0f63\t\u0122\u0001\u0122\u0001\u0122\u0003\u0122\u0f67"+
		"\b\u0122\u0001\u0122\u0001\u0122\u0001\u0123\u0001\u0123\u0001\u0123\u0001"+
		"\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001\u0123\u0001"+
		"\u0123\u0005\u0123\u0f75\b\u0123\n\u0123\f\u0123\u0f78\t\u0123\u0001\u0123"+
		"\u0001\u0123\u0003\u0123\u0f7c\b\u0123\u0001\u0123\u0001\u0123\u0001\u0124"+
		"\u0001\u0124\u0001\u0124\u0001\u0124\u0001\u0124\u0005\u0124\u0f85\b\u0124"+
		"\n\u0124\f\u0124\u0f88\t\u0124\u0001\u0124\u0001\u0124\u0001\u0125\u0001"+
		"\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0001"+
		"\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0003"+
		"\u0125\u0f99\b\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0001"+
		"\u0125\u0001\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u0fa3\b\u0125\u0001"+
		"\u0125\u0003\u0125\u0fa6\b\u0125\u0001\u0125\u0001\u0125\u0003\u0125\u0faa"+
		"\b\u0125\u0001\u0126\u0001\u0126\u0001\u0127\u0001\u0127\u0003\u0127\u0fb0"+
		"\b\u0127\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0003\u0128\u0fb6"+
		"\b\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0001\u0128\u0003\u0128\u0fbc"+
		"\b\u0128\u0001\u0129\u0001\u0129\u0001\u0129\u0001\u0129\u0005\u0129\u0fc2"+
		"\b\u0129\n\u0129\f\u0129\u0fc5\t\u0129\u0003\u0129\u0fc7\b\u0129\u0001"+
		"\u012a\u0001\u012a\u0001\u012b\u0001\u012b\u0001\u012b\u0005\u012b\u0fce"+
		"\b\u012b\n\u012b\f\u012b\u0fd1\t\u012b\u0001\u012c\u0001\u012c\u0001\u012c"+
		"\u0003\u012c\u0fd6\b\u012c\u0001\u012d\u0001\u012d\u0001\u012d\u0003\u012d"+
		"\u0fdb\b\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d"+
		"\u0001\u012d\u0001\u012d\u0001\u012d\u0001\u012d\u0003\u012d\u0fe6\b\u012d"+
		"\u0001\u012d\u0001\u012d\u0003\u012d\u0fea\b\u012d\u0001\u012d\u0001\u012d"+
		"\u0001\u012d\u0005\u012d\u0fef\b\u012d\n\u012d\f\u012d\u0ff2\t\u012d\u0001"+
		"\u012d\u0001\u012d\u0003\u012d\u0ff6\b\u012d\u0005\u012d\u0ff8\b\u012d"+
		"\n\u012d\f\u012d\u0ffb\t\u012d\u0001\u012e\u0001\u012e\u0001\u012e\u0003"+
		"\u012e\u1000\b\u012e\u0001\u012e\u0001\u012e\u0003\u012e\u1004\b\u012e"+
		"\u0001\u012f\u0001\u012f\u0001\u0130\u0001\u0130\u0001\u0130\u0001\u0130"+
		"\u0005\u0130\u100c\b\u0130\n\u0130\f\u0130\u100f\t\u0130\u0001\u0131\u0001"+
		"\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0001\u0131\u0003\u0131\u1017"+
		"\b\u0131\u0001\u0132\u0001\u0132\u0003\u0132\u101b\b\u0132\u0001\u0132"+
		"\u0001\u0132\u0001\u0132\u0001\u0132\u0001\u0132\u0001\u0132\u0001\u0132"+
		"\u0003\u0132\u1024\b\u0132\u0003\u0132\u1026\b\u0132\u0003\u0132\u1028"+
		"\b\u0132\u0001\u0133\u0001\u0133\u0001\u0134\u0001\u0134\u0001\u0134\u0001"+
		"\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0001"+
		"\u0135\u0001\u0135\u0005\u0135\u1037\b\u0135\n\u0135\f\u0135\u103a\t\u0135"+
		"\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0001\u0135\u0003\u0135"+
		"\u1041\b\u0135\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0136\u0001\u0137"+
		"\u0001\u0137\u0001\u0137\u0001\u0137\u0005\u0137\u104b\b\u0137\n\u0137"+
		"\f\u0137\u104e\t\u0137\u0001\u0138\u0001\u0138\u0001\u0139\u0001\u0139"+
		"\u0001\u0139\u0005\u0139\u1055\b\u0139\n\u0139\f\u0139\u1058\t\u0139\u0001"+
		"\u013a\u0001\u013a\u0001\u013a\u0005\u013a\u105d\b\u013a\n\u013a\f\u013a"+
		"\u1060\t\u013a\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b\u0001\u013b"+
		"\u0001\u013b\u0003\u013b\u1068\b\u013b\u0001\u013b\u0003\u013b\u106b\b"+
		"\u013b\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0003"+
		"\u013c\u1072\b\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0003\u013c\u107a\b\u013c\u0001\u013c\u0001\u013c\u0001"+
		"\u013c\u0001\u013c\u0001\u013c\u0003\u013c\u1081\b\u013c\u0001\u013c\u0001"+
		"\u013c\u0003\u013c\u1085\b\u013c\u0001\u013d\u0001\u013d\u0001\u013d\u0001"+
		"\u013d\u0001\u013d\u0003\u013d\u108c\b\u013d\u0001\u013e\u0001\u013e\u0003"+
		"\u013e\u1090\b\u013e\u0001\u013e\u0001\u013e\u0001\u013e\u0003\u013e\u1095"+
		"\b\u013e\u0005\u013e\u1097\b\u013e\n\u013e\f\u013e\u109a\t\u013e\u0001"+
		"\u013e\u0001\u013e\u0001\u013e\u0005\u013e\u109f\b\u013e\n\u013e\f\u013e"+
		"\u10a2\t\u013e\u0001\u013e\u0003\u013e\u10a5\b\u013e\u0001\u013f\u0001"+
		"\u013f\u0001\u013f\u0001\u013f\u0001\u013f\u0003\u013f\u10ac\b\u013f\u0001"+
		"\u013f\u0001\u013f\u0001\u013f\u0001\u013f\u0001\u013f\u0001\u013f\u0001"+
		"\u013f\u0003\u013f\u10b5\b\u013f\u0001\u0140\u0001\u0140\u0001\u0140\u0001"+
		"\u0141\u0001\u0141\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001"+
		"\u0142\u0005\u0142\u10c1\b\u0142\n\u0142\f\u0142\u10c4\t\u0142\u0001\u0142"+
		"\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142\u0001\u0142"+
		"\u0001\u0142\u0005\u0142\u10ce\b\u0142\n\u0142\f\u0142\u10d1\t\u0142\u0001"+
		"\u0142\u0001\u0142\u0003\u0142\u10d5\b\u0142\u0001\u0142\u0001\u0142\u0001"+
		"\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001"+
		"\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001"+
		"\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0001\u0143\u0003"+
		"\u0143\u10eb\b\u0143\u0001\u0144\u0001\u0144\u0003\u0144\u10ef\b\u0144"+
		"\u0001\u0145\u0003\u0145\u10f2\b\u0145\u0001\u0145\u0001\u0145\u0001\u0145"+
		"\u0004\u0145\u10f7\b\u0145\u000b\u0145\f\u0145\u10f8\u0001\u0145\u0003"+
		"\u0145\u10fc\b\u0145\u0001\u0145\u0001\u0145\u0003\u0145\u1100\b\u0145"+
		"\u0001\u0145\u0003\u0145\u1103\b\u0145\u0001\u0146\u0001\u0146\u0001\u0146"+
		"\u0001\u0146\u0001\u0146\u0003\u0146\u110a\b\u0146\u0001\u0147\u0003\u0147"+
		"\u110d\b\u0147\u0001\u0147\u0001\u0147\u0004\u0147\u1111\b\u0147\u000b"+
		"\u0147\f\u0147\u1112\u0001\u0147\u0003\u0147\u1116\b\u0147\u0001\u0147"+
		"\u0001\u0147\u0003\u0147\u111a\b\u0147\u0001\u0147\u0003\u0147\u111d\b"+
		"\u0147\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0001\u0148\u0003"+
		"\u0148\u1124\b\u0148\u0001\u0149\u0001\u0149\u0001\u0149\u0003\u0149\u1129"+
		"\b\u0149\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001"+
		"\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0001\u014a\u0005\u014a\u1135"+
		"\b\u014a\n\u014a\f\u014a\u1138\t\u014a\u0001\u014a\u0001\u014a\u0001\u014a"+
		"\u0003\u014a\u113d\b\u014a\u0003\u014a\u113f\b\u014a\u0001\u014b\u0001"+
		"\u014b\u0003\u014b\u1143\b\u014b\u0001\u014c\u0001\u014c\u0001\u014c\u0001"+
		"\u014c\u0005\u014c\u1149\b\u014c\n\u014c\f\u014c\u114c\t\u014c\u0001\u014d"+
		"\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d\u0001\u014d"+
		"\u0001\u014d\u0001\u014d\u0003\u014d\u1157\b\u014d\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0003\u014e\u115c\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0003\u014e\u1161\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0003\u014e\u1167\b\u014e\u0001\u014e\u0003\u014e\u116a\b\u014e\u0001"+
		"\u014e\u0001\u014e\u0003\u014e\u116e\b\u014e\u0001\u014e\u0001\u014e\u0001"+
		"\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003"+
		"\u014e\u1178\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001"+
		"\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001"+
		"\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003\u014e\u1188\b\u014e\u0001"+
		"\u014e\u0001\u014e\u0003\u014e\u118c\b\u014e\u0001\u014e\u0001\u014e\u0001"+
		"\u014e\u0001\u014e\u0001\u014e\u0004\u014e\u1193\b\u014e\u000b\u014e\f"+
		"\u014e\u1194\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003\u014e"+
		"\u119b\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0003\u014e\u11a9\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0005\u014e\u11b2\b\u014e"+
		"\n\u014e\f\u014e\u11b5\t\u014e\u0001\u014e\u0003\u014e\u11b8\b\u014e\u0001"+
		"\u014e\u0003\u014e\u11bb\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001"+
		"\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003\u014e\u11c4\b\u014e\u0001"+
		"\u014e\u0001\u014e\u0005\u014e\u11c8\b\u014e\n\u014e\f\u014e\u11cb\t\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0003\u014e\u11d4\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0003\u014e\u11dc\b\u014e\u0001\u014e"+
		"\u0003\u014e\u11df\b\u014e\u0001\u014e\u0003\u014e\u11e2\b\u014e\u0001"+
		"\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001"+
		"\u014e\u0003\u014e\u11eb\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003"+
		"\u014e\u11f0\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001"+
		"\u014e\u0005\u014e\u11f7\b\u014e\n\u014e\f\u014e\u11fa\t\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0003\u014e\u11ff\b\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0003\u014e\u1204\b\u014e\u0001\u014e\u0003\u014e\u1207\b"+
		"\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003\u014e\u120c\b\u014e\u0001"+
		"\u014e\u0001\u014e\u0001\u014e\u0003\u014e\u1211\b\u014e\u0005\u014e\u1213"+
		"\b\u014e\n\u014e\f\u014e\u1216\t\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0003\u014e\u121b\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0003\u014e\u1221\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0003\u014e\u122a\b\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0003\u014e\u122f\b\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003\u014e\u1237\b\u014e"+
		"\u0001\u014e\u0001\u014e\u0003\u014e\u123b\b\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0003\u014e\u1240\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0003\u014e\u1246\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0003\u014e\u124d\b\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0003\u014e\u1252\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0003\u014e\u1259\b\u014e\u0001\u014e\u0001\u014e"+
		"\u0003\u014e\u125d\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003\u014e"+
		"\u1262\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0003\u014e\u126a\b\u014e\u0001\u014e\u0003\u014e\u126d\b"+
		"\u014e\u0001\u014e\u0003\u014e\u1270\b\u014e\u0001\u014e\u0003\u014e\u1273"+
		"\b\u014e\u0001\u014e\u0001\u014e\u0003\u014e\u1277\b\u014e\u0001\u014e"+
		"\u0001\u014e\u0001\u014e\u0003\u014e\u127c\b\u014e\u0001\u014e\u0001\u014e"+
		"\u0001\u014e\u0003\u014e\u1281\b\u014e\u0001\u014e\u0001\u014e\u0003\u014e"+
		"\u1285\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0001\u014e"+
		"\u0003\u014e\u128c\b\u014e\u0001\u014e\u0001\u014e\u0001\u014e\u0003\u014e"+
		"\u1291\b\u014e\u0003\u014e\u1293\b\u014e\u0001\u014f\u0001\u014f\u0001"+
		"\u0150\u0001\u0150\u0001\u0151\u0001\u0151\u0001\u0152\u0001\u0152\u0001"+
		"\u0152\u0003\u0152\u129e\b\u0152\u0001\u0152\u0001\u0152\u0003\u0152\u12a2"+
		"\b\u0152\u0003\u0152\u12a4\b\u0152\u0001\u0152\u0001\u0152\u0001\u0153"+
		"\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153\u0001\u0153"+
		"\u0003\u0153\u12af\b\u0153\u0001\u0154\u0001\u0154\u0001\u0155\u0001\u0155"+
		"\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0001\u0155\u0003\u0155"+
		"\u12ba\b\u0155\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156\u0001\u0156"+
		"\u0005\u0156\u12c1\b\u0156\n\u0156\f\u0156\u12c4\t\u0156\u0003\u0156\u12c6"+
		"\b\u0156\u0001\u0157\u0001\u0157\u0003\u0157\u12ca\b\u0157\u0001\u0157"+
		"\u0003\u0157\u12cd\b\u0157\u0001\u0157\u0001\u0157\u0003\u0157\u12d1\b"+
		"\u0157\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0158\u0001\u0159\u0001"+
		"\u0159\u0001\u0159\u0001\u0159\u0001\u0159\u0001\u0159\u0001\u0159\u0003"+
		"\u0159\u12de\b\u0159\u0001\u015a\u0001\u015a\u0001\u015a\u0003\u015a\u12e3"+
		"\b\u015a\u0001\u015a\u0001\u015a\u0001\u015a\u0001\u015a\u0005\u015a\u12e9"+
		"\b\u015a\n\u015a\f\u015a\u12ec\t\u015a\u0001\u015a\u0001\u015a\u0001\u015a"+
		"\u0001\u015a\u0003\u015a\u12f2\b\u015a\u0001\u015b\u0001\u015b\u0001\u015b"+
		"\u0003\u015b\u12f7\b\u015b\u0001\u015b\u0001\u015b\u0003\u015b\u12fb\b"+
		"\u015b\u0001\u015b\u0001\u015b\u0001\u015b\u0003\u015b\u1300\b\u015b\u0001"+
		"\u015c\u0001\u015c\u0001\u015c\u0003\u015c\u1305\b\u015c\u0001\u015c\u0003"+
		"\u015c\u1308\b\u015c\u0001\u015c\u0001\u015c\u0001\u015c\u0005\u015c\u130d"+
		"\b\u015c\n\u015c\f\u015c\u1310\t\u015c\u0001\u015c\u0001\u015c\u0001\u015d"+
		"\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0003\u015d\u1319\b\u015d"+
		"\u0001\u015d\u0001\u015d\u0001\u015d\u0001\u015d\u0005\u015d\u131f\b\u015d"+
		"\n\u015d\f\u015d\u1322\t\u015d\u0001\u015d\u0003\u015d\u1325\b\u015d\u0001"+
		"\u015d\u0001\u015d\u0001\u015e\u0001\u015e\u0001\u015e\u0001\u015e\u0001"+
		"\u015e\u0001\u015e\u0003\u015e\u132f\b\u015e\u0001\u015e\u0003\u015e\u1332"+
		"\b\u015e\u0003\u015e\u1334\b\u015e\u0001\u015f\u0001\u015f\u0001\u015f"+
		"\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0001\u0160\u0003\u0160"+
		"\u133e\b\u0160\u0003\u0160\u1340\b\u0160\u0001\u0161\u0001\u0161\u0001"+
		"\u0161\u0001\u0161\u0003\u0161\u1346\b\u0161\u0001\u0162\u0001\u0162\u0001"+
		"\u0162\u0001\u0162\u0003\u0162\u134c\b\u0162\u0003\u0162\u134e\b\u0162"+
		"\u0001\u0163\u0001\u0163\u0001\u0163\u0001\u0164\u0001\u0164\u0001\u0164"+
		"\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165\u0001\u0165"+
		"\u0003\u0165\u135c\b\u0165\u0003\u0165\u135e\b\u0165\u0001\u0166\u0001"+
		"\u0166\u0001\u0166\u0001\u0166\u0001\u0166\u0003\u0166\u1365\b\u0166\u0001"+
		"\u0166\u0003\u0166\u1368\b\u0166\u0001\u0167\u0001\u0167\u0001\u0167\u0001"+
		"\u0167\u0001\u0167\u0001\u0167\u0001\u0167\u0003\u0167\u1371\b\u0167\u0001"+
		"\u0168\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0168\u0001\u0168\u0001"+
		"\u0168\u0003\u0168\u137a\b\u0168\u0001\u0169\u0001\u0169\u0001\u016a\u0001"+
		"\u016a\u0001\u016b\u0001\u016b\u0003\u016b\u1382\b\u016b\u0001\u016b\u0001"+
		"\u016b\u0001\u016c\u0003\u016c\u1387\b\u016c\u0001\u016c\u0001\u016c\u0003"+
		"\u016c\u138b\b\u016c\u0001\u016c\u0003\u016c\u138e\b\u016c\u0001\u016d"+
		"\u0001\u016d\u0003\u016d\u1392\b\u016d\u0001\u016e\u0001\u016e\u0001\u016f"+
		"\u0001\u016f\u0001\u016f\u0003\u016f\u1399\b\u016f\u0001\u0170\u0001\u0170"+
		"\u0001\u0170\u0001\u0170\u0001\u0171\u0001\u0171\u0001\u0171\u0001\u0171"+
		"\u0005\u0171\u13a3\b\u0171\n\u0171\f\u0171\u13a6\t\u0171\u0001\u0171\u0001"+
		"\u0171\u0001\u0171\u0001\u0171\u0001\u0171\u0001\u0171\u0005\u0171\u13ae"+
		"\b\u0171\n\u0171\f\u0171\u13b1\t\u0171\u0003\u0171\u13b3\b\u0171\u0001"+
		"\u0172\u0001\u0172\u0003\u0172\u13b7\b\u0172\u0001\u0173\u0001\u0173\u0001"+
		"\u0174\u0001\u0174\u0001\u0175\u0001\u0175\u0001\u0176\u0001\u0176\u0001"+
		"\u0177\u0001\u0177\u0001\u0178\u0001\u0178\u0001\u0179\u0001\u0179\u0001"+
		"\u0179\u0005\u0179\u13c8\b\u0179\n\u0179\f\u0179\u13cb\t\u0179\u0001\u0179"+
		"\u0001\u0179\u0003\u0179\u13cf\b\u0179\u0001\u017a\u0001\u017a\u0001\u017b"+
		"\u0001\u017b\u0001\u017b\u0003\u017b\u13d6\b\u017b\u0001\u017c\u0001\u017c"+
		"\u0001\u017d\u0001\u017d\u0001\u017e\u0001\u017e\u0001\u017e\u0005\u017e"+
		"\u13df\b\u017e\n\u017e\f\u017e\u13e2\t\u017e\u0001\u017f\u0001\u017f\u0001"+
		"\u0180\u0001\u0180\u0001\u0180\u0005\u0180\u13e9\b\u0180\n\u0180\f\u0180"+
		"\u13ec\t\u0180\u0001\u0180\u0001\u0180\u0003\u0180\u13f0\b\u0180\u0001"+
		"\u0181\u0001\u0181\u0001\u0182\u0001\u0182\u0001\u0182\u0005\u0182\u13f7"+
		"\b\u0182\n\u0182\f\u0182\u13fa\t\u0182\u0001\u0183\u0001\u0183\u0001\u0183"+
		"\u0005\u0183\u13ff\b\u0183\n\u0183\f\u0183\u1402\t\u0183\u0001\u0184\u0001"+
		"\u0184\u0001\u0184\u0005\u0184\u1407\b\u0184\n\u0184\f\u0184\u140a\t\u0184"+
		"\u0001\u0185\u0001\u0185\u0001\u0185\u0003\u0185\u140f\b\u0185\u0001\u0186"+
		"\u0001\u0186\u0001\u0186\u0003\u0186\u1414\b\u0186\u0001\u0186\u0001\u0186"+
		"\u0001\u0187\u0001\u0187\u0001\u0187\u0003\u0187\u141b\b\u0187\u0001\u0188"+
		"\u0001\u0188\u0003\u0188\u141f\b\u0188\u0001\u0188\u0001\u0188\u0001\u0188"+
		"\u0003\u0188\u1424\b\u0188\u0001\u0188\u0003\u0188\u1427\b\u0188\u0001"+
		"\u0189\u0001\u0189\u0001\u018a\u0001\u018a\u0003\u018a\u142d\b\u018a\u0001"+
		"\u018b\u0001\u018b\u0003\u018b\u1431\b\u018b\u0001\u018c\u0001\u018c\u0001"+
		"\u018c\u0003\u018c\u1436\b\u018c\u0001\u018d\u0001\u018d\u0001\u018e\u0001"+
		"\u018e\u0001\u018e\u0005\u018e\u143d\b\u018e\n\u018e\f\u018e\u1440\t\u018e"+
		"\u0001\u018f\u0001\u018f\u0001\u018f\u0003\u018f\u1445\b\u018f\u0001\u018f"+
		"\u0001\u018f\u0001\u018f\u0003\u018f\u144a\b\u018f\u0001\u0190\u0001\u0190"+
		"\u0001\u0190\u0005\u0190\u144f\b\u0190\n\u0190\f\u0190\u1452\t\u0190\u0001"+
		"\u0191\u0001\u0191\u0001\u0191\u0001\u0191\u0001\u0191\u0001\u0191\u0001"+
		"\u0191\u0003\u0191\u145b\b\u0191\u0001\u0192\u0001\u0192\u0003\u0192\u145f"+
		"\b\u0192\u0001\u0192\u0001\u0192\u0005\u0192\u1463\b\u0192\n\u0192\f\u0192"+
		"\u1466\t\u0192\u0001\u0192\u0001\u0192\u0003\u0192\u146a\b\u0192\u0001"+
		"\u0193\u0001\u0193\u0001\u0193\u0003\u0193\u146f\b\u0193\u0003\u0193\u1471"+
		"\b\u0193\u0001\u0193\u0001\u0193\u0001\u0193\u0003\u0193\u1476\b\u0193"+
		"\u0005\u0193\u1478\b\u0193\n\u0193\f\u0193\u147b\t\u0193\u0001\u0193\u0001"+
		"\u0193\u0003\u0193\u147f\b\u0193\u0001\u0194\u0001\u0194\u0001\u0194\u0001"+
		"\u0194\u0001\u0194\u0003\u0194\u1486\b\u0194\u0001\u0194\u0001\u0194\u0001"+
		"\u0194\u0003\u0194\u148b\b\u0194\u0003\u0194\u148d\b\u0194\u0003\u0194"+
		"\u148f\b\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194\u0001\u0194"+
		"\u0001\u0194\u0001\u0194\u0001\u0194\u0003\u0194\u1499\b\u0194\u0001\u0194"+
		"\u0001\u0194\u0001\u0194\u0003\u0194\u149e\b\u0194\u0005\u0194\u14a0\b"+
		"\u0194\n\u0194\f\u0194\u14a3\t\u0194\u0003\u0194\u14a5\b\u0194\u0001\u0194"+
		"\u0001\u0194\u0003\u0194\u14a9\b\u0194\u0001\u0195\u0001\u0195\u0001\u0195"+
		"\u0001\u0196\u0001\u0196\u0001\u0196\u0001\u0196\u0003\u0196\u14b2\b\u0196"+
		"\u0001\u0196\u0001\u0196\u0001\u0197\u0001\u0197\u0003\u0197\u14b8\b\u0197"+
		"\u0001\u0197\u0001\u0197\u0003\u0197\u14bc\b\u0197\u0003\u0197\u14be\b"+
		"\u0197\u0001\u0198\u0001\u0198\u0003\u0198\u14c2\b\u0198\u0001\u0198\u0001"+
		"\u0198\u0003\u0198\u14c6\b\u0198\u0001\u0198\u0001\u0198\u0003\u0198\u14ca"+
		"\b\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0001"+
		"\u0198\u0003\u0198\u14d2\b\u0198\u0001\u0198\u0001\u0198\u0001\u0198\u0001"+
		"\u0198\u0001\u0198\u0001\u0198\u0003\u0198\u14da\b\u0198\u0003\u0198\u14dc"+
		"\b\u0198\u0001\u0199\u0001\u0199\u0001\u0199\u0001\u0199\u0003\u0199\u14e2"+
		"\b\u0199\u0001\u0199\u0003\u0199\u14e5\b\u0199\u0001\u0199\u0001\u0199"+
		"\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0003\u019a\u14ff\b\u019a"+
		"\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0003\u019a"+
		"\u1506\b\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a\u0001\u019a"+
		"\u0001\u019a\u0001\u019a\u0003\u019a\u1527\b\u019a\u0001\u019b\u0001\u019b"+
		"\u0001\u019b\u0003\u019b\u152c\b\u019b\u0001\u019b\u0003\u019b\u152f\b"+
		"\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0003\u019b\u1534\b\u019b\u0003"+
		"\u019b\u1536\b\u019b\u0001\u019b\u0001\u019b\u0005\u019b\u153a\b\u019b"+
		"\n\u019b\f\u019b\u153d\t\u019b\u0001\u019b\u0001\u019b\u0001\u019b\u0001"+
		"\u019b\u0003\u019b\u1543\b\u019b\u0001\u019c\u0001\u019c\u0001\u019c\u0001"+
		"\u019d\u0001\u019d\u0001\u019e\u0001\u019e\u0001\u019e\u0001\u019f\u0001"+
		"\u019f\u0001\u01a0\u0001\u01a0\u0001\u01a0\u0005\u01a0\u1552\b\u01a0\n"+
		"\u01a0\f\u01a0\u1555\t\u01a0\u0001\u01a1\u0001\u01a1\u0003\u01a1\u1559"+
		"\b\u01a1\u0001\u01a1\u0001\u01a1\u0001\u01a1\u0005\u01a1\u155e\b\u01a1"+
		"\n\u01a1\f\u01a1\u1561\t\u01a1\u0001\u01a1\u0003\u01a1\u1564\b\u01a1\u0001"+
		"\u01a2\u0001\u01a2\u0003\u01a2\u1568\b\u01a2\u0001\u01a2\u0001\u01a2\u0001"+
		"\u01a2\u0005\u01a2\u156d\b\u01a2\n\u01a2\f\u01a2\u1570\t\u01a2\u0001\u01a3"+
		"\u0001\u01a3\u0001\u01a3\u0003\u01a3\u1575\b\u01a3\u0001\u01a3\u0001\u01a3"+
		"\u0001\u01a3\u0001\u01a3\u0003\u01a3\u157b\b\u01a3\u0001\u01a3\u0001\u01a3"+
		"\u0001\u01a3\u0001\u01a3\u0003\u01a3\u1581\b\u01a3\u0001\u01a3\u0001\u01a3"+
		"\u0001\u01a3\u0001\u01a3\u0003\u01a3\u1587\b\u01a3\u0001\u01a3\u0001\u01a3"+
		"\u0001\u01a3\u0003\u01a3\u158c\b\u01a3\u0003\u01a3\u158e\b\u01a3\u0001"+
		"\u01a3\u0003\u01a3\u1591\b\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001"+
		"\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0003\u01a3\u159b"+
		"\b\u01a3\u0001\u01a3\u0003\u01a3\u159e\b\u01a3\u0003\u01a3\u15a0\b\u01a3"+
		"\u0003\u01a3\u15a2\b\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3"+
		"\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3\u0001\u01a3"+
		"\u0001\u01a3\u0001\u01a3\u0003\u01a3\u15b0\b\u01a3\u0001\u01a4\u0001\u01a4"+
		"\u0001\u01a5\u0001\u01a5\u0001\u01a5\u0001\u01a6\u0001\u01a6\u0001\u01a7"+
		"\u0001\u01a7\u0003\u01a7\u15bb\b\u01a7\u0001\u01a7\u0001\u01a7\u0001\u01a8"+
		"\u0001\u01a8\u0003\u01a8\u15c1\b\u01a8\u0001\u01a9\u0001\u01a9\u0001\u01a9"+
		"\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0001\u01a9\u0003\u01a9\u15ca\b\u01a9"+
		"\u0001\u01aa\u0001\u01aa\u0001\u01aa\u0003\u01aa\u15cf\b\u01aa\u0001\u01ab"+
		"\u0001\u01ab\u0001\u01ab\u0003\u01ab\u15d4\b\u01ab\u0001\u01ac\u0001\u01ac"+
		"\u0001\u01ac\u0003\u01ac\u15d9\b\u01ac\u0001\u01ad\u0001\u01ad\u0001\u01ad"+
		"\u0001\u01ad\u0001\u01ae\u0001\u01ae\u0001\u01ae\u0000\u0002\u0228\u023c"+
		"\u01af\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018"+
		"\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080"+
		"\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098"+
		"\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0"+
		"\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8"+
		"\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0"+
		"\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8"+
		"\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a\u010c\u010e\u0110"+
		"\u0112\u0114\u0116\u0118\u011a\u011c\u011e\u0120\u0122\u0124\u0126\u0128"+
		"\u012a\u012c\u012e\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140"+
		"\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152\u0154\u0156\u0158"+
		"\u015a\u015c\u015e\u0160\u0162\u0164\u0166\u0168\u016a\u016c\u016e\u0170"+
		"\u0172\u0174\u0176\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188"+
		"\u018a\u018c\u018e\u0190\u0192\u0194\u0196\u0198\u019a\u019c\u019e\u01a0"+
		"\u01a2\u01a4\u01a6\u01a8\u01aa\u01ac\u01ae\u01b0\u01b2\u01b4\u01b6\u01b8"+
		"\u01ba\u01bc\u01be\u01c0\u01c2\u01c4\u01c6\u01c8\u01ca\u01cc\u01ce\u01d0"+
		"\u01d2\u01d4\u01d6\u01d8\u01da\u01dc\u01de\u01e0\u01e2\u01e4\u01e6\u01e8"+
		"\u01ea\u01ec\u01ee\u01f0\u01f2\u01f4\u01f6\u01f8\u01fa\u01fc\u01fe\u0200"+
		"\u0202\u0204\u0206\u0208\u020a\u020c\u020e\u0210\u0212\u0214\u0216\u0218"+
		"\u021a\u021c\u021e\u0220\u0222\u0224\u0226\u0228\u022a\u022c\u022e\u0230"+
		"\u0232\u0234\u0236\u0238\u023a\u023c\u023e\u0240\u0242\u0244\u0246\u0248"+
		"\u024a\u024c\u024e\u0250\u0252\u0254\u0256\u0258\u025a\u025c\u025e\u0260"+
		"\u0262\u0264\u0266\u0268\u026a\u026c\u026e\u0270\u0272\u0274\u0276\u0278"+
		"\u027a\u027c\u027e\u0280\u0282\u0284\u0286\u0288\u028a\u028c\u028e\u0290"+
		"\u0292\u0294\u0296\u0298\u029a\u029c\u029e\u02a0\u02a2\u02a4\u02a6\u02a8"+
		"\u02aa\u02ac\u02ae\u02b0\u02b2\u02b4\u02b6\u02b8\u02ba\u02bc\u02be\u02c0"+
		"\u02c2\u02c4\u02c6\u02c8\u02ca\u02cc\u02ce\u02d0\u02d2\u02d4\u02d6\u02d8"+
		"\u02da\u02dc\u02de\u02e0\u02e2\u02e4\u02e6\u02e8\u02ea\u02ec\u02ee\u02f0"+
		"\u02f2\u02f4\u02f6\u02f8\u02fa\u02fc\u02fe\u0300\u0302\u0304\u0306\u0308"+
		"\u030a\u030c\u030e\u0310\u0312\u0314\u0316\u0318\u031a\u031c\u031e\u0320"+
		"\u0322\u0324\u0326\u0328\u032a\u032c\u032e\u0330\u0332\u0334\u0336\u0338"+
		"\u033a\u033c\u033e\u0340\u0342\u0344\u0346\u0348\u034a\u034c\u034e\u0350"+
		"\u0352\u0354\u0356\u0358\u035a\u035c\u0000L\u0001\u0000\u021e\u021e\u0003"+
		"\u0000\u00ac\u00ac\u00b8\u00b8\u0117\u0117\u0002\u0000\u0001\u0001\u0178"+
		"\u0178\u0002\u0000mm\u00c2\u00c2\u0002\u0000jj\u021b\u021b\u0003\u0000"+
		"\t\txx\u00ea\u00ea\u0002\u0000\u0014\u0014\u00c3\u00c3\u0003\u0000[[\u0113"+
		"\u0113\u0175\u0175\u0002\u0000\u00de\u00de\u0114\u0114\u0002\u0000\u00e2"+
		"\u00e2\u017e\u017e\u0003\u0000\u0094\u0094\u00ba\u00ba\u011a\u011a\u0002"+
		"\u0000YYmm\u0001\u0000\u0122\u0123\u0001\u0001\u021e\u021e\u0002\u0000"+
		"\u0142\u0142\u0144\u0144\u0002\u0000\u010f\u010f\u01c0\u01c0\u0001\u0000"+
		"JK\u0002\u0000ll\u00ab\u00ab\u0002\u0000\u0103\u0103\u01b6\u01b6\u0002"+
		"\u0000\u001e\u001e\u00ab\u00ab\u0002\u0000,,oo\u0003\u0000\r\ruu\u01a1"+
		"\u01a1\u0002\u0000VV\u00ef\u00ef\u0003\u0000\u009e\u009e\u00cd\u00cd\u0148"+
		"\u0148\u0002\u0000\u0154\u0154\u018b\u018b\u0003\u0000\u0154\u0154\u0171"+
		"\u0171\u018b\u018b\u0002\u0000\u0089\u0089\u00ad\u00ad\u0002\u0000WW\u014a"+
		"\u014a\u0002\u0000\u00aa\u00aa\u00c8\u00c8\u0002\u0000\r\r\u01a6\u01a6"+
		"\u0002\u0000\u001c\u001c\u015e\u015e\u0002\u0000\u0015\u0015pp\u0002\u0000"+
		"\u0095\u0095\u00ca\u00ca\u0002\u0000\r\r\u0095\u0095\u0001\u0000\u0187"+
		"\u0188\u0003\u0000\r\r\u0012\u0012\u0172\u0172\u0004\u0000\u0005\u0006"+
		"\u021f\u0221\u0226\u0226\u0229\u0229\b\u0000\u0005\u0006\u0011\u0011\u0112"+
		"\u0112\u0215\u0217\u0219\u0219\u021f\u0221\u0226\u0227\u0229\u0229\u0002"+
		"\u0000\r\ruu\u0006\u0000TT\u01e4\u01e9\u01f7\u01f8\u01fb\u01fd\u0201\u0201"+
		"\u0204\u0204\u0002\u0000\u00e2\u00e2\u0181\u0181\u0001\u0000\u00d0\u00d3"+
		"\u0001\u0000\u0216\u0217\u0002\u0000\u0215\u0215\u0219\u0219\u0002\u0000"+
		"ii\u00af\u00af\u0004\u0000\r\r\u0012\u0012\u008c\u008c\u0172\u0172\u0002"+
		"\u000066\u01c4\u01c4\u0002\u0000uu\u01a1\u01a1\u0002\u000033DD\u0002\u0000"+
		"\u0096\u0096\u00cb\u00cb\u0002\u000088\u00f3\u00f3\u0003\u0000++\u00cc"+
		"\u00cc\u0195\u0195\u0002\u0000\u01c5\u01c5\u01c8\u01c8\u0002\u0000\u0082"+
		"\u0082\u00fc\u00fc\u0002\u0000\u0085\u0085\u00ed\u00ed\u0002\u0000MMv"+
		"v\u0002\u0000\u00a7\u00a7\u0167\u0167\u0001\u0000\u01f7\u0206\u0001\u0000"+
		"\u01f0\u01f6\u0001\u0000\u01ea\u01ef\u0002\u0000\u0131\u0131\u014d\u014d"+
		"\u0002\u0000\u0098\u0098\u012b\u012b\u0002\u0000\u0101\u0101\u0153\u0153"+
		"\u0002\u0000\u0116\u0116\u0176\u0176\u0003\u0000\u0091\u0091\u0185\u0185"+
		"\u01b7\u01b7\u0002\u0000BB\u0149\u0149\u0003\u0000BB\u00ff\u00ff\u0149"+
		"\u0149\u0002\u0000\u011f\u011f\u0182\u0182\u0002\u0000\u00aa\u00aa\u013e"+
		"\u013e\u0002\u0000``\u01d0\u01d0\u0002\u0000\u00eb\u00eb\u0156\u0156\u0002"+
		"\u0000//77\u0004\u0000``\u00a8\u00a8\u00e5\u00e5\u0156\u0156\u0001\u0000"+
		"\u020c\u020d\u0002\u0000\u0207\u0207\u020e\u020eN\u0000\b\f\u0010\u0010"+
		"\u0013\u0013\u0016\u001f\"%\'+--/02469;FITVWY^`fhikmqtvwy{~\u0080\u0082"+
		"\u0085\u0087\u0089\u008b\u008b\u008d\u0091\u0094\u0099\u009b\u009c\u009e"+
		"\u009f\u00a3\u00a4\u00a7\u00a8\u00aa\u00ab\u00ad\u00b0\u00b2\u00b8\u00ba"+
		"\u00bd\u00bf\u00bf\u00c1\u00c1\u00c4\u00cf\u00d1\u00d5\u00d7\u00e3\u00e5"+
		"\u00e7\u00e9\u00f8\u00fa\u00fc\u00ff\u00ff\u0101\u0101\u0105\u0109\u010b"+
		"\u010d\u010f\u0110\u0113\u0113\u0115\u0121\u0124\u0124\u0126\u012d\u0130"+
		"\u0133\u0135\u0146\u0148\u0154\u0156\u0156\u0159\u015a\u015c\u015c\u015e"+
		"\u0165\u0167\u016c\u016e\u016f\u0171\u0173\u0175\u0176\u0179\u0179\u017b"+
		"\u0186\u018a\u0192\u0195\u019a\u019c\u019f\u01a2\u01a2\u01a4\u01a4\u01a6"+
		"\u01a9\u01ab\u01ac\u01ae\u01b4\u01b6\u01b8\u01ba\u01ba\u01bc\u01bc\u01be"+
		"\u01d3\u01ea\u0206\u0231\u0231\u1813\u0000\u035f\u0001\u0000\u0000\u0000"+
		"\u0002\u0366\u0001\u0000\u0000\u0000\u0004\u036e\u0001\u0000\u0000\u0000"+
		"\u0006\u0379\u0001\u0000\u0000\u0000\b\u037b\u0001\u0000\u0000\u0000\n"+
		"\u0380\u0001\u0000\u0000\u0000\f\u0385\u0001\u0000\u0000\u0000\u000e\u03ae"+
		"\u0001\u0000\u0000\u0000\u0010\u03d8\u0001\u0000\u0000\u0000\u0012\u03dc"+
		"\u0001\u0000\u0000\u0000\u0014\u03de\u0001\u0000\u0000\u0000\u0016\u03e4"+
		"\u0001\u0000\u0000\u0000\u0018\u041c\u0001\u0000\u0000\u0000\u001a\u041e"+
		"\u0001\u0000\u0000\u0000\u001c\u0420\u0001\u0000\u0000\u0000\u001e\u0423"+
		"\u0001\u0000\u0000\u0000 \u042e\u0001\u0000\u0000\u0000\"\u0431\u0001"+
		"\u0000\u0000\u0000$\u043c\u0001\u0000\u0000\u0000&\u043f\u0001\u0000\u0000"+
		"\u0000(\u0446\u0001\u0000\u0000\u0000*\u0453\u0001\u0000\u0000\u0000,"+
		"\u0455\u0001\u0000\u0000\u0000.\u0457\u0001\u0000\u0000\u00000\u0459\u0001"+
		"\u0000\u0000\u00002\u045b\u0001\u0000\u0000\u00004\u0462\u0001\u0000\u0000"+
		"\u00006\u046a\u0001\u0000\u0000\u00008\u046c\u0001\u0000\u0000\u0000:"+
		"\u047b\u0001\u0000\u0000\u0000<\u0480\u0001\u0000\u0000\u0000>\u0485\u0001"+
		"\u0000\u0000\u0000@\u048a\u0001\u0000\u0000\u0000B\u0496\u0001\u0000\u0000"+
		"\u0000D\u0499\u0001\u0000\u0000\u0000F\u04a0\u0001\u0000\u0000\u0000H"+
		"\u04a8\u0001\u0000\u0000\u0000J\u04aa\u0001\u0000\u0000\u0000L\u04ac\u0001"+
		"\u0000\u0000\u0000N\u04b7\u0001\u0000\u0000\u0000P\u04bc\u0001\u0000\u0000"+
		"\u0000R\u04bf\u0001\u0000\u0000\u0000T\u04c3\u0001\u0000\u0000\u0000V"+
		"\u04ca\u0001\u0000\u0000\u0000X\u04d6\u0001\u0000\u0000\u0000Z\u04d9\u0001"+
		"\u0000\u0000\u0000\\\u04de\u0001\u0000\u0000\u0000^\u04ea\u0001\u0000"+
		"\u0000\u0000`\u04f5\u0001\u0000\u0000\u0000b\u04f7\u0001\u0000\u0000\u0000"+
		"d\u0506\u0001\u0000\u0000\u0000f\u050b\u0001\u0000\u0000\u0000h\u0512"+
		"\u0001\u0000\u0000\u0000j\u051d\u0001\u0000\u0000\u0000l\u051f\u0001\u0000"+
		"\u0000\u0000n\u0521\u0001\u0000\u0000\u0000p\u0528\u0001\u0000\u0000\u0000"+
		"r\u052a\u0001\u0000\u0000\u0000t\u0547\u0001\u0000\u0000\u0000v\u055a"+
		"\u0001\u0000\u0000\u0000x\u056b\u0001\u0000\u0000\u0000z\u0589\u0001\u0000"+
		"\u0000\u0000|\u0598\u0001\u0000\u0000\u0000~\u05a4\u0001\u0000\u0000\u0000"+
		"\u0080\u05a6\u0001\u0000\u0000\u0000\u0082\u05b6\u0001\u0000\u0000\u0000"+
		"\u0084\u05ba\u0001\u0000\u0000\u0000\u0086\u05c0\u0001\u0000\u0000\u0000"+
		"\u0088\u05c8\u0001\u0000\u0000\u0000\u008a\u05d6\u0001\u0000\u0000\u0000"+
		"\u008c\u05e1\u0001\u0000\u0000\u0000\u008e\u05eb\u0001\u0000\u0000\u0000"+
		"\u0090\u05ee\u0001\u0000\u0000\u0000\u0092\u05f5\u0001\u0000\u0000\u0000"+
		"\u0094\u05f7\u0001\u0000\u0000\u0000\u0096\u05f9\u0001\u0000\u0000\u0000"+
		"\u0098\u05fb\u0001\u0000\u0000\u0000\u009a\u05ff\u0001\u0000\u0000\u0000"+
		"\u009c\u060f\u0001\u0000\u0000\u0000\u009e\u0613\u0001\u0000\u0000\u0000"+
		"\u00a0\u062b\u0001\u0000\u0000\u0000\u00a2\u062e\u0001\u0000\u0000\u0000"+
		"\u00a4\u0634\u0001\u0000\u0000\u0000\u00a6\u063d\u0001\u0000\u0000\u0000"+
		"\u00a8\u0659\u0001\u0000\u0000\u0000\u00aa\u065f\u0001\u0000\u0000\u0000"+
		"\u00ac\u0662\u0001\u0000\u0000\u0000\u00ae\u0669\u0001\u0000\u0000\u0000"+
		"\u00b0\u0671\u0001\u0000\u0000\u0000\u00b2\u0680\u0001\u0000\u0000\u0000"+
		"\u00b4\u0682\u0001\u0000\u0000\u0000\u00b6\u0686\u0001\u0000\u0000\u0000"+
		"\u00b8\u068c\u0001\u0000\u0000\u0000\u00ba\u06a8\u0001\u0000\u0000\u0000"+
		"\u00bc\u06ca\u0001\u0000\u0000\u0000\u00be\u06fa\u0001\u0000\u0000\u0000"+
		"\u00c0\u0704\u0001\u0000\u0000\u0000\u00c2\u0706\u0001\u0000\u0000\u0000"+
		"\u00c4\u070b\u0001\u0000\u0000\u0000\u00c6\u0719\u0001\u0000\u0000\u0000"+
		"\u00c8\u071b\u0001\u0000\u0000\u0000\u00ca\u0720\u0001\u0000\u0000\u0000"+
		"\u00cc\u0730\u0001\u0000\u0000\u0000\u00ce\u0751\u0001\u0000\u0000\u0000"+
		"\u00d0\u0774\u0001\u0000\u0000\u0000\u00d2\u0778\u0001\u0000\u0000\u0000"+
		"\u00d4\u0787\u0001\u0000\u0000\u0000\u00d6\u0789\u0001\u0000\u0000\u0000"+
		"\u00d8\u078c\u0001\u0000\u0000\u0000\u00da\u07a8\u0001\u0000\u0000\u0000"+
		"\u00dc\u07aa\u0001\u0000\u0000\u0000\u00de\u07ae\u0001\u0000\u0000\u0000"+
		"\u00e0\u07b1\u0001\u0000\u0000\u0000\u00e2\u07b5\u0001\u0000\u0000\u0000"+
		"\u00e4\u07ba\u0001\u0000\u0000\u0000\u00e6\u07be\u0001\u0000\u0000\u0000"+
		"\u00e8\u07cf\u0001\u0000\u0000\u0000\u00ea\u07dc\u0001\u0000\u0000\u0000"+
		"\u00ec\u07ed\u0001\u0000\u0000\u0000\u00ee\u07f8\u0001\u0000\u0000\u0000"+
		"\u00f0\u07fa\u0001\u0000\u0000\u0000\u00f2\u0808\u0001\u0000\u0000\u0000"+
		"\u00f4\u0819\u0001\u0000\u0000\u0000\u00f6\u0832\u0001\u0000\u0000\u0000"+
		"\u00f8\u083c\u0001\u0000\u0000\u0000\u00fa\u0840\u0001\u0000\u0000\u0000"+
		"\u00fc\u0865\u0001\u0000\u0000\u0000\u00fe\u0867\u0001\u0000\u0000\u0000"+
		"\u0100\u0880\u0001\u0000\u0000\u0000\u0102\u088b\u0001\u0000\u0000\u0000"+
		"\u0104\u0892\u0001\u0000\u0000\u0000\u0106\u0896\u0001\u0000\u0000\u0000"+
		"\u0108\u08a8\u0001\u0000\u0000\u0000\u010a\u08b0\u0001\u0000\u0000\u0000"+
		"\u010c\u08bb\u0001\u0000\u0000\u0000\u010e\u08c2\u0001\u0000\u0000\u0000"+
		"\u0110\u08c6\u0001\u0000\u0000\u0000\u0112\u08e3\u0001\u0000\u0000\u0000"+
		"\u0114\u08e7\u0001\u0000\u0000\u0000\u0116\u08ec\u0001\u0000\u0000\u0000"+
		"\u0118\u08f4\u0001\u0000\u0000\u0000\u011a\u08fc\u0001\u0000\u0000\u0000"+
		"\u011c\u08ff\u0001\u0000\u0000\u0000\u011e\u090f\u0001\u0000\u0000\u0000"+
		"\u0120\u0914\u0001\u0000\u0000\u0000\u0122\u0918\u0001\u0000\u0000\u0000"+
		"\u0124\u093c\u0001\u0000\u0000\u0000\u0126\u093e\u0001\u0000\u0000\u0000"+
		"\u0128\u0954\u0001\u0000\u0000\u0000\u012a\u0956\u0001\u0000\u0000\u0000"+
		"\u012c\u095b\u0001\u0000\u0000\u0000\u012e\u095d\u0001\u0000\u0000\u0000"+
		"\u0130\u095f\u0001\u0000\u0000\u0000\u0132\u0961\u0001\u0000\u0000\u0000"+
		"\u0134\u096b\u0001\u0000\u0000\u0000\u0136\u096e\u0001\u0000\u0000\u0000"+
		"\u0138\u0974\u0001\u0000\u0000\u0000\u013a\u097d\u0001\u0000\u0000\u0000"+
		"\u013c\u0983\u0001\u0000\u0000\u0000\u013e\u0997\u0001\u0000\u0000\u0000"+
		"\u0140\u099c\u0001\u0000\u0000\u0000\u0142\u09a9\u0001\u0000\u0000\u0000"+
		"\u0144\u09ab\u0001\u0000\u0000\u0000\u0146\u09b9\u0001\u0000\u0000\u0000"+
		"\u0148\u09c5\u0001\u0000\u0000\u0000\u014a\u09cb\u0001\u0000\u0000\u0000"+
		"\u014c\u09cd\u0001\u0000\u0000\u0000\u014e\u09d0\u0001\u0000\u0000\u0000"+
		"\u0150\u09d5\u0001\u0000\u0000\u0000\u0152\u09ed\u0001\u0000\u0000\u0000"+
		"\u0154\u09fc\u0001\u0000\u0000\u0000\u0156\u09fe\u0001\u0000\u0000\u0000"+
		"\u0158\u0a13\u0001\u0000\u0000\u0000\u015a\u0a22\u0001\u0000\u0000\u0000"+
		"\u015c\u0a38\u0001\u0000\u0000\u0000\u015e\u0a3f\u0001\u0000\u0000\u0000"+
		"\u0160\u0a4c\u0001\u0000\u0000\u0000\u0162\u0a4f\u0001\u0000\u0000\u0000"+
		"\u0164\u0a64\u0001\u0000\u0000\u0000\u0166\u0a6e\u0001\u0000\u0000\u0000"+
		"\u0168\u0a77\u0001\u0000\u0000\u0000\u016a\u0a92\u0001\u0000\u0000\u0000"+
		"\u016c\u0abd\u0001\u0000\u0000\u0000\u016e\u0acd\u0001\u0000\u0000\u0000"+
		"\u0170\u0ada\u0001\u0000\u0000\u0000\u0172\u0ae3\u0001\u0000\u0000\u0000"+
		"\u0174\u0ae5\u0001\u0000\u0000\u0000\u0176\u0b04\u0001\u0000\u0000\u0000"+
		"\u0178\u0b08\u0001\u0000\u0000\u0000\u017a\u0b11\u0001\u0000\u0000\u0000"+
		"\u017c\u0b13\u0001\u0000\u0000\u0000\u017e\u0b1b\u0001\u0000\u0000\u0000"+
		"\u0180\u0b57\u0001\u0000\u0000\u0000\u0182\u0b5a\u0001\u0000\u0000\u0000"+
		"\u0184\u0b6f\u0001\u0000\u0000\u0000\u0186\u0b72\u0001\u0000\u0000\u0000"+
		"\u0188\u0b7e\u0001\u0000\u0000\u0000\u018a\u0b82\u0001\u0000\u0000\u0000"+
		"\u018c\u0b9b\u0001\u0000\u0000\u0000\u018e\u0b9d\u0001\u0000\u0000\u0000"+
		"\u0190\u0bae\u0001\u0000\u0000\u0000\u0192\u0bb5\u0001\u0000\u0000\u0000"+
		"\u0194\u0bc4\u0001\u0000\u0000\u0000\u0196\u0bdb\u0001\u0000\u0000\u0000"+
		"\u0198\u0be1\u0001\u0000\u0000\u0000\u019a\u0be3\u0001\u0000\u0000\u0000"+
		"\u019c\u0bfb\u0001\u0000\u0000\u0000\u019e\u0c13\u0001\u0000\u0000\u0000"+
		"\u01a0\u0c37\u0001\u0000\u0000\u0000\u01a2\u0c39\u0001\u0000\u0000\u0000"+
		"\u01a4\u0c57\u0001\u0000\u0000\u0000\u01a6\u0c5c\u0001\u0000\u0000\u0000"+
		"\u01a8\u0c5e\u0001\u0000\u0000\u0000\u01aa\u0c6a\u0001\u0000\u0000\u0000"+
		"\u01ac\u0c7a\u0001\u0000\u0000\u0000\u01ae\u0c7c\u0001\u0000\u0000\u0000"+
		"\u01b0\u0c7f\u0001\u0000\u0000\u0000\u01b2\u0c99\u0001\u0000\u0000\u0000"+
		"\u01b4\u0c9b\u0001\u0000\u0000\u0000\u01b6\u0c9f\u0001\u0000\u0000\u0000"+
		"\u01b8\u0cae\u0001\u0000\u0000\u0000\u01ba\u0cba\u0001\u0000\u0000\u0000"+
		"\u01bc\u0cc2\u0001\u0000\u0000\u0000\u01be\u0cc6\u0001\u0000\u0000\u0000"+
		"\u01c0\u0cd1\u0001\u0000\u0000\u0000\u01c2\u0cd6\u0001\u0000\u0000\u0000"+
		"\u01c4\u0ce3\u0001\u0000\u0000\u0000\u01c6\u0cf7\u0001\u0000\u0000\u0000"+
		"\u01c8\u0d00\u0001\u0000\u0000\u0000\u01ca\u0d02\u0001\u0000\u0000\u0000"+
		"\u01cc\u0d09\u0001\u0000\u0000\u0000\u01ce\u0d0e\u0001\u0000\u0000\u0000"+
		"\u01d0\u0d1b\u0001\u0000\u0000\u0000\u01d2\u0d23\u0001\u0000\u0000\u0000"+
		"\u01d4\u0d2b\u0001\u0000\u0000\u0000\u01d6\u0d39\u0001\u0000\u0000\u0000"+
		"\u01d8\u0d3b\u0001\u0000\u0000\u0000\u01da\u0d47\u0001\u0000\u0000\u0000"+
		"\u01dc\u0d6a\u0001\u0000\u0000\u0000\u01de\u0d6c\u0001\u0000\u0000\u0000"+
		"\u01e0\u0d7a\u0001\u0000\u0000\u0000\u01e2\u0d7f\u0001\u0000\u0000\u0000"+
		"\u01e4\u0d87\u0001\u0000\u0000\u0000\u01e6\u0d90\u0001\u0000\u0000\u0000"+
		"\u01e8\u0d92\u0001\u0000\u0000\u0000\u01ea\u0da4\u0001\u0000\u0000\u0000"+
		"\u01ec\u0da8\u0001\u0000\u0000\u0000\u01ee\u0db0\u0001\u0000\u0000\u0000"+
		"\u01f0\u0dba\u0001\u0000\u0000\u0000\u01f2\u0dc2\u0001\u0000\u0000\u0000"+
		"\u01f4\u0dc8\u0001\u0000\u0000\u0000\u01f6\u0dd7\u0001\u0000\u0000\u0000"+
		"\u01f8\u0dda\u0001\u0000\u0000\u0000\u01fa\u0df3\u0001\u0000\u0000\u0000"+
		"\u01fc\u0e06\u0001\u0000\u0000\u0000\u01fe\u0e0a\u0001\u0000\u0000\u0000"+
		"\u0200\u0e0d\u0001\u0000\u0000\u0000\u0202\u0e29\u0001\u0000\u0000\u0000"+
		"\u0204\u0e2e\u0001\u0000\u0000\u0000\u0206\u0e41\u0001\u0000\u0000\u0000"+
		"\u0208\u0e43\u0001\u0000\u0000\u0000\u020a\u0e53\u0001\u0000\u0000\u0000"+
		"\u020c\u0e5b\u0001\u0000\u0000\u0000\u020e\u0e60\u0001\u0000\u0000\u0000"+
		"\u0210\u0e6b\u0001\u0000\u0000\u0000\u0212\u0e76\u0001\u0000\u0000\u0000"+
		"\u0214\u0e79\u0001\u0000\u0000\u0000\u0216\u0e8b\u0001\u0000\u0000\u0000"+
		"\u0218\u0e8d\u0001\u0000\u0000\u0000\u021a\u0e9c\u0001\u0000\u0000\u0000"+
		"\u021c\u0ea7\u0001\u0000\u0000\u0000\u021e\u0eb5\u0001\u0000\u0000\u0000"+
		"\u0220\u0eba\u0001\u0000\u0000\u0000\u0222\u0ebf\u0001\u0000\u0000\u0000"+
		"\u0224\u0ecc\u0001\u0000\u0000\u0000\u0226\u0ece\u0001\u0000\u0000\u0000"+
		"\u0228\u0ed8\u0001\u0000\u0000\u0000\u022a\u0eeb\u0001\u0000\u0000\u0000"+
		"\u022c\u0eed\u0001\u0000\u0000\u0000\u022e\u0ef6\u0001\u0000\u0000\u0000"+
		"\u0230\u0ef8\u0001\u0000\u0000\u0000\u0232\u0f01\u0001\u0000\u0000\u0000"+
		"\u0234\u0f0b\u0001\u0000\u0000\u0000\u0236\u0f12\u0001\u0000\u0000\u0000"+
		"\u0238\u0f1c\u0001\u0000\u0000\u0000\u023a\u0f23\u0001\u0000\u0000\u0000"+
		"\u023c\u0f41\u0001\u0000\u0000\u0000\u023e\u0f4c\u0001\u0000\u0000\u0000"+
		"\u0240\u0f4e\u0001\u0000\u0000\u0000\u0242\u0f52\u0001\u0000\u0000\u0000"+
		"\u0244\u0f54\u0001\u0000\u0000\u0000\u0246\u0f6a\u0001\u0000\u0000\u0000"+
		"\u0248\u0f7f\u0001\u0000\u0000\u0000\u024a\u0fa9\u0001\u0000\u0000\u0000"+
		"\u024c\u0fab\u0001\u0000\u0000\u0000\u024e\u0faf\u0001\u0000\u0000\u0000"+
		"\u0250\u0fb1\u0001\u0000\u0000\u0000\u0252\u0fc6\u0001\u0000\u0000\u0000"+
		"\u0254\u0fc8\u0001\u0000\u0000\u0000\u0256\u0fca\u0001\u0000\u0000\u0000"+
		"\u0258\u0fd5\u0001\u0000\u0000\u0000\u025a\u0fd7\u0001\u0000\u0000\u0000"+
		"\u025c\u0ffc\u0001\u0000\u0000\u0000\u025e\u1005\u0001\u0000\u0000\u0000"+
		"\u0260\u1007\u0001\u0000\u0000\u0000\u0262\u1016\u0001\u0000\u0000\u0000"+
		"\u0264\u1018\u0001\u0000\u0000\u0000\u0266\u1029\u0001\u0000\u0000\u0000"+
		"\u0268\u102b\u0001\u0000\u0000\u0000\u026a\u1040\u0001\u0000\u0000\u0000"+
		"\u026c\u1042\u0001\u0000\u0000\u0000\u026e\u1046\u0001\u0000\u0000\u0000"+
		"\u0270\u104f\u0001\u0000\u0000\u0000\u0272\u1051\u0001\u0000\u0000\u0000"+
		"\u0274\u1059\u0001\u0000\u0000\u0000\u0276\u1061\u0001\u0000\u0000\u0000"+
		"\u0278\u1084\u0001\u0000\u0000\u0000\u027a\u1086\u0001\u0000\u0000\u0000"+
		"\u027c\u10a4\u0001\u0000\u0000\u0000\u027e\u10a6\u0001\u0000\u0000\u0000"+
		"\u0280\u10b6\u0001\u0000\u0000\u0000\u0282\u10b9\u0001\u0000\u0000\u0000"+
		"\u0284\u10bb\u0001\u0000\u0000\u0000\u0286\u10ea\u0001\u0000\u0000\u0000"+
		"\u0288\u10ee\u0001\u0000\u0000\u0000\u028a\u10f1\u0001\u0000\u0000\u0000"+
		"\u028c\u1104\u0001\u0000\u0000\u0000\u028e\u110c\u0001\u0000\u0000\u0000"+
		"\u0290\u111e\u0001\u0000\u0000\u0000\u0292\u1125\u0001\u0000\u0000\u0000"+
		"\u0294\u113e\u0001\u0000\u0000\u0000\u0296\u1140\u0001\u0000\u0000\u0000"+
		"\u0298\u1144\u0001\u0000\u0000\u0000\u029a\u114d\u0001\u0000\u0000\u0000"+
		"\u029c\u1292\u0001\u0000\u0000\u0000\u029e\u1294\u0001\u0000\u0000\u0000"+
		"\u02a0\u1296\u0001\u0000\u0000\u0000\u02a2\u1298\u0001\u0000\u0000\u0000"+
		"\u02a4\u129a\u0001\u0000\u0000\u0000\u02a6\u12a7\u0001\u0000\u0000\u0000"+
		"\u02a8\u12b0\u0001\u0000\u0000\u0000\u02aa\u12b9\u0001\u0000\u0000\u0000"+
		"\u02ac\u12bb\u0001\u0000\u0000\u0000\u02ae\u12cc\u0001\u0000\u0000\u0000"+
		"\u02b0\u12d2\u0001\u0000\u0000\u0000\u02b2\u12dd\u0001\u0000\u0000\u0000"+
		"\u02b4\u12df\u0001\u0000\u0000\u0000\u02b6\u12f3\u0001\u0000\u0000\u0000"+
		"\u02b8\u1301\u0001\u0000\u0000\u0000\u02ba\u1313\u0001\u0000\u0000\u0000"+
		"\u02bc\u1328\u0001\u0000\u0000\u0000\u02be\u1335\u0001\u0000\u0000\u0000"+
		"\u02c0\u1338\u0001\u0000\u0000\u0000\u02c2\u1341\u0001\u0000\u0000\u0000"+
		"\u02c4\u1347\u0001\u0000\u0000\u0000\u02c6\u134f\u0001\u0000\u0000\u0000"+
		"\u02c8\u1352\u0001\u0000\u0000\u0000\u02ca\u135d\u0001\u0000\u0000\u0000"+
		"\u02cc\u1364\u0001\u0000\u0000\u0000\u02ce\u1369\u0001\u0000\u0000\u0000"+
		"\u02d0\u1372\u0001\u0000\u0000\u0000\u02d2\u137b\u0001\u0000\u0000\u0000"+
		"\u02d4\u137d\u0001\u0000\u0000\u0000\u02d6\u137f\u0001\u0000\u0000\u0000"+
		"\u02d8\u138d\u0001\u0000\u0000\u0000\u02da\u1391\u0001\u0000\u0000\u0000"+
		"\u02dc\u1393\u0001\u0000\u0000\u0000\u02de\u1395\u0001\u0000\u0000\u0000"+
		"\u02e0\u139a\u0001\u0000\u0000\u0000\u02e2\u13b2\u0001\u0000\u0000\u0000"+
		"\u02e4\u13b6\u0001\u0000\u0000\u0000\u02e6\u13b8\u0001\u0000\u0000\u0000"+
		"\u02e8\u13ba\u0001\u0000\u0000\u0000\u02ea\u13bc\u0001\u0000\u0000\u0000"+
		"\u02ec\u13be\u0001\u0000\u0000\u0000\u02ee\u13c0\u0001\u0000\u0000\u0000"+
		"\u02f0\u13c2\u0001\u0000\u0000\u0000\u02f2\u13c4\u0001\u0000\u0000\u0000"+
		"\u02f4\u13d0\u0001\u0000\u0000\u0000\u02f6\u13d2\u0001\u0000\u0000\u0000"+
		"\u02f8\u13d7\u0001\u0000\u0000\u0000\u02fa\u13d9\u0001\u0000\u0000\u0000"+
		"\u02fc\u13db\u0001\u0000\u0000\u0000\u02fe\u13e3\u0001\u0000\u0000\u0000"+
		"\u0300\u13e5\u0001\u0000\u0000\u0000\u0302\u13f1\u0001\u0000\u0000\u0000"+
		"\u0304\u13f3\u0001\u0000\u0000\u0000\u0306\u13fb\u0001\u0000\u0000\u0000"+
		"\u0308\u1403\u0001\u0000\u0000\u0000\u030a\u140b\u0001\u0000\u0000\u0000"+
		"\u030c\u1413\u0001\u0000\u0000\u0000\u030e\u1417\u0001\u0000\u0000\u0000"+
		"\u0310\u1426\u0001\u0000\u0000\u0000\u0312\u1428\u0001\u0000\u0000\u0000"+
		"\u0314\u142c\u0001\u0000\u0000\u0000\u0316\u1430\u0001\u0000\u0000\u0000"+
		"\u0318\u1432\u0001\u0000\u0000\u0000\u031a\u1437\u0001\u0000\u0000\u0000"+
		"\u031c\u1439\u0001\u0000\u0000\u0000\u031e\u1441\u0001\u0000\u0000\u0000"+
		"\u0320\u144b\u0001\u0000\u0000\u0000\u0322\u1453\u0001\u0000\u0000\u0000"+
		"\u0324\u145c\u0001\u0000\u0000\u0000\u0326\u146b\u0001\u0000\u0000\u0000"+
		"\u0328\u1480\u0001\u0000\u0000\u0000\u032a\u14aa\u0001\u0000\u0000\u0000"+
		"\u032c\u14b1\u0001\u0000\u0000\u0000\u032e\u14bd\u0001\u0000\u0000\u0000"+
		"\u0330\u14db\u0001\u0000\u0000\u0000\u0332\u14dd\u0001\u0000\u0000\u0000"+
		"\u0334\u1526\u0001\u0000\u0000\u0000\u0336\u1542\u0001\u0000\u0000\u0000"+
		"\u0338\u1544\u0001\u0000\u0000\u0000\u033a\u1547\u0001\u0000\u0000\u0000"+
		"\u033c\u1549\u0001\u0000\u0000\u0000\u033e\u154c\u0001\u0000\u0000\u0000"+
		"\u0340\u154e\u0001\u0000\u0000\u0000\u0342\u1558\u0001\u0000\u0000\u0000"+
		"\u0344\u1567\u0001\u0000\u0000\u0000\u0346\u15af\u0001\u0000\u0000\u0000"+
		"\u0348\u15b1\u0001\u0000\u0000\u0000\u034a\u15b3\u0001\u0000\u0000\u0000"+
		"\u034c\u15b6\u0001\u0000\u0000\u0000\u034e\u15ba\u0001\u0000\u0000\u0000"+
		"\u0350\u15c0\u0001\u0000\u0000\u0000\u0352\u15c9\u0001\u0000\u0000\u0000"+
		"\u0354\u15ce\u0001\u0000\u0000\u0000\u0356\u15d3\u0001\u0000\u0000\u0000"+
		"\u0358\u15d8\u0001\u0000\u0000\u0000\u035a\u15da\u0001\u0000\u0000\u0000"+
		"\u035c\u15de\u0001\u0000\u0000\u0000\u035e\u0360\b\u0000\u0000\u0000\u035f"+
		"\u035e\u0001\u0000\u0000\u0000\u0360\u0361\u0001\u0000\u0000\u0000\u0361"+
		"\u035f\u0001\u0000\u0000\u0000\u0361\u0362\u0001\u0000\u0000\u0000\u0362"+
		"\u0001\u0001\u0000\u0000\u0000\u0363\u0365\u0003\u0006\u0003\u0000\u0364"+
		"\u0363\u0001\u0000\u0000\u0000\u0365\u0368\u0001\u0000\u0000\u0000\u0366"+
		"\u0364\u0001\u0000\u0000\u0000\u0366\u0367\u0001\u0000\u0000\u0000\u0367"+
		"\u0369\u0001\u0000\u0000\u0000\u0368\u0366\u0001\u0000\u0000\u0000\u0369"+
		"\u036a\u0005\u0000\u0000\u0001\u036a\u0003\u0001\u0000\u0000\u0000\u036b"+
		"\u036d\u0003\u0006\u0003\u0000\u036c\u036b\u0001\u0000\u0000\u0000\u036d"+
		"\u0370\u0001\u0000\u0000\u0000\u036e\u036c\u0001\u0000\u0000\u0000\u036e"+
		"\u036f\u0001\u0000\u0000\u0000\u036f\u0371\u0001\u0000\u0000\u0000\u0370"+
		"\u036e\u0001\u0000\u0000\u0000\u0371\u0372\u0005\u0000\u0000\u0001\u0372"+
		"\u0005\u0001\u0000\u0000\u0000\u0373\u037a\u0003\b\u0004\u0000\u0374\u037a"+
		"\u0003\u000e\u0007\u0000\u0375\u037a\u0003\f\u0006\u0000\u0376\u037a\u0003"+
		"\u00d8l\u0000\u0377\u037a\u0003\n\u0005\u0000\u0378\u037a\u0003\u0148"+
		"\u00a4\u0000\u0379\u0373\u0001\u0000\u0000\u0000\u0379\u0374\u0001\u0000"+
		"\u0000\u0000\u0379\u0375\u0001\u0000\u0000\u0000\u0379\u0376\u0001\u0000"+
		"\u0000\u0000\u0379\u0377\u0001\u0000\u0000\u0000\u0379\u0378\u0001\u0000"+
		"\u0000\u0000\u037a\u0007\u0001\u0000\u0000\u0000\u037b\u037c\u0005\u0163"+
		"\u0000\u0000\u037c\u037d\u0005\u0152\u0000\u0000\u037d\u037e\u0003\u02f0"+
		"\u0178\u0000\u037e\u037f\u0005\u021e\u0000\u0000\u037f\t\u0001\u0000\u0000"+
		"\u0000\u0380\u0381\u0005x\u0000\u0000\u0381\u0382\u0005\u012f\u0000\u0000"+
		"\u0382\u0383\u0003\u030c\u0186\u0000\u0383\u0384\u0005\u021e\u0000\u0000"+
		"\u0384\u000b\u0001\u0000\u0000\u0000\u0385\u0386\u0005U\u0000\u0000\u0386"+
		"\u0387\u0005\u012f\u0000\u0000\u0387\u0389\u0003\u030c\u0186\u0000\u0388"+
		"\u038a\u0003(\u0014\u0000\u0389\u0388\u0001\u0000\u0000\u0000\u0389\u038a"+
		"\u0001\u0000\u0000\u0000\u038a\u038d\u0001\u0000\u0000\u0000\u038b\u038c"+
		"\u0005\u00c9\u0000\u0000\u038c\u038e\u0003*\u0015\u0000\u038d\u038b\u0001"+
		"\u0000\u0000\u0000\u038d\u038e\u0001\u0000\u0000\u0000\u038e\u0392\u0001"+
		"\u0000\u0000\u0000\u038f\u0390\u0005\u0174\u0000\u0000\u0390\u0391\u0005"+
		"\u0158\u0000\u0000\u0391\u0393\u0003,\u0016\u0000\u0392\u038f\u0001\u0000"+
		"\u0000\u0000\u0392\u0393\u0001\u0000\u0000\u0000\u0393\u0397\u0001\u0000"+
		"\u0000\u0000\u0394\u0395\u0005j\u0000\u0000\u0395\u0396\u0005\u0152\u0000"+
		"\u0000\u0396\u0398\u0003.\u0017\u0000\u0397\u0394\u0001\u0000\u0000\u0000"+
		"\u0397\u0398\u0001\u0000\u0000\u0000\u0398\u03a2\u0001\u0000\u0000\u0000"+
		"\u0399\u039a\u0005\u0134\u0000\u0000\u039a\u039b\u0005\u0174\u0000\u0000"+
		"\u039b\u03a0\u0005]\u0000\u0000\u039c\u039d\u0005\u01bd\u0000\u0000\u039d"+
		"\u039e\u0005\u0140\u0000\u0000\u039e\u039f\u0005\u01b5\u0000\u0000\u039f"+
		"\u03a1\u00030\u0018\u0000\u03a0\u039c\u0001\u0000\u0000\u0000\u03a0\u03a1"+
		"\u0001\u0000\u0000\u0000\u03a1\u03a3\u0001\u0000\u0000\u0000\u03a2\u0399"+
		"\u0001\u0000\u0000\u0000\u03a2\u03a3\u0001\u0000\u0000\u0000\u03a3\u03a4"+
		"\u0001\u0000\u0000\u0000\u03a4\u03a5\u0005\u0014\u0000\u0000\u03a5\u03a8"+
		"\u0005 \u0000\u0000\u03a6\u03a7\u0005\u015e\u0000\u0000\u03a7\u03a9\u0005"+
		"\u01d7\u0000\u0000\u03a8\u03a6\u0001\u0000\u0000\u0000\u03a8\u03a9\u0001"+
		"\u0000\u0000\u0000\u03a9\u03aa\u0001\u0000\u0000\u0000\u03aa\u03ab\u0003"+
		"\u0090H\u0000\u03ab\u03ac\u0005\u0081\u0000\u0000\u03ac\u03ad\u0005\u021e"+
		"\u0000\u0000\u03ad\r\u0001\u0000\u0000\u0000\u03ae\u03af\u0005\u009f\u0000"+
		"\u0000\u03af\u03b1\u0003\u030c\u0186\u0000\u03b0\u03b2\u0003(\u0014\u0000"+
		"\u03b1\u03b0\u0001\u0000\u0000\u0000\u03b1\u03b2\u0001\u0000\u0000\u0000"+
		"\u03b2\u03b3\u0001\u0000\u0000\u0000\u03b3\u03b4\u0005\u0143\u0000\u0000"+
		"\u03b4\u03b7\u0003\u0012\t\u0000\u03b5\u03b6\u0005\u00c9\u0000\u0000\u03b6"+
		"\u03b8\u0003*\u0015\u0000\u03b7\u03b5\u0001\u0000\u0000\u0000\u03b7\u03b8"+
		"\u0001\u0000\u0000\u0000\u03b8\u03bc\u0001\u0000\u0000\u0000\u03b9\u03ba"+
		"\u0005\u0174\u0000\u0000\u03ba\u03bb\u0005\u0158\u0000\u0000\u03bb\u03bd"+
		"\u0003,\u0016\u0000\u03bc\u03b9\u0001\u0000\u0000\u0000\u03bc\u03bd\u0001"+
		"\u0000\u0000\u0000\u03bd\u03c1\u0001\u0000\u0000\u0000\u03be\u03bf\u0005"+
		"j\u0000\u0000\u03bf\u03c0\u0005\u0152\u0000\u0000\u03c0\u03c2\u0003.\u0017"+
		"\u0000\u03c1\u03be\u0001\u0000\u0000\u0000\u03c1\u03c2\u0001\u0000\u0000"+
		"\u0000\u03c2\u03cc\u0001\u0000\u0000\u0000\u03c3\u03c4\u0005\u0134\u0000"+
		"\u0000\u03c4\u03c5\u0005\u0174\u0000\u0000\u03c5\u03ca\u0005]\u0000\u0000"+
		"\u03c6\u03c7\u0005\u01bd\u0000\u0000\u03c7\u03c8\u0005\u0140\u0000\u0000"+
		"\u03c8\u03c9\u0005\u01b5\u0000\u0000\u03c9\u03cb\u00030\u0018\u0000\u03ca"+
		"\u03c6\u0001\u0000\u0000\u0000\u03ca\u03cb\u0001\u0000\u0000\u0000\u03cb"+
		"\u03cd\u0001\u0000\u0000\u0000\u03cc\u03c3\u0001\u0000\u0000\u0000\u03cc"+
		"\u03cd\u0001\u0000\u0000\u0000\u03cd\u03ce\u0001\u0000\u0000\u0000\u03ce"+
		"\u03cf\u0005\u0014\u0000\u0000\u03cf\u03d2\u0005 \u0000\u0000\u03d0\u03d1"+
		"\u0005\u015e\u0000\u0000\u03d1\u03d3\u0005\u01d7\u0000\u0000\u03d2\u03d0"+
		"\u0001\u0000\u0000\u0000\u03d2\u03d3\u0001\u0000\u0000\u0000\u03d3\u03d4"+
		"\u0001\u0000\u0000\u0000\u03d4\u03d5\u0003\u0090H\u0000\u03d5\u03d6\u0005"+
		"\u0081\u0000\u0000\u03d6\u03d7\u0005\u021e\u0000\u0000\u03d7\u000f\u0001"+
		"\u0000\u0000\u0000\u03d8\u03d9\u0003\u0350\u01a8\u0000\u03d9\u0011\u0001"+
		"\u0000\u0000\u0000\u03da\u03dd\u0003\u008aE\u0000\u03db\u03dd\u0003\u0014"+
		"\n\u0000\u03dc\u03da\u0001\u0000\u0000\u0000\u03dc\u03db\u0001\u0000\u0000"+
		"\u0000\u03dd\u0013\u0001\u0000\u0000\u0000\u03de\u03df\u0005\u0187\u0000"+
		"\u0000\u03df\u03e0\u0003\u001e\u000f\u0000\u03e0\u0015\u0001\u0000\u0000"+
		"\u0000\u03e1\u03e5\u0003\u0018\f\u0000\u03e2\u03e5\u0003\u001a\r\u0000"+
		"\u03e3\u03e5\u0003\u001c\u000e\u0000\u03e4\u03e1\u0001\u0000\u0000\u0000"+
		"\u03e4\u03e2\u0001\u0000\u0000\u0000\u03e4\u03e3\u0001\u0000\u0000\u0000"+
		"\u03e5\u0017\u0001\u0000\u0000\u0000\u03e6\u041d\u0005_\u0000\u0000\u03e7"+
		"\u041d\u0005\u018a\u0000\u0000\u03e8\u041d\u0005\u018b\u0000\u0000\u03e9"+
		"\u041d\u0005\u0157\u0000\u0000\u03ea\u041d\u0005\u0193\u0000\u0000\u03eb"+
		"\u041d\u0005\u016f\u0000\u0000\u03ec\u041d\u0005\u00bd\u0000\u0000\u03ed"+
		"\u041d\u0005\u00bc\u0000\u0000\u03ee\u041d\u0005&\u0000\u0000\u03ef\u03f8"+
		"\u0005f\u0000\u0000\u03f0\u03f1\u0005\u0212\u0000\u0000\u03f1\u03f4\u0003"+
		"\u0348\u01a4\u0000\u03f2\u03f3\u0005\u0218\u0000\u0000\u03f3\u03f5\u0003"+
		"\u0348\u01a4\u0000\u03f4\u03f2\u0001\u0000\u0000\u0000\u03f4\u03f5\u0001"+
		"\u0000\u0000\u0000\u03f5\u03f6\u0001\u0000\u0000\u0000\u03f6\u03f7\u0005"+
		"\u0213\u0000\u0000\u03f7\u03f9\u0001\u0000\u0000\u0000\u03f8\u03f0\u0001"+
		"\u0000\u0000\u0000\u03f8\u03f9\u0001\u0000\u0000\u0000\u03f9\u041d\u0001"+
		"\u0000\u0000\u0000\u03fa\u041d\u0005\u0170\u0000\u0000\u03fb\u041d\u0005"+
		"\u0135\u0000\u0000\u03fc\u041d\u0005w\u0000\u0000\u03fd\u0402\u0005\u01ae"+
		"\u0000\u0000\u03fe\u03ff\u0005\u0212\u0000\u0000\u03ff\u0400\u0003\u0348"+
		"\u01a4\u0000\u0400\u0401\u0005\u0213\u0000\u0000\u0401\u0403\u0001\u0000"+
		"\u0000\u0000\u0402\u03fe\u0001\u0000\u0000\u0000\u0402\u0403\u0001\u0000"+
		"\u0000\u0000\u0403\u041d\u0001\u0000\u0000\u0000\u0404\u0409\u0005\u0108"+
		"\u0000\u0000\u0405\u0406\u0005\u0212\u0000\u0000\u0406\u0407\u0003\u0348"+
		"\u01a4\u0000\u0407\u0408\u0005\u0213\u0000\u0000\u0408\u040a\u0001\u0000"+
		"\u0000\u0000\u0409\u0405\u0001\u0000\u0000\u0000\u0409\u040a\u0001\u0000"+
		"\u0000\u0000\u040a\u041d\u0001\u0000\u0000\u0000\u040b\u0410\u0005\u000f"+
		"\u0000\u0000\u040c\u040d\u0005\u0212\u0000\u0000\u040d\u040e\u0003\u0348"+
		"\u01a4\u0000\u040e\u040f\u0005\u0213\u0000\u0000\u040f\u0411\u0001\u0000"+
		"\u0000\u0000\u0410\u040c\u0001\u0000\u0000\u0000\u0410\u0411\u0001\u0000"+
		"\u0000\u0000\u0411\u041d\u0001\u0000\u0000\u0000\u0412\u0417\u0005\u01e2"+
		"\u0000\u0000\u0413\u0414\u0005\u0212\u0000\u0000\u0414\u0415\u0003\u0348"+
		"\u01a4\u0000\u0415\u0416\u0005\u0213\u0000\u0000\u0416\u0418\u0001\u0000"+
		"\u0000\u0000\u0417\u0413\u0001\u0000\u0000\u0000\u0417\u0418\u0001\u0000"+
		"\u0000\u0000\u0418\u041d\u0001\u0000\u0000\u0000\u0419\u041d\u0005\'\u0000"+
		"\u0000\u041a\u041d\u0005<\u0000\u0000\u041b\u041d\u0005\u00f4\u0000\u0000"+
		"\u041c\u03e6\u0001\u0000\u0000\u0000\u041c\u03e7\u0001\u0000\u0000\u0000"+
		"\u041c\u03e8\u0001\u0000\u0000\u0000\u041c\u03e9\u0001\u0000\u0000\u0000"+
		"\u041c\u03ea\u0001\u0000\u0000\u0000\u041c\u03eb\u0001\u0000\u0000\u0000"+
		"\u041c\u03ec\u0001\u0000\u0000\u0000\u041c\u03ed\u0001\u0000\u0000\u0000"+
		"\u041c\u03ee\u0001\u0000\u0000\u0000\u041c\u03ef\u0001\u0000\u0000\u0000"+
		"\u041c\u03fa\u0001\u0000\u0000\u0000\u041c\u03fb\u0001\u0000\u0000\u0000"+
		"\u041c\u03fc\u0001\u0000\u0000\u0000\u041c\u03fd\u0001\u0000\u0000\u0000"+
		"\u041c\u0404\u0001\u0000\u0000\u0000\u041c\u040b\u0001\u0000\u0000\u0000"+
		"\u041c\u0412\u0001\u0000\u0000\u0000\u041c\u0419\u0001\u0000\u0000\u0000"+
		"\u041c\u041a\u0001\u0000\u0000\u0000\u041c\u041b\u0001\u0000\u0000\u0000"+
		"\u041d\u0019\u0001\u0000\u0000\u0000\u041e\u041f\u0003\u0350\u01a8\u0000"+
		"\u041f\u001b\u0001\u0000\u0000\u0000\u0420\u0421\u0005\u0187\u0000\u0000"+
		"\u0421\u0422\u0003\u001e\u000f\u0000\u0422\u001d\u0001\u0000\u0000\u0000"+
		"\u0423\u0424\u0005\u0212\u0000\u0000\u0424\u0429\u0003 \u0010\u0000\u0425"+
		"\u0426\u0005\u0218\u0000\u0000\u0426\u0428\u0003 \u0010\u0000\u0427\u0425"+
		"\u0001\u0000\u0000\u0000\u0428\u042b\u0001\u0000\u0000\u0000\u0429\u0427"+
		"\u0001\u0000\u0000\u0000\u0429\u042a\u0001\u0000\u0000\u0000\u042a\u042c"+
		"\u0001\u0000\u0000\u0000\u042b\u0429\u0001\u0000\u0000\u0000\u042c\u042d"+
		"\u0005\u0213\u0000\u0000\u042d\u001f\u0001\u0000\u0000\u0000\u042e\u042f"+
		"\u0003\"\u0011\u0000\u042f\u0430\u0003$\u0012\u0000\u0430!\u0001\u0000"+
		"\u0000\u0000\u0431\u0432\u0003\u0252\u0129\u0000\u0432#\u0001\u0000\u0000"+
		"\u0000\u0433\u043d\u0003\u0018\f\u0000\u0434\u0439\u0005\u01db\u0000\u0000"+
		"\u0435\u0436\u0005\u0212\u0000\u0000\u0436\u0437\u0003\u0348\u01a4\u0000"+
		"\u0437\u0438\u0005\u0213\u0000\u0000\u0438\u043a\u0001\u0000\u0000\u0000"+
		"\u0439\u0435\u0001\u0000\u0000\u0000\u0439\u043a\u0001\u0000\u0000\u0000"+
		"\u043a\u043d\u0001\u0000\u0000\u0000\u043b\u043d\u0005\u01e0\u0000\u0000"+
		"\u043c\u0433\u0001\u0000\u0000\u0000\u043c\u0434\u0001\u0000\u0000\u0000"+
		"\u043c\u043b\u0001\u0000\u0000\u0000\u043d%\u0001\u0000\u0000\u0000\u043e"+
		"\u0440\u0007\u0001\u0000\u0000\u043f\u043e\u0001\u0000\u0000\u0000\u043f"+
		"\u0440\u0001\u0000\u0000\u0000\u0440\u0441\u0001\u0000\u0000\u0000\u0441"+
		"\u0442\u0003\u0010\b\u0000\u0442\u0444\u0003\u0016\u000b\u0000\u0443\u0445"+
		"\u0003\u00ecv\u0000\u0444\u0443\u0001\u0000\u0000\u0000\u0444\u0445\u0001"+
		"\u0000\u0000\u0000\u0445\'\u0001\u0000\u0000\u0000\u0446\u0448\u0005\u0212"+
		"\u0000\u0000\u0447\u0449\u0003&\u0013\u0000\u0448\u0447\u0001\u0000\u0000"+
		"\u0000\u0448\u0449\u0001\u0000\u0000\u0000\u0449\u044e\u0001\u0000\u0000"+
		"\u0000\u044a\u044b\u0005\u0218\u0000\u0000\u044b\u044d\u0003&\u0013\u0000"+
		"\u044c\u044a\u0001\u0000\u0000\u0000\u044d\u0450\u0001\u0000\u0000\u0000"+
		"\u044e\u044c\u0001\u0000\u0000\u0000\u044e\u044f\u0001\u0000\u0000\u0000"+
		"\u044f\u0451\u0001\u0000\u0000\u0000\u0450\u044e\u0001\u0000\u0000\u0000"+
		"\u0451\u0452\u0005\u0213\u0000\u0000\u0452)\u0001\u0000\u0000\u0000\u0453"+
		"\u0454\u0007\u0002\u0000\u0000\u0454+\u0001\u0000\u0000\u0000\u0455\u0456"+
		"\u0007\u0003\u0000\u0000\u0456-\u0001\u0000\u0000\u0000\u0457\u0458\u0003"+
		"\u0350\u01a8\u0000\u0458/\u0001\u0000\u0000\u0000\u0459\u045a\u0003\u0350"+
		"\u01a8\u0000\u045a1\u0001\u0000\u0000\u0000\u045b\u045f\u00034\u001a\u0000"+
		"\u045c\u045e\u00034\u001a\u0000\u045d\u045c\u0001\u0000\u0000\u0000\u045e"+
		"\u0461\u0001\u0000\u0000\u0000\u045f\u045d\u0001\u0000\u0000\u0000\u045f"+
		"\u0460\u0001\u0000\u0000\u0000\u04603\u0001\u0000\u0000\u0000\u0461\u045f"+
		"\u0001\u0000\u0000\u0000\u0462\u0463\u0005g\u0000\u0000\u0463\u0464\u0003"+
		"6\u001b\u0000\u0464\u0465\u0005\u021e\u0000\u0000\u04655\u0001\u0000\u0000"+
		"\u0000\u0466\u046b\u00038\u001c\u0000\u0467\u046b\u0003:\u001d\u0000\u0468"+
		"\u046b\u0003D\"\u0000\u0469\u046b\u0003N\'\u0000\u046a\u0466\u0001\u0000"+
		"\u0000\u0000\u046a\u0467\u0001\u0000\u0000\u0000\u046a\u0468\u0001\u0000"+
		"\u0000\u0000\u046a\u0469\u0001\u0000\u0000\u0000\u046b7\u0001\u0000\u0000"+
		"\u0000\u046c\u046e\u0003<\u001e\u0000\u046d\u046f\u0005I\u0000\u0000\u046e"+
		"\u046d\u0001\u0000\u0000\u0000\u046e\u046f\u0001\u0000\u0000\u0000\u046f"+
		"\u0472\u0001\u0000\u0000\u0000\u0470\u0473\u0003\u0018\f\u0000\u0471\u0473"+
		"\u0003>\u001f\u0000\u0472\u0470\u0001\u0000\u0000\u0000\u0472\u0471\u0001"+
		"\u0000\u0000\u0000\u0473\u0476\u0001\u0000\u0000\u0000\u0474\u0475\u0005"+
		"\u0102\u0000\u0000\u0475\u0477\u0005\u0104\u0000\u0000\u0476\u0474\u0001"+
		"\u0000\u0000\u0000\u0476\u0477\u0001\u0000\u0000\u0000\u0477\u0479\u0001"+
		"\u0000\u0000\u0000\u0478\u047a\u0003B!\u0000\u0479\u0478\u0001\u0000\u0000"+
		"\u0000\u0479\u047a\u0001\u0000\u0000\u0000\u047a9\u0001\u0000\u0000\u0000"+
		"\u047b\u047e\u0003<\u001e\u0000\u047c\u047f\u0003\u001c\u000e\u0000\u047d"+
		"\u047f\u0003\u001a\r\u0000\u047e\u047c\u0001\u0000\u0000\u0000\u047e\u047d"+
		"\u0001\u0000\u0000\u0000\u047f;\u0001\u0000\u0000\u0000\u0480\u0483\u0003"+
		"H$\u0000\u0481\u0482\u0005\u0218\u0000\u0000\u0482\u0484\u0003H$\u0000"+
		"\u0483\u0481\u0001\u0000\u0000\u0000\u0483\u0484\u0001\u0000\u0000\u0000"+
		"\u0484=\u0001\u0000\u0000\u0000\u0485\u0486\u0003\u0018\f\u0000\u0486"+
		"\u0487\u0005\u0013\u0000\u0000\u0487\u0488\u0005\u0229\u0000\u0000\u0488"+
		"\u0489\u0003@ \u0000\u0489?\u0001\u0000\u0000\u0000\u048a\u048b\u0005"+
		"\u0013\u0000\u0000\u048b\u048c\u0005\u0212\u0000\u0000\u048c\u0491\u0003"+
		"\u0252\u0129\u0000\u048d\u048e\u0005\u0218\u0000\u0000\u048e\u0490\u0003"+
		"\u0252\u0129\u0000\u048f\u048d\u0001\u0000\u0000\u0000\u0490\u0493\u0001"+
		"\u0000\u0000\u0000\u0491\u048f\u0001\u0000\u0000\u0000\u0491\u0492\u0001"+
		"\u0000\u0000\u0000\u0492\u0494\u0001\u0000\u0000\u0000\u0493\u0491\u0001"+
		"\u0000\u0000\u0000\u0494\u0495\u0005\u0213\u0000\u0000\u0495A\u0001\u0000"+
		"\u0000\u0000\u0496\u0497\u0007\u0004\u0000\u0000\u0497\u0498\u0003\u0252"+
		"\u0129\u0000\u0498C\u0001\u0000\u0000\u0000\u0499\u049a\u0005Z\u0000\u0000"+
		"\u049a\u049c\u0003J%\u0000\u049b\u049d\u0003F#\u0000\u049c\u049b\u0001"+
		"\u0000\u0000\u0000\u049c\u049d\u0001\u0000\u0000\u0000\u049d\u049e\u0001"+
		"\u0000\u0000\u0000\u049e\u049f\u0005\u009a\u0000\u0000\u049fE\u0001\u0000"+
		"\u0000\u0000\u04a0\u04a5\u0003L&\u0000\u04a1\u04a2\u0005\u0218\u0000\u0000"+
		"\u04a2\u04a4\u0003L&\u0000\u04a3\u04a1\u0001\u0000\u0000\u0000\u04a4\u04a7"+
		"\u0001\u0000\u0000\u0000\u04a5\u04a3\u0001\u0000\u0000\u0000\u04a5\u04a6"+
		"\u0001\u0000\u0000\u0000\u04a6G\u0001\u0000\u0000\u0000\u04a7\u04a5\u0001"+
		"\u0000\u0000\u0000\u04a8\u04a9\u0003\u0350\u01a8\u0000\u04a9I\u0001\u0000"+
		"\u0000\u0000\u04aa\u04ab\u0003\u0350\u01a8\u0000\u04abK\u0001\u0000\u0000"+
		"\u0000\u04ac\u04ad\u0003\u0010\b\u0000\u04ad\u04ae\u0003$\u0012\u0000"+
		"\u04aeM\u0001\u0000\u0000\u0000\u04af\u04b0\u0003H$\u0000\u04b0\u04b1"+
		"\u0005\u01d5\u0000\u0000\u04b1\u04b8\u0001\u0000\u0000\u0000\u04b2\u04b3"+
		"\u0003H$\u0000\u04b3\u04b4\u0005\u01d5\u0000\u0000\u04b4\u04b5\u0005\u009a"+
		"\u0000\u0000\u04b5\u04b6\u0003P(\u0000\u04b6\u04b8\u0001\u0000\u0000\u0000"+
		"\u04b7\u04af\u0001\u0000\u0000\u0000\u04b7\u04b2\u0001\u0000\u0000\u0000"+
		"\u04b8O\u0001\u0000\u0000\u0000\u04b9\u04bd\u0003\u0348\u01a4\u0000\u04ba"+
		"\u04bb\u0005\u01dd\u0000\u0000\u04bb\u04bd\u0003\u0348\u01a4\u0000\u04bc"+
		"\u04b9\u0001\u0000\u0000\u0000\u04bc\u04ba\u0001\u0000\u0000\u0000\u04bd"+
		"Q\u0001\u0000\u0000\u0000\u04be\u04c0\u0003T*\u0000\u04bf\u04be\u0001"+
		"\u0000\u0000\u0000\u04c0\u04c1\u0001\u0000\u0000\u0000\u04c1\u04bf\u0001"+
		"\u0000\u0000\u0000\u04c1\u04c2\u0001\u0000\u0000\u0000\u04c2S\u0001\u0000"+
		"\u0000\u0000\u04c3\u04c4\u0005g\u0000\u0000\u04c4\u04c5\u0005\u008d\u0000"+
		"\u0000\u04c5\u04c6\u0005\u00a6\u0000\u0000\u04c6\u04c7\u0005\u009a\u0000"+
		"\u0000\u04c7\u04c8\u0003V+\u0000\u04c8\u04c9\u0003^/\u0000\u04c9U\u0001"+
		"\u0000\u0000\u0000\u04ca\u04cf\u0003X,\u0000\u04cb\u04cc\u0005\u0218\u0000"+
		"\u0000\u04cc\u04ce\u0003X,\u0000\u04cd\u04cb\u0001\u0000\u0000\u0000\u04ce"+
		"\u04d1\u0001\u0000\u0000\u0000\u04cf\u04cd\u0001\u0000\u0000\u0000\u04cf"+
		"\u04d0\u0001\u0000\u0000\u0000\u04d0W\u0001\u0000\u0000\u0000\u04d1\u04cf"+
		"\u0001\u0000\u0000\u0000\u04d2\u04d7\u0005\u0177\u0000\u0000\u04d3\u04d7"+
		"\u0005\u01df\u0000\u0000\u04d4\u04d7\u0003P(\u0000\u04d5\u04d7\u0003H"+
		"$\u0000\u04d6\u04d2\u0001\u0000\u0000\u0000\u04d6\u04d3\u0001\u0000\u0000"+
		"\u0000\u04d6\u04d4\u0001\u0000\u0000\u0000\u04d6\u04d5\u0001\u0000\u0000"+
		"\u0000\u04d7Y\u0001\u0000\u0000\u0000\u04d8\u04da\u0003^/\u0000\u04d9"+
		"\u04d8\u0001\u0000\u0000\u0000\u04da\u04db\u0001\u0000\u0000\u0000\u04db"+
		"\u04d9\u0001\u0000\u0000\u0000\u04db\u04dc\u0001\u0000\u0000\u0000\u04dc"+
		"[\u0001\u0000\u0000\u0000\u04dd\u04df\u0003^/\u0000\u04de\u04dd\u0001"+
		"\u0000\u0000\u0000\u04df\u04e0\u0001\u0000\u0000\u0000\u04e0\u04de\u0001"+
		"\u0000\u0000\u0000\u04e0\u04e1\u0001\u0000\u0000\u0000\u04e1]\u0001\u0000"+
		"\u0000\u0000\u04e2\u04eb\u0003x<\u0000\u04e3\u04eb\u0003|>\u0000\u04e4"+
		"\u04eb\u0003~?\u0000\u04e5\u04eb\u0003`0\u0000\u04e6\u04eb\u0003\u0088"+
		"D\u0000\u04e7\u04eb\u0003r9\u0000\u04e8\u04eb\u0003f3\u0000\u04e9\u04eb"+
		"\u0003h4\u0000\u04ea\u04e2\u0001\u0000\u0000\u0000\u04ea\u04e3\u0001\u0000"+
		"\u0000\u0000\u04ea\u04e4\u0001\u0000\u0000\u0000\u04ea\u04e5\u0001\u0000"+
		"\u0000\u0000\u04ea\u04e6\u0001\u0000\u0000\u0000\u04ea\u04e7\u0001\u0000"+
		"\u0000\u0000\u04ea\u04e8\u0001\u0000\u0000\u0000\u04ea\u04e9\u0001\u0000"+
		"\u0000\u0000\u04eb_\u0001\u0000\u0000\u0000\u04ec\u04ed\u0003\u016e\u00b7"+
		"\u0000\u04ed\u04ee\u0005\u021e\u0000\u0000\u04ee\u04f6\u0001\u0000\u0000"+
		"\u0000\u04ef\u04f0\u0003d2\u0000\u04f0\u04f1\u0005\u021e\u0000\u0000\u04f1"+
		"\u04f6\u0001\u0000\u0000\u0000\u04f2\u04f3\u0003b1\u0000\u04f3\u04f4\u0005"+
		"\u021e\u0000\u0000\u04f4\u04f6\u0001\u0000\u0000\u0000\u04f5\u04ec\u0001"+
		"\u0000\u0000\u0000\u04f5\u04ef\u0001\u0000\u0000\u0000\u04f5\u04f2\u0001"+
		"\u0000\u0000\u0000\u04f6a\u0001\u0000\u0000\u0000\u04f7\u04f8\u0005\u01a5"+
		"\u0000\u0000\u04f8\u04f9\u0003\u020c\u0106\u0000\u04f9\u04fb\u0003\u01da"+
		"\u00ed\u0000\u04fa\u04fc\u0003\u0178\u00bc\u0000\u04fb\u04fa\u0001\u0000"+
		"\u0000\u0000\u04fb\u04fc\u0001\u0000\u0000\u0000\u04fc\u04fe\u0001\u0000"+
		"\u0000\u0000\u04fd\u04ff\u0003\u02de\u016f\u0000\u04fe\u04fd\u0001\u0000"+
		"\u0000\u0000\u04fe\u04ff\u0001\u0000\u0000\u0000\u04ff\u0501\u0001\u0000"+
		"\u0000\u0000\u0500\u0502\u0003\u020e\u0107\u0000\u0501\u0500\u0001\u0000"+
		"\u0000\u0000\u0501\u0502\u0001\u0000\u0000\u0000\u0502\u0504\u0001\u0000"+
		"\u0000\u0000\u0503\u0505\u0003\u0210\u0108\u0000\u0504\u0503\u0001\u0000"+
		"\u0000\u0000\u0504\u0505\u0001\u0000\u0000\u0000\u0505c\u0001\u0000\u0000"+
		"\u0000\u0506\u0509\u0005\u00b9\u0000\u0000\u0507\u050a\u0003\u01e8\u00f4"+
		"\u0000\u0508\u050a\u0003\u01ea\u00f5\u0000\u0509\u0507\u0001\u0000\u0000"+
		"\u0000\u0509\u0508\u0001\u0000\u0000\u0000\u050ae\u0001\u0000\u0000\u0000"+
		"\u050b\u050c\u0005\u01dc\u0000\u0000\u050c\u050e\u0003j5\u0000\u050d\u050f"+
		"\u0003n7\u0000\u050e\u050d\u0001\u0000\u0000\u0000\u050e\u050f\u0001\u0000"+
		"\u0000\u0000\u050f\u0510\u0001\u0000\u0000\u0000\u0510\u0511\u0005\u021e"+
		"\u0000\u0000\u0511g\u0001\u0000\u0000\u0000\u0512\u0514\u0005\u01d9\u0000"+
		"\u0000\u0513\u0515\u0003j5\u0000\u0514\u0513\u0001\u0000\u0000\u0000\u0514"+
		"\u0515\u0001\u0000\u0000\u0000\u0515\u0517\u0001\u0000\u0000\u0000\u0516"+
		"\u0518\u0003n7\u0000\u0517\u0516\u0001\u0000\u0000\u0000\u0517\u0518\u0001"+
		"\u0000\u0000\u0000\u0518\u0519\u0001\u0000\u0000\u0000\u0519\u051a\u0005"+
		"\u021e\u0000\u0000\u051ai\u0001\u0000\u0000\u0000\u051b\u051e\u0003l6"+
		"\u0000\u051c\u051e\u0003P(\u0000\u051d\u051b\u0001\u0000\u0000\u0000\u051d"+
		"\u051c\u0001\u0000\u0000\u0000\u051ek\u0001\u0000\u0000\u0000\u051f\u0520"+
		"\u0003\u0350\u01a8\u0000\u0520m\u0001\u0000\u0000\u0000\u0521\u0522\u0005"+
		"\u0163\u0000\u0000\u0522\u0523\u0005\u01da\u0000\u0000\u0523\u0524\u0005"+
		"\u0229\u0000\u0000\u0524\u0525\u0005\u0002\u0000\u0000\u0525\u0526\u0003"+
		"p8\u0000\u0526\u0527\u0005\u0002\u0000\u0000\u0527o\u0001\u0000\u0000"+
		"\u0000\u0528\u0529\u0003\u0252\u0129\u0000\u0529q\u0001\u0000\u0000\u0000"+
		"\u052a\u052b\u0005\u00a9\u0000\u0000\u052b\u052c\u0003\u0224\u0112\u0000"+
		"\u052c\u0531\u0005\u0189\u0000\u0000\u052d\u052e\u0005\u015e\u0000\u0000"+
		"\u052e\u0530\u0005\u01d7\u0000\u0000\u052f\u052d\u0001\u0000\u0000\u0000"+
		"\u0530\u0533\u0001\u0000\u0000\u0000\u0531\u052f\u0001\u0000\u0000\u0000"+
		"\u0531\u0532\u0001\u0000\u0000\u0000\u0532\u0535\u0001\u0000\u0000\u0000"+
		"\u0533\u0531\u0001\u0000\u0000\u0000\u0534\u0536\u00032\u0019\u0000\u0535"+
		"\u0534\u0001\u0000\u0000\u0000\u0535\u0536\u0001\u0000\u0000\u0000\u0536"+
		"\u0538\u0001\u0000\u0000\u0000\u0537\u0539\u0003R)\u0000\u0538\u0537\u0001"+
		"\u0000\u0000\u0000\u0538\u0539\u0001\u0000\u0000\u0000\u0539\u053b\u0001"+
		"\u0000\u0000\u0000\u053a\u053c\u0003Z-\u0000\u053b\u053a\u0001\u0000\u0000"+
		"\u0000\u053b\u053c\u0001\u0000\u0000\u0000\u053c\u053e\u0001\u0000\u0000"+
		"\u0000\u053d\u053f\u0003t:\u0000\u053e\u053d\u0001\u0000\u0000\u0000\u053e"+
		"\u053f\u0001\u0000\u0000\u0000\u053f\u0541\u0001\u0000\u0000\u0000\u0540"+
		"\u0542\u0003v;\u0000\u0541\u0540\u0001\u0000\u0000\u0000\u0541\u0542\u0001"+
		"\u0000\u0000\u0000\u0542\u0543\u0001\u0000\u0000\u0000\u0543\u0544\u0005"+
		"\u0081\u0000\u0000\u0544\u0545\u0005\u00a9\u0000\u0000\u0545\u0546\u0005"+
		"\u021e\u0000\u0000\u0546s\u0001\u0000\u0000\u0000\u0547\u0548\u0005\u01d6"+
		"\u0000\u0000\u0548\u0549\u0003\u0224\u0112\u0000\u0549\u054e\u0005\u0189"+
		"\u0000\u0000\u054a\u054b\u0005\u015e\u0000\u0000\u054b\u054d\u0005\u01d7"+
		"\u0000\u0000\u054c\u054a\u0001\u0000\u0000\u0000\u054d\u0550\u0001\u0000"+
		"\u0000\u0000\u054e\u054c\u0001\u0000\u0000\u0000\u054e\u054f\u0001\u0000"+
		"\u0000\u0000\u054f\u0552\u0001\u0000\u0000\u0000\u0550\u054e\u0001\u0000"+
		"\u0000\u0000\u0551\u0553\u00032\u0019\u0000\u0552\u0551\u0001\u0000\u0000"+
		"\u0000\u0552\u0553\u0001\u0000\u0000\u0000\u0553\u0555\u0001\u0000\u0000"+
		"\u0000\u0554\u0556\u0003R)\u0000\u0555\u0554\u0001\u0000\u0000\u0000\u0555"+
		"\u0556\u0001\u0000\u0000\u0000\u0556\u0558\u0001\u0000\u0000\u0000\u0557"+
		"\u0559\u0003Z-\u0000\u0558\u0557\u0001\u0000\u0000\u0000\u0558\u0559\u0001"+
		"\u0000\u0000\u0000\u0559u\u0001\u0000\u0000\u0000\u055a\u055f\u0005|\u0000"+
		"\u0000\u055b\u055c\u0005\u015e\u0000\u0000\u055c\u055e\u0005\u01d7\u0000"+
		"\u0000\u055d\u055b\u0001\u0000\u0000\u0000\u055e\u0561\u0001\u0000\u0000"+
		"\u0000\u055f\u055d\u0001\u0000\u0000\u0000\u055f\u0560\u0001\u0000\u0000"+
		"\u0000\u0560\u0563\u0001\u0000\u0000\u0000\u0561\u055f\u0001\u0000\u0000"+
		"\u0000\u0562\u0564\u00032\u0019\u0000\u0563\u0562\u0001\u0000\u0000\u0000"+
		"\u0563\u0564\u0001\u0000\u0000\u0000\u0564\u0566\u0001\u0000\u0000\u0000"+
		"\u0565\u0567\u0003R)\u0000\u0566\u0565\u0001\u0000\u0000\u0000\u0566\u0567"+
		"\u0001\u0000\u0000\u0000\u0567\u0569\u0001\u0000\u0000\u0000\u0568\u056a"+
		"\u0003Z-\u0000\u0569\u0568\u0001\u0000\u0000\u0000\u0569\u056a\u0001\u0000"+
		"\u0000\u0000\u056aw\u0001\u0000\u0000\u0000\u056b\u056d\u0005 \u0000\u0000"+
		"\u056c\u056e\u0003z=\u0000\u056d\u056c\u0001\u0000\u0000\u0000\u056d\u056e"+
		"\u0001\u0000\u0000\u0000\u056e\u0570\u0001\u0000\u0000\u0000\u056f\u0571"+
		"\u00032\u0019\u0000\u0570\u056f\u0001\u0000\u0000\u0000\u0570\u0571\u0001"+
		"\u0000\u0000\u0000\u0571\u0573\u0001\u0000\u0000\u0000\u0572\u0574\u0003"+
		"R)\u0000\u0573\u0572\u0001\u0000\u0000\u0000\u0573\u0574\u0001\u0000\u0000"+
		"\u0000\u0574\u0576\u0001\u0000\u0000\u0000\u0575\u0577\u0003Z-\u0000\u0576"+
		"\u0575\u0001\u0000\u0000\u0000\u0576\u0577\u0001\u0000\u0000\u0000\u0577"+
		"\u0578\u0001\u0000\u0000\u0000\u0578\u0579\u0005\u0081\u0000\u0000\u0579"+
		"\u057a\u0005\u021e\u0000\u0000\u057ay\u0001\u0000\u0000\u0000\u057b\u057c"+
		"\u0005\u015e\u0000\u0000\u057c\u057d\u0005\u01d7\u0000\u0000\u057d\u0580"+
		"\u0001\u0000\u0000\u0000\u057e\u057f\u0005\u01d4\u0000\u0000\u057f\u0581"+
		"\u0005\u0196\u0000\u0000\u0580\u057e\u0001\u0000\u0000\u0000\u0580\u0581"+
		"\u0001\u0000\u0000\u0000\u0581\u058a\u0001\u0000\u0000\u0000\u0582\u0583"+
		"\u0005\u01d4\u0000\u0000\u0583\u0584\u0005\u0196\u0000\u0000\u0584\u0587"+
		"\u0001\u0000\u0000\u0000\u0585\u0586\u0005\u015e\u0000\u0000\u0586\u0588"+
		"\u0005\u01d7\u0000\u0000\u0587\u0585\u0001\u0000\u0000\u0000\u0587\u0588"+
		"\u0001\u0000\u0000\u0000\u0588\u058a\u0001\u0000\u0000\u0000\u0589\u057b"+
		"\u0001\u0000\u0000\u0000\u0589\u0582\u0001\u0000\u0000\u0000\u058a{\u0001"+
		"\u0000\u0000\u0000\u058b\u058c\u0003H$\u0000\u058c\u058d\u0005\u021b\u0000"+
		"\u0000\u058d\u058e\u0003\u0252\u0129\u0000\u058e\u058f\u0005\u021e\u0000"+
		"\u0000\u058f\u0599\u0001\u0000\u0000\u0000\u0590\u0591\u0003H$\u0000\u0591"+
		"\u0592\u0005\u022a\u0000\u0000\u0592\u0593\u0003\u0252\u0129\u0000\u0593"+
		"\u0594\u0005\u022b\u0000\u0000\u0594\u0595\u0005\u0229\u0000\u0000\u0595"+
		"\u0596\u0003\u0252\u0129\u0000\u0596\u0597\u0005\u021e\u0000\u0000\u0597"+
		"\u0599\u0001\u0000\u0000\u0000\u0598\u058b\u0001\u0000\u0000\u0000\u0598"+
		"\u0590\u0001\u0000\u0000\u0000\u0599}\u0001\u0000\u0000\u0000\u059a\u059b"+
		"\u0003H$\u0000\u059b\u059c\u0005\u0229\u0000\u0000\u059c\u059d\u0003\u0164"+
		"\u00b2\u0000\u059d\u059e\u0005\u021e\u0000\u0000\u059e\u05a5\u0001\u0000"+
		"\u0000\u0000\u059f\u05a0\u0003H$\u0000\u05a0\u05a1\u0005\u0229\u0000\u0000"+
		"\u05a1\u05a2\u0003\u0080@\u0000\u05a2\u05a3\u0005\u021e\u0000\u0000\u05a3"+
		"\u05a5\u0001\u0000\u0000\u0000\u05a4\u059a\u0001\u0000\u0000\u0000\u05a4"+
		"\u059f\u0001\u0000\u0000\u0000\u05a5\u007f\u0001\u0000\u0000\u0000\u05a6"+
		"\u05a7\u0005\u01e1\u0000\u0000\u05a7\u05a8\u0005\u0212\u0000\u0000\u05a8"+
		"\u05a9\u0003<\u001e\u0000\u05a9\u05ac\u0005\u0213\u0000\u0000\u05aa\u05ab"+
		"\u0005\u01bd\u0000\u0000\u05ab\u05ad\u0005\u0115\u0000\u0000\u05ac\u05aa"+
		"\u0001\u0000\u0000\u0000\u05ac\u05ad\u0001\u0000\u0000\u0000\u05ad\u05af"+
		"\u0001\u0000\u0000\u0000\u05ae\u05b0\u0003\u0084B\u0000\u05af\u05ae\u0001"+
		"\u0000\u0000\u0000\u05af\u05b0\u0001\u0000\u0000\u0000\u05b0\u05b1\u0001"+
		"\u0000\u0000\u0000\u05b1\u05b2\u0005\u021e\u0000\u0000\u05b2\u0081\u0001"+
		"\u0000\u0000\u0000\u05b3\u05b4\u0003\u02f0\u0178\u0000\u05b4\u05b5\u0005"+
		"\u020b\u0000\u0000\u05b5\u05b7\u0001\u0000\u0000\u0000\u05b6\u05b3\u0001"+
		"\u0000\u0000\u0000\u05b6\u05b7\u0001\u0000\u0000\u0000\u05b7\u05b8\u0001"+
		"\u0000\u0000\u0000\u05b8\u05b9\u0003\u0350\u01a8\u0000\u05b9\u0083\u0001"+
		"\u0000\u0000\u0000\u05ba\u05bb\u0005\u0014\u0000\u0000\u05bb\u05bc\u0003"+
		"\u0082A\u0000\u05bc\u05bd\u0005\u0212\u0000\u0000\u05bd\u05be\u0003\u0086"+
		"C\u0000\u05be\u05bf\u0005\u0213\u0000\u0000\u05bf\u0085\u0001\u0000\u0000"+
		"\u0000\u05c0\u05c5\u0003\"\u0011\u0000\u05c1\u05c2\u0005\u0218\u0000\u0000"+
		"\u05c2\u05c4\u0003\"\u0011\u0000\u05c3\u05c1\u0001\u0000\u0000\u0000\u05c4"+
		"\u05c7\u0001\u0000\u0000\u0000\u05c5\u05c3\u0001\u0000\u0000\u0000\u05c5"+
		"\u05c6\u0001\u0000\u0000\u0000\u05c6\u0087\u0001\u0000\u0000\u0000\u05c7"+
		"\u05c5\u0001\u0000\u0000\u0000\u05c8\u05c9\u00052\u0000\u0000\u05c9\u05ca"+
		"\u0003\u030c\u0186\u0000\u05ca\u05cb\u0005\u0212\u0000\u0000\u05cb\u05cc"+
		"\u0003\u008aE\u0000\u05cc\u05d1\u0005\u0213\u0000\u0000\u05cd\u05ce\u0005"+
		"\u01bd\u0000\u0000\u05ce\u05d0\u0005\u01d8\u0000\u0000\u05cf\u05cd\u0001"+
		"\u0000\u0000\u0000\u05d0\u05d3\u0001\u0000\u0000\u0000\u05d1\u05cf\u0001"+
		"\u0000\u0000\u0000\u05d1\u05d2\u0001\u0000\u0000\u0000\u05d2\u05d4\u0001"+
		"\u0000\u0000\u0000\u05d3\u05d1\u0001\u0000\u0000\u0000\u05d4\u05d5\u0005"+
		"\u021e\u0000\u0000\u05d5\u0089\u0001\u0000\u0000\u0000\u05d6\u05db\u0003"+
		"\u008cF\u0000\u05d7\u05d8\u0005\u0218\u0000\u0000\u05d8\u05da\u0003\u008c"+
		"F\u0000\u05d9\u05d7\u0001\u0000\u0000\u0000\u05da\u05dd\u0001\u0000\u0000"+
		"\u0000\u05db\u05d9\u0001\u0000\u0000\u0000\u05db\u05dc\u0001\u0000\u0000"+
		"\u0000\u05dc\u008b\u0001\u0000\u0000\u0000\u05dd\u05db\u0001\u0000\u0000"+
		"\u0000\u05de\u05e2\u0003\u0350\u01a8\u0000\u05df\u05e2\u0003\u0336\u019b"+
		"\u0000\u05e0\u05e2\u0003\u008eG\u0000\u05e1\u05de\u0001\u0000\u0000\u0000"+
		"\u05e1\u05df\u0001\u0000\u0000\u0000\u05e1\u05e0\u0001\u0000\u0000\u0000"+
		"\u05e2\u008d\u0001\u0000\u0000\u0000\u05e3\u05e4\u0003\u0350\u01a8\u0000"+
		"\u05e4\u05e5\u0005\u0003\u0000\u0000\u05e5\u05e6\u0003\u0350\u01a8\u0000"+
		"\u05e6\u05ec\u0001\u0000\u0000\u0000\u05e7\u05e8\u0003\u0350\u01a8\u0000"+
		"\u05e8\u05e9\u0005\u0003\u0000\u0000\u05e9\u05ea\u0003\u0336\u019b\u0000"+
		"\u05ea\u05ec\u0001\u0000\u0000\u0000\u05eb\u05e3\u0001\u0000\u0000\u0000"+
		"\u05eb\u05e7\u0001\u0000\u0000\u0000\u05ec\u008f\u0001\u0000\u0000\u0000"+
		"\u05ed\u05ef\u00032\u0019\u0000\u05ee\u05ed\u0001\u0000\u0000\u0000\u05ee"+
		"\u05ef\u0001\u0000\u0000\u0000\u05ef\u05f1\u0001\u0000\u0000\u0000\u05f0"+
		"\u05f2\u0003R)\u0000\u05f1\u05f0\u0001\u0000\u0000\u0000\u05f1\u05f2\u0001"+
		"\u0000\u0000\u0000\u05f2\u05f3\u0001\u0000\u0000\u0000\u05f3\u05f4\u0003"+
		"Z-\u0000\u05f4\u0091\u0001\u0000\u0000\u0000\u05f5\u05f6\u0003\u010e\u0087"+
		"\u0000\u05f6\u0093\u0001\u0000\u0000\u0000\u05f7\u05f8\u0003\\.\u0000"+
		"\u05f8\u0095\u0001\u0000\u0000\u0000\u05f9\u05fa\u0003\u0350\u01a8\u0000"+
		"\u05fa\u0097\u0001\u0000\u0000\u0000\u05fb\u05fc\u0005\u009a\u0000\u0000"+
		"\u05fc\u05fd\u0005z\u0000\u0000\u05fd\u05fe\u0005\u014b\u0000\u0000\u05fe"+
		"\u0099\u0001\u0000\u0000\u0000\u05ff\u0600\u0007\u0005\u0000\u0000\u0600"+
		"\u060d\u0005\u0018\u0000\u0000\u0601\u060e\u0003\u009cN\u0000\u0602\u0603"+
		"\u0005\u0212\u0000\u0000\u0603\u0608\u0003\u009cN\u0000\u0604\u0605\u0005"+
		"\u0218\u0000\u0000\u0605\u0607\u0003\u009cN\u0000\u0606\u0604\u0001\u0000"+
		"\u0000\u0000\u0607\u060a\u0001\u0000\u0000\u0000\u0608\u0606\u0001\u0000"+
		"\u0000\u0000\u0608\u0609\u0001\u0000\u0000\u0000\u0609\u060b\u0001\u0000"+
		"\u0000\u0000\u060a\u0608\u0001\u0000\u0000\u0000\u060b\u060c\u0005\u0213"+
		"\u0000\u0000\u060c\u060e\u0001\u0000\u0000\u0000\u060d\u0601\u0001\u0000"+
		"\u0000\u0000\u060d\u0602\u0001\u0000\u0000\u0000\u060e\u009b\u0001\u0000"+
		"\u0000\u0000\u060f\u0611\u0003\u02e8\u0174\u0000\u0610\u0612\u0003\u032e"+
		"\u0197\u0000\u0611\u0610\u0001\u0000\u0000\u0000\u0611\u0612\u0001\u0000"+
		"\u0000\u0000\u0612\u009d\u0001\u0000\u0000\u0000\u0613\u0619\u0005\u00ea"+
		"\u0000\u0000\u0614\u0615\u0005\u00d4\u0000\u0000\u0615\u061a\u0003\u0252"+
		"\u0129\u0000\u0616\u0617\u0005{\u0000\u0000\u0617\u0618\u0005\u019d\u0000"+
		"\u0000\u0618\u061a\u0003\u032e\u0197\u0000\u0619\u0614\u0001\u0000\u0000"+
		"\u0000\u0619\u0616\u0001\u0000\u0000\u0000\u061a\u009f\u0001\u0000\u0000"+
		"\u0000\u061b\u062c\u0005\u00c1\u0000\u0000\u061c\u0626\u00054\u0000\u0000"+
		"\u061d\u061e\u0005P\u0000\u0000\u061e\u061f\u0005\u0194\u0000\u0000\u061f"+
		"\u0627\u0005\u0183\u0000\u0000\u0620\u0622\u0005\u0102\u0000\u0000\u0621"+
		"\u0620\u0001\u0000\u0000\u0000\u0621\u0622\u0001\u0000\u0000\u0000\u0622"+
		"\u0623\u0001\u0000\u0000\u0000\u0623\u0624\u0005\u00ae\u0000\u0000\u0624"+
		"\u0625\u0005\u0187\u0000\u0000\u0625\u0627\u0005]\u0000\u0000\u0626\u061d"+
		"\u0001\u0000\u0000\u0000\u0626\u0621\u0001\u0000\u0000\u0000\u0626\u0627"+
		"\u0001\u0000\u0000\u0000\u0627\u0629\u0001\u0000\u0000\u0000\u0628\u062a"+
		"\u0003\u00a2Q\u0000\u0629\u0628\u0001\u0000\u0000\u0000\u0629\u062a\u0001"+
		"\u0000\u0000\u0000\u062a\u062c\u0001\u0000\u0000\u0000\u062b\u061b\u0001"+
		"\u0000\u0000\u0000\u062b\u061c\u0001\u0000\u0000\u0000\u062c\u00a1\u0001"+
		"\u0000\u0000\u0000\u062d\u062f\u0005\u009c\u0000\u0000\u062e\u062d\u0001"+
		"\u0000\u0000\u0000\u062e\u062f\u0001\u0000\u0000\u0000\u062f\u0630\u0001"+
		"\u0000\u0000\u0000\u0630\u0631\u0005\u0088\u0000\u0000\u0631\u0632\u0005"+
		"\u00c0\u0000\u0000\u0632\u0633\u0003\u031e\u018f\u0000\u0633\u00a3\u0001"+
		"\u0000\u0000\u0000\u0634\u0637\u0003\u0304\u0182\u0000\u0635\u0636\u0005"+
		"\u010c\u0000\u0000\u0636\u0638\u0005\u020e\u0000\u0000\u0637\u0635\u0001"+
		"\u0000\u0000\u0000\u0637\u0638\u0001\u0000\u0000\u0000\u0638\u063a\u0001"+
		"\u0000\u0000\u0000\u0639\u063b\u0003\u00a6S\u0000\u063a\u0639\u0001\u0000"+
		"\u0000\u0000\u063a\u063b\u0001\u0000\u0000\u0000\u063b\u00a5\u0001\u0000"+
		"\u0000\u0000\u063c\u063e\u0003\u00deo\u0000\u063d\u063c\u0001\u0000\u0000"+
		"\u0000\u063d\u063e\u0001\u0000\u0000\u0000\u063e\u0641\u0001\u0000\u0000"+
		"\u0000\u063f\u0642\u0003\u00a8T\u0000\u0640\u0642\u0003\u00aaU\u0000\u0641"+
		"\u063f\u0001\u0000\u0000\u0000\u0641\u0640\u0001\u0000\u0000\u0000\u0642"+
		"\u0644\u0001\u0000\u0000\u0000\u0643\u0645\u0003\u00aeW\u0000\u0644\u0643"+
		"\u0001\u0000\u0000\u0000\u0644\u0645\u0001\u0000\u0000\u0000\u0645\u0651"+
		"\u0001\u0000\u0000\u0000\u0646\u0647\u0005\u0212\u0000\u0000\u0647\u064c"+
		"\u0003\u00c0`\u0000\u0648\u0649\u0005\u0218\u0000\u0000\u0649\u064b\u0003"+
		"\u00c0`\u0000\u064a\u0648\u0001\u0000\u0000\u0000\u064b\u064e\u0001\u0000"+
		"\u0000\u0000\u064c\u064a\u0001\u0000\u0000\u0000\u064c\u064d\u0001\u0000"+
		"\u0000\u0000\u064d\u064f\u0001\u0000\u0000\u0000\u064e\u064c\u0001\u0000"+
		"\u0000\u0000\u064f\u0650\u0005\u0213\u0000\u0000\u0650\u0652\u0001\u0000"+
		"\u0000\u0000\u0651\u0646\u0001\u0000\u0000\u0000\u0651\u0652\u0001\u0000"+
		"\u0000\u0000\u0652\u0656\u0001\u0000\u0000\u0000\u0653\u0655\u0003\u00be"+
		"_\u0000\u0654\u0653\u0001\u0000\u0000\u0000\u0655\u0658\u0001\u0000\u0000"+
		"\u0000\u0656\u0654\u0001\u0000\u0000\u0000\u0656\u0657\u0001\u0000\u0000"+
		"\u0000\u0657\u00a7\u0001\u0000\u0000\u0000\u0658\u0656\u0001\u0000\u0000"+
		"\u0000\u0659\u065d\u0007\u0006\u0000\u0000\u065a\u065e\u0005\u0109\u0000"+
		"\u0000\u065b\u065e\u0003\u010a\u0085\u0000\u065c\u065e\u0003\u00acV\u0000"+
		"\u065d\u065a\u0001\u0000\u0000\u0000\u065d\u065b\u0001\u0000\u0000\u0000"+
		"\u065d\u065c\u0001\u0000\u0000\u0000\u065e\u00a9\u0001\u0000\u0000\u0000"+
		"\u065f\u0660\u0005\u019f\u0000\u0000\u0660\u0661\u0003\u032e\u0197\u0000"+
		"\u0661\u00ab\u0001\u0000\u0000\u0000\u0662\u0663\u0005\u0187\u0000\u0000"+
		"\u0663\u0664\u0005\u010a\u0000\u0000\u0664\u0667\u0003\u032e\u0197\u0000"+
		"\u0665\u0666\u0005\u0102\u0000\u0000\u0666\u0668\u0005\u0104\u0000\u0000"+
		"\u0667\u0665\u0001\u0000\u0000\u0000\u0667\u0668\u0001\u0000\u0000\u0000"+
		"\u0668\u00ad\u0001\u0000\u0000\u0000\u0669\u066a\u0005\u008f\u0000\u0000"+
		"\u066a\u066b\u0005\u00ed\u0000\u0000\u066b\u066c\u0003\u0252\u0129\u0000"+
		"\u066c\u066d\u0005\u00c9\u0000\u0000\u066d\u066e\u0005\u00c6\u0000\u0000"+
		"\u066e\u066f\u0005\u01aa\u0000\u0000\u066f\u0670\u0007\u0007\u0000\u0000"+
		"\u0670\u00af\u0001\u0000\u0000\u0000\u0671\u0672\u0005)\u0000\u0000\u0672"+
		"\u0673\u0003\u0304\u0182\u0000\u0673\u0674\u0007\u0006\u0000\u0000\u0674"+
		"\u0679\u0003\u00b2Y\u0000\u0675\u0676\u0005\u0218\u0000\u0000\u0676\u0678"+
		"\u0003\u00b2Y\u0000\u0677\u0675\u0001\u0000\u0000\u0000\u0678\u067b\u0001"+
		"\u0000\u0000\u0000\u0679\u0677\u0001\u0000\u0000\u0000\u0679\u067a\u0001"+
		"\u0000\u0000\u0000\u067a\u067c\u0001\u0000\u0000\u0000\u067b\u0679\u0001"+
		"\u0000\u0000\u0000\u067c\u067d\u0005\u0081\u0000\u0000\u067d\u00b1\u0001"+
		"\u0000\u0000\u0000\u067e\u0681\u0003\u00b4Z\u0000\u067f\u0681\u0003\u00b6"+
		"[\u0000\u0680\u067e\u0001\u0000\u0000\u0000\u0680\u067f\u0001\u0000\u0000"+
		"\u0000\u0681\u00b3\u0001\u0000\u0000\u0000\u0682\u0683\u0007\b\u0000\u0000"+
		"\u0683\u0684\u0005\u00e2\u0000\u0000\u0684\u0685\u0003\u00ba]\u0000\u0685"+
		"\u00b5\u0001\u0000\u0000\u0000\u0686\u068a\u0007\t\u0000\u0000\u0687\u068b"+
		"\u0003\u00b8\\\u0000\u0688\u068b\u0003\u00ba]\u0000\u0689\u068b\u0003"+
		"\u00bc^\u0000\u068a\u0687\u0001\u0000\u0000\u0000\u068a\u0688\u0001\u0000"+
		"\u0000\u0000\u068a\u0689\u0001\u0000\u0000\u0000\u068b\u00b7\u0001\u0000"+
		"\u0000\u0000\u068c\u068d\u0005\u012f\u0000\u0000\u068d\u068e\u0003\u030c"+
		"\u0186\u0000\u068e\u068f\u0005\u0212\u0000\u0000\u068f\u0694\u0003\u00d6"+
		"k\u0000\u0690\u0691\u0005\u0218\u0000\u0000\u0691\u0693\u0003\u00d6k\u0000"+
		"\u0692\u0690\u0001\u0000\u0000\u0000\u0693\u0696\u0001\u0000\u0000\u0000"+
		"\u0694\u0692\u0001\u0000\u0000\u0000\u0694\u0695\u0001\u0000\u0000\u0000"+
		"\u0695\u0697\u0001\u0000\u0000\u0000\u0696\u0694\u0001\u0000\u0000\u0000"+
		"\u0697\u0698\u0005\u0213\u0000\u0000\u0698\u06a6\u0007\u0006\u0000\u0000"+
		"\u0699\u06a7\u0003\u00e2q\u0000\u069a\u069c\u0005g\u0000\u0000\u069b\u069a"+
		"\u0001\u0000\u0000\u0000\u069b\u069c\u0001\u0000\u0000\u0000\u069c\u06a0"+
		"\u0001\u0000\u0000\u0000\u069d\u069f\u0003\u00eew\u0000\u069e\u069d\u0001"+
		"\u0000\u0000\u0000\u069f\u06a2\u0001\u0000\u0000\u0000\u06a0\u069e\u0001"+
		"\u0000\u0000\u0000\u06a0\u06a1\u0001\u0000\u0000\u0000\u06a1\u06a3\u0001"+
		"\u0000\u0000\u0000\u06a2\u06a0\u0001\u0000\u0000\u0000\u06a3\u06a4\u0003"+
		"\u0138\u009c\u0000\u06a4\u06a5\u0005\u021e\u0000\u0000\u06a5\u06a7\u0001"+
		"\u0000\u0000\u0000\u06a6\u0699\u0001\u0000\u0000\u0000\u06a6\u069b\u0001"+
		"\u0000\u0000\u0000\u06a7\u00b9\u0001\u0000\u0000\u0000\u06a8\u06a9\u0005"+
		"\u009f\u0000\u0000\u06a9\u06b5\u0003\u030a\u0185\u0000\u06aa\u06ab\u0005"+
		"\u0212\u0000\u0000\u06ab\u06b0\u0003\u00d6k\u0000\u06ac\u06ad\u0005\u0218"+
		"\u0000\u0000\u06ad\u06af\u0003\u00d6k\u0000\u06ae\u06ac\u0001\u0000\u0000"+
		"\u0000\u06af\u06b2\u0001\u0000\u0000\u0000\u06b0\u06ae\u0001\u0000\u0000"+
		"\u0000\u06b0\u06b1\u0001\u0000\u0000\u0000\u06b1\u06b3\u0001\u0000\u0000"+
		"\u0000\u06b2\u06b0\u0001\u0000\u0000\u0000\u06b3\u06b4\u0005\u0213\u0000"+
		"\u0000\u06b4\u06b6\u0001\u0000\u0000\u0000\u06b5\u06aa\u0001\u0000\u0000"+
		"\u0000\u06b5\u06b6\u0001\u0000";
	private static final String _serializedATNSegment1 =
		"\u0000\u0000\u06b6\u06b7\u0001\u0000\u0000\u0000\u06b7\u06b8\u0005\u0142"+
		"\u0000\u0000\u06b8\u06b9\u0003\u032e\u0197\u0000\u06b9\u06c7\u0007\u0006"+
		"\u0000\u0000\u06ba\u06c8\u0003\u00e2q\u0000\u06bb\u06bd\u0005g\u0000\u0000"+
		"\u06bc\u06bb\u0001\u0000\u0000\u0000\u06bc\u06bd\u0001\u0000\u0000\u0000"+
		"\u06bd\u06c1\u0001\u0000\u0000\u0000\u06be\u06c0\u0003\u00eew\u0000\u06bf"+
		"\u06be\u0001\u0000\u0000\u0000\u06c0\u06c3\u0001\u0000\u0000\u0000\u06c1"+
		"\u06bf\u0001\u0000\u0000\u0000\u06c1\u06c2\u0001\u0000\u0000\u0000\u06c2"+
		"\u06c4\u0001\u0000\u0000\u0000\u06c3\u06c1\u0001\u0000\u0000\u0000\u06c4"+
		"\u06c5\u0003\u0138\u009c\u0000\u06c5\u06c6\u0005\u021e\u0000\u0000\u06c6"+
		"\u06c8\u0001\u0000\u0000\u0000\u06c7\u06ba\u0001\u0000\u0000\u0000\u06c7"+
		"\u06bc\u0001\u0000\u0000\u0000\u06c8\u00bb\u0001\u0000\u0000\u0000\u06c9"+
		"\u06cb\u0005\u0094\u0000\u0000\u06ca\u06c9\u0001\u0000\u0000\u0000\u06ca"+
		"\u06cb\u0001\u0000\u0000\u0000\u06cb\u06cd\u0001\u0000\u0000\u0000\u06cc"+
		"\u06ce\u0005\u00ba\u0000\u0000\u06cd\u06cc\u0001\u0000\u0000\u0000\u06cd"+
		"\u06ce\u0001\u0000\u0000\u0000\u06ce\u06cf\u0001\u0000\u0000\u0000\u06cf"+
		"\u06d0\u0005L\u0000\u0000\u06d0\u06d1\u0005\u009f\u0000\u0000\u06d1\u06e3"+
		"\u0003\u032e\u0197\u0000\u06d2\u06d3\u0005\u0212\u0000\u0000\u06d3\u06d4"+
		"\u0005\u015c\u0000\u0000\u06d4\u06d5\u0005\u00ac\u0000\u0000\u06d5\u06d6"+
		"\u0005\u0117\u0000\u0000\u06d6\u06d7\u0003\u032e\u0197\u0000\u06d7\u06d8"+
		"\u0005\u0218\u0000\u0000\u06d8\u06d9\u0001\u0000\u0000\u0000\u06d9\u06de"+
		"\u0003\u00d6k\u0000\u06da\u06db\u0005\u0218\u0000\u0000\u06db\u06dd\u0003"+
		"\u00d6k\u0000\u06dc\u06da\u0001\u0000\u0000\u0000\u06dd\u06e0\u0001\u0000"+
		"\u0000\u0000\u06de\u06dc\u0001\u0000\u0000\u0000\u06de\u06df\u0001\u0000"+
		"\u0000\u0000\u06df\u06e1\u0001\u0000\u0000\u0000\u06e0\u06de\u0001\u0000"+
		"\u0000\u0000\u06e1\u06e2\u0005\u0213\u0000\u0000\u06e2\u06e4\u0001\u0000"+
		"\u0000\u0000\u06e3\u06d2\u0001\u0000\u0000\u0000\u06e3\u06e4\u0001\u0000"+
		"\u0000\u0000\u06e4\u06e5\u0001\u0000\u0000\u0000\u06e5\u06e6\u0005\u0142"+
		"\u0000\u0000\u06e6\u06e7\u0005\u015c\u0000\u0000\u06e7\u06e8\u0005\u0014"+
		"\u0000\u0000\u06e8\u06e9\u0005\u0140\u0000\u0000\u06e9\u06f7\u0007\u0006"+
		"\u0000\u0000\u06ea\u06f8\u0003\u00e2q\u0000\u06eb\u06ed\u0005g\u0000\u0000"+
		"\u06ec\u06eb\u0001\u0000\u0000\u0000\u06ec\u06ed\u0001\u0000\u0000\u0000"+
		"\u06ed\u06f1\u0001\u0000\u0000\u0000\u06ee\u06f0\u0003\u00eew\u0000\u06ef"+
		"\u06ee\u0001\u0000\u0000\u0000\u06f0\u06f3\u0001\u0000\u0000\u0000\u06f1"+
		"\u06ef\u0001\u0000\u0000\u0000\u06f1\u06f2\u0001\u0000\u0000\u0000\u06f2"+
		"\u06f4\u0001\u0000\u0000\u0000\u06f3\u06f1\u0001\u0000\u0000\u0000\u06f4"+
		"\u06f5\u0003\u0138\u009c\u0000\u06f5\u06f6\u0005\u021e\u0000\u0000\u06f6"+
		"\u06f8\u0001\u0000\u0000\u0000\u06f7\u06ea\u0001\u0000\u0000\u0000\u06f7"+
		"\u06ec\u0001\u0000\u0000\u0000\u06f8\u00bd\u0001\u0000\u0000\u0000\u06f9"+
		"\u06fb\u0005\u0102\u0000\u0000\u06fa\u06f9\u0001\u0000\u0000\u0000\u06fa"+
		"\u06fb\u0001\u0000\u0000\u0000\u06fb\u06fc\u0001\u0000\u0000\u0000\u06fc"+
		"\u06fd\u0007\n\u0000\u0000\u06fd\u00bf\u0001\u0000\u0000\u0000\u06fe\u06ff"+
		"\u0003\u034e\u01a7\u0000\u06ff\u0701\u0003\u032e\u0197\u0000\u0700\u0702"+
		"\u0003\u00c2a\u0000\u0701\u0700\u0001\u0000\u0000\u0000\u0701\u0702\u0001"+
		"\u0000\u0000\u0000\u0702\u0705\u0001\u0000\u0000\u0000\u0703\u0705\u0003"+
		"\u00c4b\u0000\u0704\u06fe\u0001\u0000\u0000\u0000\u0704\u0703\u0001\u0000"+
		"\u0000\u0000\u0705\u00c1\u0001\u0000\u0000\u0000\u0706\u0707\u0005\u008f"+
		"\u0000\u0000\u0707\u0708\u0005\u00ed\u0000\u0000\u0708\u0709\u0003\u0252"+
		"\u0129\u0000\u0709\u00c3\u0001\u0000\u0000\u0000\u070a\u070c\u0003\u00be"+
		"_\u0000\u070b\u070a\u0001\u0000\u0000\u0000\u070b\u070c\u0001\u0000\u0000"+
		"\u0000\u070c\u070e\u0001\u0000\u0000\u0000\u070d\u070f\u0003\u00c6c\u0000"+
		"\u070e\u070d\u0001\u0000\u0000\u0000\u070f\u0710\u0001\u0000\u0000\u0000"+
		"\u0710\u070e\u0001\u0000\u0000\u0000\u0710\u0711\u0001\u0000\u0000\u0000"+
		"\u0711\u0714\u0001\u0000\u0000\u0000\u0712\u0713\u0005\u0218\u0000\u0000"+
		"\u0713\u0715\u0003\u00d2i\u0000\u0714\u0712\u0001\u0000\u0000\u0000\u0714"+
		"\u0715\u0001\u0000\u0000\u0000\u0715\u00c5\u0001\u0000\u0000\u0000\u0716"+
		"\u071a\u0003\u00c8d\u0000\u0717\u071a\u0003\u00ceg\u0000\u0718\u071a\u0003"+
		"\u00d0h\u0000\u0719\u0716\u0001\u0000\u0000\u0000\u0719\u0717\u0001\u0000"+
		"\u0000\u0000\u0719\u0718\u0001\u0000\u0000\u0000\u071a\u00c7\u0001\u0000"+
		"\u0000\u0000\u071b\u071e\u0007\t\u0000\u0000\u071c\u071f\u0003\u00cae"+
		"\u0000\u071d\u071f\u0003\u00ccf\u0000\u071e\u071c\u0001\u0000\u0000\u0000"+
		"\u071e\u071d\u0001\u0000\u0000\u0000\u071f\u00c9\u0001\u0000\u0000\u0000"+
		"\u0720\u0721\u0005\u012f\u0000\u0000\u0721\u0722\u0003\u030c\u0186\u0000"+
		"\u0722\u0723\u0005\u0212\u0000\u0000\u0723\u0728\u0003\u00d6k\u0000\u0724"+
		"\u0725\u0005\u0218\u0000\u0000\u0725\u0727\u0003\u00d6k\u0000\u0726\u0724"+
		"\u0001\u0000\u0000\u0000\u0727\u072a\u0001\u0000\u0000\u0000\u0728\u0726"+
		"\u0001\u0000\u0000\u0000\u0728\u0729\u0001\u0000\u0000\u0000\u0729\u072b"+
		"\u0001\u0000\u0000\u0000\u072a\u0728\u0001\u0000\u0000\u0000\u072b\u072e"+
		"\u0005\u0213\u0000\u0000\u072c\u072d\u0007\u0006\u0000\u0000\u072d\u072f"+
		"\u0003\u00e2q\u0000\u072e\u072c\u0001\u0000\u0000\u0000\u072e\u072f\u0001"+
		"\u0000\u0000\u0000\u072f\u00cb\u0001\u0000\u0000\u0000\u0730\u0731\u0005"+
		"\u009f\u0000\u0000\u0731\u073d\u0003\u030a\u0185\u0000\u0732\u0733\u0005"+
		"\u0212\u0000\u0000\u0733\u0738\u0003\u00d6k\u0000\u0734\u0735\u0005\u0218"+
		"\u0000\u0000\u0735\u0737\u0003\u00d6k\u0000\u0736\u0734\u0001\u0000\u0000"+
		"\u0000\u0737\u073a\u0001\u0000\u0000\u0000\u0738\u0736\u0001\u0000\u0000"+
		"\u0000\u0738\u0739\u0001\u0000\u0000\u0000\u0739\u073b\u0001\u0000\u0000"+
		"\u0000\u073a\u0738\u0001\u0000\u0000\u0000\u073b\u073c\u0005\u0213\u0000"+
		"\u0000\u073c\u073e\u0001\u0000\u0000\u0000\u073d\u0732\u0001\u0000\u0000"+
		"\u0000\u073d\u073e\u0001\u0000\u0000\u0000\u073e\u073f\u0001\u0000\u0000"+
		"\u0000\u073f\u0744\u0005\u0142\u0000\u0000\u0740\u0745\u0003\u032e\u0197"+
		"\u0000\u0741\u0742\u0005\u015c\u0000\u0000\u0742\u0743\u0005\u0014\u0000"+
		"\u0000\u0743\u0745\u0005\u0140\u0000\u0000\u0744\u0740\u0001\u0000\u0000"+
		"\u0000\u0744\u0741\u0001\u0000\u0000\u0000\u0745\u074e\u0001\u0000\u0000"+
		"\u0000\u0746\u0747\u0007\u0006\u0000\u0000\u0747\u074f\u0003\u00e2q\u0000"+
		"\u0748\u074a\u0005\u008f\u0000\u0000\u0749\u074b\u0005\u01b0\u0000\u0000"+
		"\u074a\u0749\u0001\u0000\u0000\u0000\u074a\u074b\u0001\u0000\u0000\u0000"+
		"\u074b\u074c\u0001\u0000\u0000\u0000\u074c\u074d\u0005\u00ed\u0000\u0000"+
		"\u074d\u074f\u0003\u0252\u0129\u0000\u074e\u0746\u0001\u0000\u0000\u0000"+
		"\u074e\u0748\u0001\u0000\u0000\u0000\u074e\u074f\u0001\u0000\u0000\u0000"+
		"\u074f\u00cd\u0001\u0000\u0000\u0000\u0750\u0752\u0005\u0094\u0000\u0000"+
		"\u0751\u0750\u0001\u0000\u0000\u0000\u0751\u0752\u0001\u0000\u0000\u0000"+
		"\u0752\u0754\u0001\u0000\u0000\u0000\u0753\u0755\u0005\u00ba\u0000\u0000"+
		"\u0754\u0753\u0001\u0000\u0000\u0000\u0754\u0755\u0001\u0000\u0000\u0000"+
		"\u0755\u0756\u0001\u0000\u0000\u0000\u0756\u0757\u0005L\u0000\u0000\u0757"+
		"\u0758\u0005\u009f\u0000\u0000\u0758\u076a\u0003\u032e\u0197\u0000\u0759"+
		"\u075a\u0005\u0212\u0000\u0000\u075a\u075b\u0005\u015c\u0000\u0000\u075b"+
		"\u075c\u0005\u00ac\u0000\u0000\u075c\u075d\u0005\u0117\u0000\u0000\u075d"+
		"\u075e\u0003\u032e\u0197\u0000\u075e\u075f\u0005\u0218\u0000\u0000\u075f"+
		"\u0760\u0001\u0000\u0000\u0000\u0760\u0765\u0003\u00d6k\u0000\u0761\u0762"+
		"\u0005\u0218\u0000\u0000\u0762\u0764\u0003\u00d6k\u0000\u0763\u0761\u0001"+
		"\u0000\u0000\u0000\u0764\u0767\u0001\u0000\u0000\u0000\u0765\u0763\u0001"+
		"\u0000\u0000\u0000\u0765\u0766\u0001\u0000\u0000\u0000\u0766\u0768\u0001"+
		"\u0000\u0000\u0000\u0767\u0765\u0001\u0000\u0000\u0000\u0768\u0769\u0005"+
		"\u0213\u0000\u0000\u0769\u076b\u0001\u0000\u0000\u0000\u076a\u0759\u0001"+
		"\u0000\u0000\u0000\u076a\u076b\u0001\u0000\u0000\u0000\u076b\u076c\u0001"+
		"\u0000\u0000\u0000\u076c\u076d\u0005\u0142\u0000\u0000\u076d\u076e\u0005"+
		"\u015c\u0000\u0000\u076e\u076f\u0005\u0014\u0000\u0000\u076f\u0772\u0005"+
		"\u0140\u0000\u0000\u0770\u0771\u0007\u0006\u0000\u0000\u0771\u0773\u0003"+
		"\u00e2q\u0000\u0772\u0770\u0001\u0000\u0000\u0000\u0772\u0773\u0001\u0000"+
		"\u0000\u0000\u0773\u00cf\u0001\u0000\u0000\u0000\u0774\u0775\u0007\b\u0000"+
		"\u0000\u0775\u0776\u0005\u00e2\u0000\u0000\u0776\u0777\u0003\u00ccf\u0000"+
		"\u0777\u00d1\u0001\u0000\u0000\u0000\u0778\u0779\u0005\u012a\u0000\u0000"+
		"\u0779\u077a\u0005\u013f\u0000\u0000\u077a\u077b\u0005\u0212\u0000\u0000"+
		"\u077b\u0780\u0003\u00d4j\u0000\u077c\u077d\u0005\u0218\u0000\u0000\u077d"+
		"\u077f\u0003\u00d4j\u0000\u077e\u077c\u0001\u0000\u0000\u0000\u077f\u0782"+
		"\u0001\u0000\u0000\u0000\u0780\u077e\u0001\u0000\u0000\u0000\u0780\u0781"+
		"\u0001\u0000\u0000\u0000\u0781\u0783\u0001\u0000\u0000\u0000\u0782\u0780"+
		"\u0001\u0000\u0000\u0000\u0783\u0784\u0005\u0213\u0000\u0000\u0784\u00d3"+
		"\u0001\u0000\u0000\u0000\u0785\u0788\u0003\u034e\u01a7\u0000\u0786\u0788"+
		"\u0005j\u0000\u0000\u0787\u0785\u0001\u0000\u0000\u0000\u0787\u0786\u0001"+
		"\u0000\u0000\u0000\u0788\u00d5\u0001\u0000\u0000\u0000\u0789\u078a\u0003"+
		"\u0096K\u0000\u078a\u078b\u0003\u032e\u0197\u0000\u078b\u00d7\u0001\u0000"+
		"\u0000\u0000\u078c\u078d\u0005U\u0000\u0000\u078d\u078e\u0005\u015d\u0000"+
		"\u0000\u078e\u0793\u0003\u0306\u0183\u0000\u078f\u0792\u0003\u00dcn\u0000"+
		"\u0790\u0792\u0003\u00dam\u0000\u0791\u078f\u0001\u0000\u0000\u0000\u0791"+
		"\u0790\u0001\u0000\u0000\u0000\u0792\u0795\u0001\u0000\u0000\u0000\u0793"+
		"\u0791\u0001\u0000\u0000\u0000\u0793\u0794\u0001\u0000\u0000\u0000\u0794"+
		"\u0796\u0001\u0000\u0000\u0000\u0795\u0793\u0001\u0000\u0000\u0000\u0796"+
		"\u0797\u0005\u021e\u0000\u0000\u0797\u00d9\u0001\u0000\u0000\u0000\u0798"+
		"\u0799\u0005\u00af\u0000\u0000\u0799\u079a\u0005.\u0000\u0000\u079a\u07a9"+
		"\u0005\u020c\u0000\u0000\u079b\u079c\u0005\u00e0\u0000\u0000\u079c\u07a9"+
		"\u0005\u020c\u0000\u0000\u079d\u07a9\u0005\u00fd\u0000\u0000\u079e\u079f"+
		"\u0005\u00e6\u0000\u0000\u079f\u07a9\u0005\u020c\u0000\u0000\u07a0\u07a9"+
		"\u0005\u00fe\u0000\u0000\u07a1\u07a9\u0005\\\u0000\u0000\u07a2\u07a9\u0005"+
		"\u00fb\u0000\u0000\u07a3\u07a4\u00051\u0000\u0000\u07a4\u07a9\u0005\u020c"+
		"\u0000\u0000\u07a5\u07a9\u0005\u00f9\u0000\u0000\u07a6\u07a9\u0005\u0114"+
		"\u0000\u0000\u07a7\u07a9\u0005\u0100\u0000\u0000\u07a8\u0798\u0001\u0000"+
		"\u0000\u0000\u07a8\u079b\u0001\u0000\u0000\u0000\u07a8\u079d\u0001\u0000"+
		"\u0000\u0000\u07a8\u079e\u0001\u0000\u0000\u0000\u07a8\u07a0\u0001\u0000"+
		"\u0000\u0000\u07a8\u07a1\u0001\u0000\u0000\u0000\u07a8\u07a2\u0001\u0000"+
		"\u0000\u0000\u07a8\u07a3\u0001\u0000\u0000\u0000\u07a8\u07a5\u0001\u0000"+
		"\u0000\u0000\u07a8\u07a6\u0001\u0000\u0000\u0000\u07a8\u07a7\u0001\u0000"+
		"\u0000\u0000\u07a9\u00db\u0001\u0000\u0000\u0000\u07aa\u07ab\u0005\u017a"+
		"\u0000\u0000\u07ab\u07ac\u0005\u01bd\u0000\u0000\u07ac\u07ad\u0005\u020c"+
		"\u0000\u0000\u07ad\u00dd\u0001\u0000\u0000\u0000\u07ae\u07af\u0005\u001a"+
		"\u0000\u0000\u07af\u07b0\u0007\u000b\u0000\u0000\u07b0\u00df\u0001\u0000"+
		"\u0000\u0000\u07b1\u07b2\u0003\u034e\u01a7\u0000\u07b2\u07b3\u0005\u0229"+
		"\u0000\u0000\u07b3\u07b4\u0003\u0252\u0129\u0000\u07b4\u00e1\u0001\u0000"+
		"\u0000\u0000\u07b5\u07b8\u0005\u00c9\u0000\u0000\u07b6\u07b9\u0003\u00e4"+
		"r\u0000\u07b7\u07b9\u0003\u00e6s\u0000\u07b8\u07b6\u0001\u0000\u0000\u0000"+
		"\u07b8\u07b7\u0001\u0000\u0000\u0000\u07b9\u00e3\u0001\u0000\u0000\u0000"+
		"\u07ba\u07bb\u0005\u00c6\u0000\u0000\u07bb\u07bc\u0005\u00ed\u0000\u0000"+
		"\u07bc\u07bd\u0005\u020e\u0000\u0000\u07bd\u00e5\u0001\u0000\u0000\u0000"+
		"\u07be\u07c1\u00050\u0000\u0000\u07bf\u07c0\u0005\u00ed\u0000\u0000\u07c0"+
		"\u07c2\u0005\u020e\u0000\u0000\u07c1\u07bf\u0001\u0000\u0000\u0000\u07c1"+
		"\u07c2\u0001\u0000\u0000\u0000\u07c2\u07c3\u0001\u0000\u0000\u0000\u07c3"+
		"\u07c4\u0005\u00cf\u0000\u0000\u07c4\u07c6\u0003\u034e\u01a7\u0000\u07c5"+
		"\u07c7\u0003\u00e8t\u0000\u07c6\u07c5\u0001\u0000\u0000\u0000\u07c6\u07c7"+
		"\u0001\u0000\u0000\u0000\u07c7\u07ca\u0001\u0000\u0000\u0000\u07c8\u07c9"+
		"\u0005\u01bd\u0000\u0000\u07c9\u07cb\u0005N\u0000\u0000\u07ca\u07c8\u0001"+
		"\u0000\u0000\u0000\u07ca\u07cb\u0001\u0000\u0000\u0000\u07cb\u07cd\u0001"+
		"\u0000\u0000\u0000\u07cc\u07ce\u0003\u00eau\u0000\u07cd\u07cc\u0001\u0000"+
		"\u0000\u0000\u07cd\u07ce\u0001\u0000\u0000\u0000\u07ce\u00e7\u0001\u0000"+
		"\u0000\u0000\u07cf\u07d0\u0005\u000b\u0000\u0000\u07d0\u07d1\u0005\u00ac"+
		"\u0000\u0000\u07d1\u07d2\u0005\u0212\u0000\u0000\u07d2\u07d7\u0003\u0252"+
		"\u0129\u0000\u07d3\u07d4\u0005\u0218\u0000\u0000\u07d4\u07d6\u0003\u0252"+
		"\u0129\u0000\u07d5\u07d3\u0001\u0000\u0000\u0000\u07d6\u07d9\u0001\u0000"+
		"\u0000\u0000\u07d7\u07d5\u0001\u0000\u0000\u0000\u07d7\u07d8\u0001\u0000"+
		"\u0000\u0000\u07d8\u07da\u0001\u0000\u0000\u0000\u07d9\u07d7\u0001\u0000"+
		"\u0000\u0000\u07da\u07db\u0005\u0213\u0000\u0000\u07db\u00e9\u0001\u0000"+
		"\u0000\u0000\u07dc\u07dd\u0005\u011d\u0000\u0000\u07dd\u07e9\u0005\u0212"+
		"\u0000\u0000\u07de\u07e3\u0003\u0252\u0129\u0000\u07df\u07e0\u0005\u0218"+
		"\u0000\u0000\u07e0\u07e2\u0003\u0252\u0129\u0000\u07e1\u07df\u0001\u0000"+
		"\u0000\u0000\u07e2\u07e5\u0001\u0000\u0000\u0000\u07e3\u07e1\u0001\u0000"+
		"\u0000\u0000\u07e3\u07e4\u0001\u0000\u0000\u0000\u07e4\u07ea\u0001\u0000"+
		"\u0000\u0000\u07e5\u07e3\u0001\u0000\u0000\u0000\u07e6\u07e7\u0005\u020b"+
		"\u0000\u0000\u07e7\u07e8\u0005\u020b\u0000\u0000\u07e8\u07ea\u0005\u020b"+
		"\u0000\u0000\u07e9\u07de\u0001\u0000\u0000\u0000\u07e9\u07e6\u0001\u0000"+
		"\u0000\u0000\u07ea\u07eb\u0001\u0000\u0000\u0000\u07eb\u07ec\u0005\u0213"+
		"\u0000\u0000\u07ec\u00eb\u0001\u0000\u0000\u0000\u07ed\u07ee\u0007\u0004"+
		"\u0000\u0000\u07ee\u07ef\u0003\u0252\u0129\u0000\u07ef\u00ed\u0001\u0000"+
		"\u0000\u0000\u07f0\u07f9\u0003\u00f0x\u0000\u07f1\u07f9\u0003\u00f2y\u0000"+
		"\u07f2\u07f9\u0003\u00f4z\u0000\u07f3\u07f9\u0003\u00f8|\u0000\u07f4\u07f9"+
		"\u0003\u00fa}\u0000\u07f5\u07f9\u0003\u00fc~\u0000\u07f6\u07f9\u0003\u0104"+
		"\u0082\u0000\u07f7\u07f9\u0003\f\u0006\u0000\u07f8\u07f0\u0001\u0000\u0000"+
		"\u0000\u07f8\u07f1\u0001\u0000\u0000\u0000\u07f8\u07f2\u0001\u0000\u0000"+
		"\u0000\u07f8\u07f3\u0001\u0000\u0000\u0000\u07f8\u07f4\u0001\u0000\u0000"+
		"\u0000\u07f8\u07f5\u0001\u0000\u0000\u0000\u07f8\u07f6\u0001\u0000\u0000"+
		"\u0000\u07f8\u07f7\u0001\u0000\u0000\u0000\u07f9\u00ef\u0001\u0000\u0000"+
		"\u0000\u07fa\u07fc\u0003H$\u0000\u07fb\u07fd\u0005I\u0000\u0000\u07fc"+
		"\u07fb\u0001\u0000\u0000\u0000\u07fc\u07fd\u0001\u0000\u0000\u0000\u07fd"+
		"\u07fe\u0001\u0000\u0000\u0000\u07fe\u0801\u0003\u032e\u0197\u0000\u07ff"+
		"\u0800\u0005\u0102\u0000\u0000\u0800\u0802\u0005\u0104\u0000\u0000\u0801"+
		"\u07ff\u0001\u0000\u0000\u0000\u0801\u0802\u0001\u0000\u0000\u0000\u0802"+
		"\u0804\u0001\u0000\u0000\u0000\u0803\u0805\u0003\u00ecv\u0000\u0804\u0803"+
		"\u0001\u0000\u0000\u0000\u0804\u0805\u0001\u0000\u0000\u0000\u0805\u0806"+
		"\u0001\u0000\u0000\u0000\u0806\u0807\u0005\u021e\u0000\u0000\u0807\u00f1"+
		"\u0001\u0000\u0000\u0000\u0808\u0809\u0005\u0184\u0000\u0000\u0809\u080a"+
		"\u0003\u0304\u0182\u0000\u080a\u080b\u0005\u00c3\u0000\u0000\u080b\u0811"+
		"\u0003\u032e\u0197\u0000\u080c\u080d\u0005\u0131\u0000\u0000\u080d\u080e"+
		"\u0003\u0252\u0129\u0000\u080e\u080f\u0005\u0004\u0000\u0000\u080f\u0810"+
		"\u0003\u0252\u0129\u0000\u0810\u0812\u0001\u0000\u0000\u0000\u0811\u080c"+
		"\u0001\u0000\u0000\u0000\u0811\u0812\u0001\u0000\u0000\u0000\u0812\u0815"+
		"\u0001\u0000\u0000\u0000\u0813\u0814\u0005\u0102\u0000\u0000\u0814\u0816"+
		"\u0005\u0104\u0000\u0000\u0815\u0813\u0001\u0000\u0000\u0000\u0815\u0816"+
		"\u0001\u0000\u0000\u0000\u0816\u0817\u0001\u0000\u0000\u0000\u0817\u0818"+
		"\u0005\u021e\u0000\u0000\u0818\u00f3\u0001\u0000\u0000\u0000\u0819\u081a"+
		"\u0005Z\u0000\u0000\u081a\u0826\u0003J%\u0000\u081b\u081c\u0005\u0212"+
		"\u0000\u0000\u081c\u0821\u0003\u00f6{\u0000\u081d\u081e\u0005\u0218\u0000"+
		"\u0000\u081e\u0820\u0003\u00f6{\u0000\u081f\u081d\u0001\u0000\u0000\u0000"+
		"\u0820\u0823\u0001\u0000\u0000\u0000\u0821\u081f\u0001\u0000\u0000\u0000"+
		"\u0821\u0822\u0001\u0000\u0000\u0000\u0822\u0824\u0001\u0000\u0000\u0000"+
		"\u0823\u0821\u0001\u0000\u0000\u0000\u0824\u0825\u0005\u0213\u0000\u0000"+
		"\u0825\u0827\u0001\u0000\u0000\u0000\u0826\u081b\u0001\u0000\u0000\u0000"+
		"\u0826\u0827\u0001\u0000\u0000\u0000\u0827\u082a\u0001\u0000\u0000\u0000"+
		"\u0828\u0829\u0005\u0142\u0000\u0000\u0829\u082b\u0003\u032e\u0197\u0000"+
		"\u082a\u0828\u0001\u0000\u0000\u0000\u082a\u082b\u0001\u0000\u0000\u0000"+
		"\u082b\u082e\u0001\u0000\u0000\u0000\u082c\u082d\u0005\u00c3\u0000\u0000"+
		"\u082d\u082f\u0003\u0164\u00b2\u0000\u082e\u082c\u0001\u0000\u0000\u0000"+
		"\u082e\u082f\u0001\u0000\u0000\u0000\u082f\u0830\u0001\u0000\u0000\u0000"+
		"\u0830\u0831\u0005\u021e\u0000\u0000\u0831\u00f5\u0001\u0000\u0000\u0000"+
		"\u0832\u0837\u0003\u0096K\u0000\u0833\u0835\u0005\u00ac\u0000\u0000\u0834"+
		"\u0833\u0001\u0000\u0000\u0000\u0834\u0835\u0001\u0000\u0000\u0000\u0835"+
		"\u0836\u0001\u0000\u0000\u0000\u0836\u0838\u0003\u032e\u0197\u0000\u0837"+
		"\u0834\u0001\u0000\u0000\u0000\u0837\u0838\u0001\u0000\u0000\u0000\u0838"+
		"\u083a\u0001\u0000\u0000\u0000\u0839\u083b\u0003\u00ecv\u0000\u083a\u0839"+
		"\u0001\u0000\u0000\u0000\u083a\u083b\u0001\u0000\u0000\u0000\u083b\u00f7"+
		"\u0001\u0000\u0000\u0000\u083c\u083d\u0003\u0308\u0184\u0000\u083d\u083e"+
		"\u0005\u0086\u0000\u0000\u083e\u083f\u0005\u021e\u0000\u0000\u083f\u00f9"+
		"\u0001\u0000\u0000\u0000\u0840\u085f\u0005\u012a\u0000\u0000\u0841\u0860"+
		"\u0005\u0160\u0000\u0000\u0842\u0860\u0005\u001d\u0000\u0000\u0843\u0844"+
		"\u0005\u0087\u0000\u0000\u0844\u0845\u0005\u0212\u0000\u0000\u0845\u0846"+
		"\u0003\u0308\u0184\u0000\u0846\u0847\u0005\u0218\u0000\u0000\u0847\u0848"+
		"\u0003\u034a\u01a5\u0000\u0848\u0849\u0005\u0213\u0000\u0000\u0849\u0860"+
		"\u0001\u0000\u0000\u0000\u084a\u084b\u0005\u00b6\u0000\u0000\u084b\u084c"+
		"\u0005\u0212\u0000\u0000\u084c\u084d\u0003\u034e\u01a7\u0000\u084d\u084e"+
		"\u0005\u0218\u0000\u0000\u084e\u084f\u0003\u0252\u0129\u0000\u084f\u0850"+
		"\u0005\u0213\u0000\u0000\u0850\u0860\u0001\u0000\u0000\u0000\u0851\u0852"+
		"\u0005\u013f\u0000\u0000\u0852\u0855\u0005\u0212\u0000\u0000\u0853\u0856"+
		"\u0003\u034e\u01a7\u0000\u0854\u0856\u0005j\u0000\u0000\u0855\u0853\u0001"+
		"\u0000\u0000\u0000\u0855\u0854\u0001\u0000\u0000\u0000\u0856\u0859\u0001"+
		"\u0000\u0000\u0000\u0857\u0858\u0005\u0218\u0000\u0000\u0858\u085a\u0003"+
		"\u034e\u01a7\u0000\u0859\u0857\u0001\u0000\u0000\u0000\u085a\u085b\u0001"+
		"\u0000\u0000\u0000\u085b\u0859\u0001\u0000\u0000\u0000\u085b\u085c\u0001"+
		"\u0000\u0000\u0000\u085c\u085d\u0001\u0000\u0000\u0000\u085d\u085e\u0005"+
		"\u0213\u0000\u0000\u085e\u0860\u0001\u0000\u0000\u0000\u085f\u0841\u0001"+
		"\u0000\u0000\u0000\u085f\u0842\u0001\u0000\u0000\u0000\u085f\u0843\u0001"+
		"\u0000\u0000\u0000\u085f\u084a\u0001\u0000\u0000\u0000\u085f\u0851\u0001"+
		"\u0000\u0000\u0000\u0860\u0861\u0001\u0000\u0000\u0000\u0861\u0862\u0005"+
		"\u021e\u0000\u0000\u0862\u00fb\u0001\u0000\u0000\u0000\u0863\u0866\u0003"+
		"\u00fe\u007f\u0000\u0864\u0866\u0003\u0102\u0081\u0000\u0865\u0863\u0001"+
		"\u0000\u0000\u0000\u0865\u0864\u0001\u0000\u0000\u0000\u0866\u00fd\u0001"+
		"\u0000\u0000\u0000\u0867\u0868\u0005\u019d\u0000\u0000\u0868\u0869\u0003"+
		"\u0304\u0182\u0000\u0869\u087c\u0005\u00c3\u0000\u0000\u086a\u086b\u0005"+
		"\u0136\u0000\u0000\u086b\u086c\u0005\u0212\u0000\u0000\u086c\u0871\u0003"+
		"\u0100\u0080\u0000\u086d\u086e\u0005\u0218\u0000\u0000\u086e\u0870\u0003"+
		"\u0100\u0080\u0000\u086f\u086d\u0001\u0000\u0000\u0000\u0870\u0873\u0001"+
		"\u0000\u0000\u0000\u0871\u086f\u0001\u0000\u0000\u0000\u0871\u0872\u0001"+
		"\u0000\u0000\u0000\u0872\u0874\u0001\u0000\u0000\u0000\u0873\u0871\u0001"+
		"\u0000\u0000\u0000\u0874\u0875\u0005\u0213\u0000\u0000\u0875\u087d\u0001"+
		"\u0000\u0000\u0000\u0876\u0877\u0005\u0137\u0000\u0000\u0877\u087a\u0005"+
		"Z\u0000\u0000\u0878\u0879\u0005\u0142\u0000\u0000\u0879\u087b\u0003\u032e"+
		"\u0197\u0000\u087a\u0878\u0001\u0000\u0000\u0000\u087a\u087b\u0001\u0000"+
		"\u0000\u0000\u087b\u087d\u0001\u0000\u0000\u0000\u087c\u086a\u0001\u0000"+
		"\u0000\u0000\u087c\u0876\u0001\u0000\u0000\u0000\u087d\u087e\u0001\u0000"+
		"\u0000\u0000\u087e\u087f\u0005\u021e\u0000\u0000\u087f\u00ff\u0001\u0000"+
		"\u0000\u0000\u0880\u0882\u0003\"\u0011\u0000\u0881\u0883\u0003\u032e\u0197"+
		"\u0000\u0882\u0881\u0001\u0000\u0000\u0000\u0882\u0883\u0001\u0000\u0000"+
		"\u0000\u0883\u0886\u0001\u0000\u0000\u0000\u0884\u0885\u0005\u0102\u0000"+
		"\u0000\u0885\u0887\u0005\u0104\u0000\u0000\u0886\u0884\u0001\u0000\u0000"+
		"\u0000\u0886\u0887\u0001\u0000\u0000\u0000\u0887\u0889\u0001\u0000\u0000"+
		"\u0000\u0888\u088a\u0003\u00ecv\u0000\u0889\u0888\u0001\u0000\u0000\u0000"+
		"\u0889\u088a\u0001\u0000\u0000\u0000\u088a\u0101\u0001\u0000\u0000\u0000"+
		"\u088b\u088c\u0003\u0316\u018b\u0000\u088c\u088d\u0003\u0304\u0182\u0000"+
		"\u088d\u088e\u0007\f\u0000\u0000\u088e\u088f\u0005\u021e\u0000\u0000\u088f"+
		"\u0103\u0001\u0000\u0000\u0000\u0890\u0893\u0003\u0106\u0083\u0000\u0891"+
		"\u0893\u0003\u010c\u0086\u0000\u0892\u0890\u0001\u0000\u0000\u0000\u0892"+
		"\u0891\u0001\u0000\u0000\u0000\u0893\u0894\u0001\u0000\u0000\u0000\u0894"+
		"\u0895\u0005\u021e\u0000\u0000\u0895\u0105\u0001\u0000\u0000\u0000\u0896"+
		"\u0897\u0005\u019d\u0000\u0000\u0897\u0898\u0003\u0304\u0182\u0000\u0898"+
		"\u08a4\u0005\u00c3\u0000\u0000\u0899\u089a\u0005\u0187\u0000\u0000\u089a"+
		"\u089b\u0005\u010a\u0000\u0000\u089b\u089d\u0003\u032e\u0197\u0000\u089c"+
		"\u089e\u0003\u0108\u0084\u0000\u089d\u089c\u0001\u0000\u0000\u0000\u089d"+
		"\u089e\u0001\u0000\u0000\u0000\u089e\u08a1\u0001\u0000\u0000\u0000\u089f"+
		"\u08a0\u0005\u0102\u0000\u0000\u08a0\u08a2\u0005\u0104\u0000\u0000\u08a1"+
		"\u089f\u0001\u0000\u0000\u0000\u08a1\u08a2\u0001\u0000\u0000\u0000\u08a2"+
		"\u08a5\u0001\u0000\u0000\u0000\u08a3\u08a5\u0003\u010a\u0085\u0000\u08a4"+
		"\u0899\u0001\u0000\u0000\u0000\u08a4\u08a3\u0001\u0000\u0000\u0000\u08a5"+
		"\u0107\u0001\u0000\u0000\u0000\u08a6\u08a9\u0005\u00b2\u0000\u0000\u08a7"+
		"\u08a9\u0005\u00b1\u0000\u0000\u08a8\u08a6\u0001\u0000\u0000\u0000\u08a8"+
		"\u08a7\u0001\u0000\u0000\u0000\u08a9\u08aa\u0001\u0000\u0000\u0000\u08aa"+
		"\u08ab\u0005.\u0000\u0000\u08ab\u08ac\u0003\u032e\u0197\u0000\u08ac\u0109"+
		"\u0001\u0000\u0000\u0000\u08ad\u08b1\u0005\u01b1\u0000\u0000\u08ae\u08af"+
		"\u0005\u01b2\u0000\u0000\u08af\u08b1\u0005\u0013\u0000\u0000\u08b0\u08ad"+
		"\u0001\u0000\u0000\u0000\u08b0\u08ae\u0001\u0000\u0000\u0000\u08b1\u08b2"+
		"\u0001\u0000\u0000\u0000\u08b2\u08b3\u0005\u0212\u0000\u0000\u08b3\u08b4"+
		"\u0003\u0252\u0129\u0000\u08b4\u08b5\u0005\u0213\u0000\u0000\u08b5\u08b6"+
		"\u0005\u010a\u0000\u0000\u08b6\u08b9\u0003\u032e\u0197\u0000\u08b7\u08b8"+
		"\u0005\u0102\u0000\u0000\u08b8\u08ba\u0005\u0104\u0000\u0000\u08b9\u08b7"+
		"\u0001\u0000\u0000\u0000\u08b9\u08ba\u0001\u0000\u0000\u0000\u08ba\u010b"+
		"\u0001\u0000\u0000\u0000\u08bb\u08bc\u0003\u02ee\u0177\u0000\u08bc\u08bd"+
		"\u0003\u032e\u0197\u0000\u08bd\u010d\u0001\u0000\u0000\u0000\u08be\u08bf"+
		"\u0003\u0112\u0089\u0000\u08bf\u08c0\u0007\r\u0000\u0000\u08c0\u08c3\u0001"+
		"\u0000\u0000\u0000\u08c1\u08c3\u0003\u0110\u0088\u0000\u08c2\u08be\u0001"+
		"\u0000\u0000\u0000\u08c2\u08c1\u0001\u0000\u0000\u0000\u08c3\u08c4\u0001"+
		"\u0000\u0000\u0000\u08c4\u08c2\u0001\u0000\u0000\u0000\u08c4\u08c5\u0001"+
		"\u0000\u0000\u0000\u08c5\u010f\u0001\u0000\u0000\u0000\u08c6\u08c7\u0005"+
		"\u0220\u0000\u0000\u08c7\u08c8\u0005\u0220\u0000\u0000\u08c8\u08c9\u0003"+
		"\u0302\u0181\u0000\u08c9\u08ca\u0005\u0226\u0000\u0000\u08ca\u08cb\u0005"+
		"\u0226\u0000\u0000\u08cb\u0111\u0001\u0000\u0000\u0000\u08cc\u08cd\u0005"+
		"U\u0000\u0000\u08cd\u08e4\u0003\u0000\u0000\u0000\u08ce\u08cf\u0005\u000e"+
		"\u0000\u0000\u08cf\u08e4\u0003\u0000\u0000\u0000\u08d0\u08d1\u0005\u00a1"+
		"\u0000\u0000\u08d1\u08e4\u0003\u0000\u0000\u0000\u08d2\u08d3\u0005\u019c"+
		"\u0000\u0000\u08d3\u08e4\u0003\u0000\u0000\u0000\u08d4\u08e4\u0003\u0138"+
		"\u009c\u0000\u08d5\u08e4\u0003\u0140\u00a0\u0000\u08d6\u08e4\u0003\u0114"+
		"\u008a\u0000\u08d7\u08e4\u0003\u0116\u008b\u0000\u08d8\u08e4\u0003\u0118"+
		"\u008c\u0000\u08d9\u08e4\u0003\u011a\u008d\u0000\u08da\u08e4\u0003\u011c"+
		"\u008e\u0000\u08db\u08e4\u0003\u0122\u0091\u0000\u08dc\u08e4\u0003\u0126"+
		"\u0093\u0000\u08dd\u08e4\u0003\u0130\u0098\u0000\u08de\u08e4\u0003\u0132"+
		"\u0099\u0000\u08df\u08e4\u0003\u0134\u009a\u0000\u08e0\u08e4\u0003\u0288"+
		"\u0144\u0000\u08e1\u08e4\u0003\u0142\u00a1\u0000\u08e2\u08e4\u0003\u0136"+
		"\u009b\u0000\u08e3\u08cc\u0001\u0000\u0000\u0000\u08e3\u08ce\u0001\u0000"+
		"\u0000\u0000\u08e3\u08d0\u0001\u0000\u0000\u0000\u08e3\u08d2\u0001\u0000"+
		"\u0000\u0000\u08e3\u08d4\u0001\u0000\u0000\u0000\u08e3\u08d5\u0001\u0000"+
		"\u0000\u0000\u08e3\u08d6\u0001\u0000\u0000\u0000\u08e3\u08d7\u0001\u0000"+
		"\u0000\u0000\u08e3\u08d8\u0001\u0000\u0000\u0000\u08e3\u08d9\u0001\u0000"+
		"\u0000\u0000\u08e3\u08da\u0001\u0000\u0000\u0000\u08e3\u08db\u0001\u0000"+
		"\u0000\u0000\u08e3\u08dc\u0001\u0000\u0000\u0000\u08e3\u08dd\u0001\u0000"+
		"\u0000\u0000\u08e3\u08de\u0001\u0000\u0000\u0000\u08e3\u08df\u0001\u0000"+
		"\u0000\u0000\u08e3\u08e0\u0001\u0000\u0000\u0000\u08e3\u08e1\u0001\u0000"+
		"\u0000\u0000\u08e3\u08e2\u0001\u0000\u0000\u0000\u08e4\u0113\u0001\u0000"+
		"\u0000\u0000\u08e5\u08e8\u0003\u0340\u01a0\u0000\u08e6\u08e8\u0003\u0336"+
		"\u019b\u0000\u08e7\u08e5\u0001\u0000\u0000\u0000\u08e7\u08e6\u0001\u0000"+
		"\u0000\u0000\u08e8\u08e9\u0001\u0000\u0000\u0000\u08e9\u08ea\u0005\u021b"+
		"\u0000\u0000\u08ea\u08eb\u0003\u0252\u0129\u0000\u08eb\u0115\u0001\u0000"+
		"\u0000\u0000\u08ec\u08ee\u0005O\u0000\u0000\u08ed\u08ef\u0003\u0302\u0181"+
		"\u0000\u08ee\u08ed\u0001\u0000\u0000\u0000\u08ee\u08ef\u0001\u0000\u0000"+
		"\u0000\u08ef\u08f2\u0001\u0000\u0000\u0000\u08f0\u08f1\u0005\u01b9\u0000"+
		"\u0000\u08f1\u08f3\u0003\u0224\u0112\u0000\u08f2\u08f0\u0001\u0000\u0000"+
		"\u0000\u08f2\u08f3\u0001\u0000\u0000\u0000\u08f3\u0117\u0001\u0000\u0000"+
		"\u0000\u08f4\u08f6\u0005\u008d\u0000\u0000\u08f5\u08f7\u0003\u0302\u0181"+
		"\u0000\u08f6\u08f5\u0001\u0000\u0000\u0000\u08f6\u08f7\u0001\u0000\u0000"+
		"\u0000\u08f7\u08fa\u0001\u0000\u0000\u0000\u08f8\u08f9\u0005\u01b9\u0000"+
		"\u0000\u08f9\u08fb\u0003\u0224\u0112\u0000\u08fa\u08f8\u0001\u0000\u0000"+
		"\u0000\u08fa\u08fb\u0001\u0000\u0000\u0000\u08fb\u0119\u0001\u0000\u0000"+
		"\u0000\u08fc\u08fd\u0005\u00a0\u0000\u0000\u08fd\u08fe\u0003\u0302\u0181"+
		"\u0000\u08fe\u011b\u0001\u0000\u0000\u0000\u08ff\u0900\u0005\u00a9\u0000"+
		"\u0000\u0900\u0901\u0003\u0224\u0112\u0000\u0901\u0902\u0005\u0189\u0000"+
		"\u0000\u0902\u0906\u0003\u010e\u0087\u0000\u0903\u0905\u0003\u011e\u008f"+
		"\u0000\u0904\u0903\u0001\u0000\u0000\u0000\u0905\u0908\u0001\u0000\u0000"+
		"\u0000\u0906\u0904\u0001\u0000\u0000\u0000\u0906\u0907\u0001\u0000\u0000"+
		"\u0000\u0907\u090a\u0001\u0000\u0000\u0000\u0908\u0906\u0001\u0000\u0000"+
		"\u0000\u0909\u090b\u0003\u0120\u0090\u0000\u090a\u0909\u0001\u0000\u0000"+
		"\u0000\u090a\u090b\u0001\u0000\u0000\u0000\u090b\u090c\u0001\u0000\u0000"+
		"\u0000\u090c\u090d\u0005\u0081\u0000\u0000\u090d\u090e\u0005\u00a9\u0000"+
		"\u0000\u090e\u011d\u0001\u0000\u0000\u0000\u090f\u0910\u0005}\u0000\u0000"+
		"\u0910\u0911\u0003\u0224\u0112\u0000\u0911\u0912\u0005\u0189\u0000\u0000"+
		"\u0912\u0913\u0003\u010e\u0087\u0000\u0913\u011f\u0001\u0000\u0000\u0000"+
		"\u0914\u0915\u0005|\u0000\u0000\u0915\u0916\u0003\u010e\u0087\u0000\u0916"+
		"\u0121\u0001\u0000\u0000\u0000\u0917\u0919\u0003\u0302\u0181\u0000\u0918"+
		"\u0917\u0001\u0000\u0000\u0000\u0918\u0919\u0001\u0000\u0000\u0000\u0919"+
		"\u091e\u0001\u0000\u0000\u0000\u091a\u091b\u0005\u01bc\u0000\u0000\u091b"+
		"\u091f\u0003\u0224\u0112\u0000\u091c\u091d\u0005\u009a\u0000\u0000\u091d"+
		"\u091f\u0003\u0124\u0092\u0000\u091e\u091a\u0001\u0000\u0000\u0000\u091e"+
		"\u091c\u0001\u0000\u0000\u0000\u091e\u091f\u0001\u0000\u0000\u0000\u091f"+
		"\u0920\u0001\u0000\u0000\u0000\u0920\u0921\u0005\u00dc\u0000\u0000\u0921"+
		"\u0922\u0003\u010e\u0087\u0000\u0922\u0923\u0005\u0081\u0000\u0000\u0923"+
		"\u0925\u0005\u00dc\u0000\u0000\u0924\u0926\u0003\u0302\u0181\u0000\u0925"+
		"\u0924\u0001\u0000\u0000\u0000\u0925\u0926\u0001\u0000\u0000\u0000\u0926"+
		"\u0123\u0001\u0000\u0000\u0000\u0927\u0928\u0003\u0312\u0189\u0000\u0928"+
		"\u092a\u0005\u00ac\u0000\u0000\u0929\u092b\u0005\u0146\u0000\u0000\u092a"+
		"\u0929\u0001\u0000\u0000\u0000\u092a\u092b\u0001\u0000\u0000\u0000\u092b"+
		"\u092c\u0001\u0000\u0000\u0000\u092c\u092d\u0003\u012c\u0096\u0000\u092d"+
		"\u092e\u0005\u0004\u0000\u0000\u092e\u092f\u0003\u012e\u0097\u0000\u092f"+
		"\u093d\u0001\u0000\u0000\u0000\u0930\u0931\u0003\u0316\u018b\u0000\u0931"+
		"\u093a\u0005\u00ac\u0000\u0000\u0932\u0934\u0003J%\u0000\u0933\u0935\u0003"+
		"\u0222\u0111\u0000\u0934\u0933\u0001\u0000\u0000\u0000\u0934\u0935\u0001"+
		"\u0000\u0000\u0000\u0935\u093b\u0001\u0000\u0000\u0000\u0936\u0937\u0005"+
		"\u0212\u0000\u0000\u0937\u0938\u0003\u0164\u00b2\u0000\u0938\u0939\u0005"+
		"\u0213\u0000\u0000\u0939\u093b\u0001\u0000\u0000\u0000\u093a\u0932\u0001"+
		"\u0000\u0000\u0000\u093a\u0936\u0001\u0000\u0000\u0000\u093b\u093d\u0001"+
		"\u0000\u0000\u0000\u093c\u0927\u0001\u0000\u0000\u0000\u093c\u0930\u0001"+
		"\u0000\u0000\u0000\u093d\u0125\u0001\u0000\u0000\u0000\u093e\u093f\u0005"+
		"\u009b\u0000\u0000\u093f\u0940\u0003\u0312\u0189\u0000\u0940\u0941\u0005"+
		"\u00ac\u0000\u0000\u0941\u0942\u0003\u0128\u0094\u0000\u0942\u0945\u0003"+
		"\u0142\u00a1\u0000\u0943\u0944\u0005\u0150\u0000\u0000\u0944\u0946\u0005"+
		"\u0088\u0000\u0000\u0945\u0943\u0001\u0000\u0000\u0000\u0945\u0946\u0001"+
		"\u0000\u0000\u0000\u0946\u0127\u0001\u0000\u0000\u0000\u0947\u0948\u0003"+
		"\u012c\u0096\u0000\u0948\u0949\u0005\u0004\u0000\u0000\u0949\u094a\u0003"+
		"\u012e\u0097\u0000\u094a\u0955\u0001\u0000\u0000\u0000\u094b\u094c\u0005"+
		"\u00b4\u0000\u0000\u094c\u094d\u0005\u010a\u0000\u0000\u094d\u094f\u0003"+
		"\u0318\u018c\u0000\u094e\u0950\u0003\u012a\u0095\u0000\u094f\u094e\u0001"+
		"\u0000\u0000\u0000\u094f\u0950\u0001\u0000\u0000\u0000\u0950\u0955\u0001"+
		"\u0000\u0000\u0000\u0951\u0952\u0005\u01ad\u0000\u0000\u0952\u0953\u0005"+
		"\u010a\u0000\u0000\u0953\u0955\u0003\u0312\u0189\u0000\u0954\u0947\u0001"+
		"\u0000\u0000\u0000\u0954\u094b\u0001\u0000\u0000\u0000\u0954\u0951\u0001"+
		"\u0000\u0000\u0000\u0955\u0129\u0001\u0000\u0000\u0000\u0956\u0957\u0005"+
		"!\u0000\u0000\u0957\u0958\u0003\u012c\u0096\u0000\u0958\u0959\u0005\u0011"+
		"\u0000\u0000\u0959\u095a\u0003\u012e\u0097\u0000\u095a\u012b\u0001\u0000"+
		"\u0000\u0000\u095b\u095c\u0003\u026e\u0137\u0000\u095c\u012d\u0001\u0000"+
		"\u0000\u0000\u095d\u095e\u0003\u026e\u0137\u0000\u095e\u012f\u0001\u0000"+
		"\u0000\u0000\u095f\u0960\u0005\u0104\u0000\u0000\u0960\u0131\u0001\u0000"+
		"\u0000\u0000\u0961\u0963\u0005\u0130\u0000\u0000\u0962\u0964\u0003\u0308"+
		"\u0184\u0000\u0963\u0962\u0001\u0000\u0000\u0000\u0963\u0964\u0001\u0000"+
		"\u0000\u0000\u0964\u0133\u0001\u0000\u0000\u0000\u0965\u0967\u0005\u0142"+
		"\u0000\u0000\u0966\u0968\u0003\u0224\u0112\u0000\u0967\u0966\u0001\u0000"+
		"\u0000\u0000\u0967\u0968\u0001\u0000\u0000\u0000\u0968\u096c\u0001\u0000"+
		"\u0000\u0000\u0969\u096a\u0005\u0142\u0000\u0000\u096a\u096c\u0003\u0164"+
		"\u00b2\u0000\u096b\u0965\u0001\u0000\u0000\u0000\u096b\u0969\u0001\u0000"+
		"\u0000\u0000\u096c\u0135\u0001\u0000\u0000\u0000\u096d\u096f\u00052\u0000"+
		"\u0000\u096e\u096d\u0001\u0000\u0000\u0000\u096e\u096f\u0001\u0000\u0000"+
		"\u0000\u096f\u0970\u0001\u0000\u0000\u0000\u0970\u0972\u0003\u02f2\u0179"+
		"\u0000\u0971\u0973\u0003\u0324\u0192\u0000\u0972\u0971\u0001\u0000\u0000"+
		"\u0000\u0972\u0973\u0001\u0000\u0000\u0000\u0973\u0137\u0001\u0000\u0000"+
		"\u0000\u0974\u0975\u0005 \u0000\u0000\u0975\u0977\u0003\u010e\u0087\u0000"+
		"\u0976\u0978\u0003\u013a\u009d\u0000\u0977\u0976\u0001\u0000\u0000\u0000"+
		"\u0977\u0978\u0001\u0000\u0000\u0000\u0978\u0979\u0001\u0000\u0000\u0000"+
		"\u0979\u097b\u0005\u0081\u0000\u0000\u097a\u097c\u0003\u0302\u0181\u0000"+
		"\u097b\u097a\u0001\u0000\u0000\u0000\u097b\u097c\u0001\u0000\u0000\u0000"+
		"\u097c\u0139\u0001\u0000\u0000\u0000\u097d\u097f\u0005\u0086\u0000\u0000"+
		"\u097e\u0980\u0003\u013c\u009e\u0000\u097f\u097e\u0001\u0000\u0000\u0000"+
		"\u0980\u0981\u0001\u0000\u0000\u0000\u0981\u097f\u0001\u0000\u0000\u0000"+
		"\u0981\u0982\u0001\u0000\u0000\u0000\u0982\u013b\u0001\u0000\u0000\u0000"+
		"\u0983\u0984\u0005\u01b9\u0000\u0000\u0984\u0989\u0003\u0308\u0184\u0000"+
		"\u0985\u0986\u0005\u0112\u0000\u0000\u0986\u0988\u0003\u0308\u0184\u0000"+
		"\u0987\u0985\u0001\u0000\u0000\u0000\u0988\u098b\u0001\u0000\u0000\u0000"+
		"\u0989\u0987\u0001\u0000\u0000\u0000\u0989\u098a\u0001\u0000\u0000\u0000"+
		"\u098a\u098c\u0001\u0000\u0000\u0000\u098b\u0989\u0001\u0000\u0000\u0000"+
		"\u098c\u098d\u0005\u0189\u0000\u0000\u098d\u098e\u0003\u010e\u0087\u0000"+
		"\u098e\u013d\u0001\u0000\u0000\u0000\u098f\u0991\u0005g\u0000\u0000\u0990"+
		"\u098f\u0001\u0000\u0000\u0000\u0990\u0991\u0001\u0000\u0000\u0000\u0991"+
		"\u0993\u0001\u0000\u0000\u0000\u0992\u0994\u0003\u00eew\u0000\u0993\u0992"+
		"\u0001\u0000\u0000\u0000\u0994\u0995\u0001\u0000\u0000\u0000\u0995\u0993"+
		"\u0001\u0000\u0000\u0000\u0995\u0996\u0001\u0000\u0000\u0000\u0996\u0998"+
		"\u0001\u0000\u0000\u0000\u0997\u0990\u0001\u0000\u0000\u0000\u0997\u0998"+
		"\u0001\u0000\u0000\u0000\u0998\u0999\u0001\u0000\u0000\u0000\u0999\u099a"+
		"\u0003\u0138\u009c\u0000\u099a\u013f\u0001\u0000\u0000\u0000\u099b\u099d"+
		"\u0005g\u0000\u0000\u099c\u099b\u0001\u0000\u0000\u0000\u099c\u099d\u0001"+
		"\u0000\u0000\u0000\u099d\u099f\u0001\u0000\u0000\u0000\u099e\u09a0\u0003"+
		"\u00eew\u0000\u099f\u099e\u0001\u0000\u0000\u0000\u09a0\u09a1\u0001\u0000"+
		"\u0000\u0000\u09a1\u099f\u0001\u0000\u0000\u0000\u09a1\u09a2\u0001\u0000"+
		"\u0000\u0000\u09a2\u09a3\u0001\u0000\u0000\u0000\u09a3\u09a4\u0003\u0138"+
		"\u009c\u0000\u09a4\u0141\u0001\u0000\u0000\u0000\u09a5\u09aa\u0003\u0144"+
		"\u00a2\u0000\u09a6\u09aa\u0003\u0148\u00a4\u0000\u09a7\u09aa\u0003\u014a"+
		"\u00a5\u0000\u09a8\u09aa\u0003\u0154\u00aa\u0000\u09a9\u09a5\u0001\u0000"+
		"\u0000\u0000\u09a9\u09a6\u0001\u0000\u0000\u0000\u09a9\u09a7\u0001\u0000"+
		"\u0000\u0000\u09a9\u09a8\u0001\u0000\u0000\u0000\u09aa\u0143\u0001\u0000"+
		"\u0000\u0000\u09ab\u09ac\u0005\u008b\u0000\u0000\u09ac\u09ad\u0005\u00ab"+
		"\u0000\u0000\u09ad\u09b7\u0003\u0252\u0129\u0000\u09ae\u09b0\u0003\u02e2"+
		"\u0171\u0000\u09af\u09b1\u0003\u02ac\u0156\u0000\u09b0\u09af\u0001\u0000"+
		"\u0000\u0000\u09b0\u09b1\u0001\u0000\u0000\u0000\u09b1\u09b8\u0001\u0000"+
		"\u0000\u0000\u09b2\u09b4\u0003\u02ac\u0156\u0000\u09b3\u09b5\u0003\u0146"+
		"\u00a3\u0000\u09b4\u09b3\u0001\u0000\u0000\u0000\u09b4\u09b5\u0001\u0000"+
		"\u0000\u0000\u09b5\u09b8\u0001\u0000\u0000\u0000\u09b6\u09b8\u0003\u0146"+
		"\u00a3\u0000\u09b7\u09ae\u0001\u0000\u0000\u0000\u09b7\u09b2\u0001\u0000"+
		"\u0000\u0000\u09b7\u09b6\u0001\u0000\u0000\u0000\u09b7\u09b8\u0001\u0000"+
		"\u0000\u0000\u09b8\u0145\u0001\u0000\u0000\u0000\u09b9\u09ba\u0007\u000e"+
		"\u0000\u0000\u09ba\u09bb\u0003\u02e2\u0171\u0000\u09bb\u0147\u0001\u0000"+
		"\u0000\u0000\u09bc\u09c6\u0003\u01f8\u00fc\u0000\u09bd\u09c6\u0003\u0204"+
		"\u0102\u0000\u09be\u09c6\u0003\u01e2\u00f1\u0000\u09bf\u09c6\u0003\u01e4"+
		"\u00f2\u0000\u09c0\u09c6\u0003\u0164\u00b2\u0000\u09c1\u09c6\u0003\u01d8"+
		"\u00ec\u0000\u09c2\u09c6\u0003\u01de\u00ef\u0000\u09c3\u09c6\u0003\u01e0"+
		"\u00f0\u0000\u09c4\u09c6\u0003\u0162\u00b1\u0000\u09c5\u09bc\u0001\u0000"+
		"\u0000\u0000\u09c5\u09bd\u0001\u0000\u0000\u0000\u09c5\u09be\u0001\u0000"+
		"\u0000\u0000\u09c5\u09bf\u0001\u0000\u0000\u0000\u09c5\u09c0\u0001\u0000"+
		"\u0000\u0000\u09c5\u09c1\u0001\u0000\u0000\u0000\u09c5\u09c2\u0001\u0000"+
		"\u0000\u0000\u09c5\u09c3\u0001\u0000\u0000\u0000\u09c5\u09c4\u0001\u0000"+
		"\u0000\u0000\u09c6\u0149\u0001\u0000\u0000\u0000\u09c7\u09cc\u0003\u014c"+
		"\u00a6\u0000\u09c8\u09cc\u0003\u014e\u00a7\u0000\u09c9\u09cc\u0003\u0150"+
		"\u00a8\u0000\u09ca\u09cc\u0003\u0152\u00a9\u0000\u09cb\u09c7\u0001\u0000"+
		"\u0000\u0000\u09cb\u09c8\u0001\u0000\u0000\u0000\u09cb\u09c9\u0001\u0000"+
		"\u0000\u0000\u09cb\u09ca\u0001\u0000\u0000\u0000\u09cc\u014b\u0001\u0000"+
		"\u0000\u0000\u09cd\u09ce\u0005=\u0000\u0000\u09ce\u09cf\u0003J%\u0000"+
		"\u09cf\u014d\u0001\u0000\u0000\u0000\u09d0\u09d1\u0005\u0110\u0000\u0000"+
		"\u09d1\u09d3\u0003J%\u0000\u09d2\u09d4\u0003\u0222\u0111\u0000\u09d3\u09d2"+
		"\u0001\u0000\u0000\u0000\u09d3\u09d4\u0001\u0000\u0000\u0000\u09d4\u014f"+
		"\u0001\u0000\u0000\u0000\u09d5\u09d6\u0005\u0093\u0000\u0000\u09d6\u09eb"+
		"\u0003J%\u0000\u09d7\u09d8\u0005\u00c0\u0000\u0000\u09d8\u09dd\u0003H"+
		"$\u0000\u09d9\u09da\u0005\u0218\u0000\u0000\u09da\u09dc\u0003H$\u0000"+
		"\u09db\u09d9\u0001\u0000\u0000\u0000\u09dc\u09df\u0001\u0000\u0000\u0000"+
		"\u09dd\u09db\u0001\u0000\u0000\u0000\u09dd\u09de\u0001\u0000\u0000\u0000"+
		"\u09de\u09ec\u0001\u0000\u0000\u0000\u09df\u09dd\u0001\u0000\u0000\u0000"+
		"\u09e0\u09e1\u0005-\u0000\u0000\u09e1\u09e2\u0005?\u0000\u0000\u09e2\u09e3"+
		"\u0005\u00c0\u0000\u0000\u09e3\u09e8\u0003H$\u0000\u09e4\u09e5\u0005\u0218"+
		"\u0000\u0000\u09e5\u09e7\u0003H$\u0000\u09e6\u09e4\u0001\u0000\u0000\u0000"+
		"\u09e7\u09ea\u0001\u0000\u0000\u0000\u09e8\u09e6\u0001\u0000\u0000\u0000"+
		"\u09e8\u09e9\u0001\u0000\u0000\u0000\u09e9\u09ec\u0001\u0000\u0000\u0000"+
		"\u09ea\u09e8\u0001\u0000\u0000\u0000\u09eb\u09d7\u0001\u0000\u0000\u0000"+
		"\u09eb\u09e0\u0001\u0000\u0000\u0000\u09ec\u0151\u0001\u0000\u0000\u0000"+
		"\u09ed\u09ee\u0005\u0110\u0000\u0000\u09ee\u09ef\u0003H$\u0000\u09ef\u09f2"+
		"\u0005\u009a\u0000\u0000\u09f0\u09f3\u0003\u0164\u00b2\u0000\u09f1\u09f3"+
		"\u0003\u0252\u0129\u0000\u09f2\u09f0\u0001\u0000\u0000\u0000\u09f2\u09f1"+
		"\u0001\u0000\u0000\u0000\u09f3\u09f5\u0001\u0000\u0000\u0000\u09f4\u09f6"+
		"\u0003\u02ac\u0156\u0000\u09f5\u09f4\u0001\u0000\u0000\u0000\u09f5\u09f6"+
		"\u0001\u0000\u0000\u0000\u09f6\u0153\u0001\u0000\u0000\u0000\u09f7\u09fd"+
		"\u0003\u0156\u00ab\u0000\u09f8\u09fd\u0003\u0158\u00ac\u0000\u09f9\u09fd"+
		"\u0003\u015a\u00ad\u0000\u09fa\u09fd\u0003\u015e\u00af\u0000\u09fb\u09fd"+
		"\u0003\u0160\u00b0\u0000\u09fc\u09f7\u0001\u0000\u0000\u0000\u09fc\u09f8"+
		"\u0001\u0000\u0000\u0000\u09fc\u09f9\u0001\u0000\u0000\u0000\u09fc\u09fa"+
		"\u0001\u0000\u0000\u0000\u09fc\u09fb\u0001\u0000\u0000\u0000\u09fd\u0155"+
		"\u0001\u0000\u0000\u0000\u09fe\u09ff\u0005\u0163\u0000\u0000\u09ff\u0a0d"+
		"\u0005\u0196\u0000\u0000\u0a00\u0a01\u0005\u0133\u0000\u0000\u0a01\u0a0e"+
		"\u0007\u000f\u0000\u0000\u0a02\u0a03\u0005\u00c4\u0000\u0000\u0a03\u0a07"+
		"\u0005\u00ce\u0000\u0000\u0a04\u0a08\u0005\u015f\u0000\u0000\u0a05\u0a06"+
		"\u0005\u0133\u0000\u0000\u0a06\u0a08\u0005C\u0000\u0000\u0a07\u0a04\u0001"+
		"\u0000\u0000\u0000\u0a07\u0a05\u0001\u0000\u0000\u0000\u0a08\u0a0e\u0001"+
		"\u0000\u0000\u0000\u0a09\u0a0a\u0005\u01a9\u0000\u0000\u0a0a\u0a0b\u0005"+
		"\u0149\u0000\u0000\u0a0b\u0a0c\u0005\u015a\u0000\u0000\u0a0c\u0a0e\u0003"+
		"\u02ec\u0176\u0000\u0a0d\u0a00\u0001\u0000\u0000\u0000\u0a0d\u0a02\u0001"+
		"\u0000\u0000\u0000\u0a0d\u0a09\u0001\u0000\u0000\u0000\u0a0d\u0a0e\u0001"+
		"\u0000\u0000\u0000\u0a0e\u0a11\u0001\u0000\u0000\u0000\u0a0f\u0a10\u0005"+
		"\u00ed\u0000\u0000\u0a10\u0a12\u0003\u034c\u01a6\u0000\u0a11\u0a0f\u0001"+
		"\u0000\u0000\u0000\u0a11\u0a12\u0001\u0000\u0000\u0000\u0a12\u0157\u0001"+
		"\u0000\u0000\u0000\u0a13\u0a14\u0005\u0163\u0000\u0000\u0a14\u0a1e\u0007"+
		"\u0010\u0000\u0000\u0a15\u0a1f\u0005\r\u0000\u0000\u0a16\u0a1b\u0003\u0300"+
		"\u0180\u0000\u0a17\u0a18\u0005\u0218\u0000\u0000\u0a18\u0a1a\u0003\u0300"+
		"\u0180\u0000\u0a19\u0a17\u0001\u0000\u0000\u0000\u0a1a\u0a1d\u0001\u0000"+
		"\u0000\u0000\u0a1b\u0a19\u0001\u0000\u0000\u0000\u0a1b\u0a1c\u0001\u0000"+
		"\u0000\u0000\u0a1c\u0a1f\u0001\u0000\u0000\u0000\u0a1d\u0a1b\u0001\u0000"+
		"\u0000\u0000\u0a1e\u0a15\u0001\u0000\u0000\u0000\u0a1e\u0a16\u0001\u0000"+
		"\u0000\u0000\u0a1f\u0a20\u0001\u0000\u0000\u0000\u0a20\u0a21\u0007\u0011"+
		"\u0000\u0000\u0a21\u0159\u0001\u0000\u0000\u0000\u0a22\u0a24\u0005B\u0000"+
		"\u0000\u0a23\u0a25\u0005\u01bf\u0000\u0000\u0a24\u0a23\u0001\u0000\u0000"+
		"\u0000\u0a24\u0a25\u0001\u0000\u0000\u0000\u0a25\u0a33\u0001\u0000\u0000"+
		"\u0000\u0a26\u0a27\u0005A\u0000\u0000\u0a27\u0a34\u0003\u0252\u0129\u0000"+
		"\u0a28\u0a31\u0005\u009c\u0000\u0000\u0a29\u0a2a\u0005Q\u0000\u0000\u0a2a"+
		"\u0a32\u0003\u0252\u0129\u0000\u0a2b\u0a32\u0005R\u0000\u0000\u0a2c\u0a2f"+
		"\u0003\u0252\u0129\u0000\u0a2d\u0a2e\u0005\u0218\u0000\u0000\u0a2e\u0a30"+
		"\u0003\u0252\u0129\u0000\u0a2f\u0a2d\u0001\u0000\u0000\u0000\u0a2f\u0a30"+
		"\u0001\u0000\u0000\u0000\u0a30\u0a32\u0001\u0000\u0000\u0000\u0a31\u0a29"+
		"\u0001\u0000\u0000\u0000\u0a31\u0a2b\u0001\u0000\u0000\u0000\u0a31\u0a2c"+
		"\u0001\u0000\u0000\u0000\u0a32\u0a34\u0001\u0000\u0000\u0000\u0a33\u0a26"+
		"\u0001\u0000\u0000\u0000\u0a33\u0a28\u0001\u0000\u0000\u0000\u0a33\u0a34"+
		"\u0001\u0000\u0000\u0000\u0a34\u0a36\u0001\u0000\u0000\u0000\u0a35\u0a37"+
		"\u0003\u015c\u00ae\u0000\u0a36\u0a35\u0001\u0000\u0000\u0000\u0a36\u0a37"+
		"\u0001\u0000\u0000\u0000\u0a37\u015b\u0001\u0000\u0000\u0000\u0a38\u0a3a"+
		"\u0005\u01c0\u0000\u0000\u0a39\u0a3b\u0007\u0012\u0000\u0000\u0a3a\u0a39"+
		"\u0001\u0000\u0000\u0000\u0a3a\u0a3b\u0001\u0000\u0000\u0000\u0a3b\u0a3d"+
		"\u0001\u0000\u0000\u0000\u0a3c\u0a3e\u0007\u0013\u0000\u0000\u0a3d\u0a3c"+
		"\u0001\u0000\u0000\u0000\u0a3d\u0a3e\u0001\u0000\u0000\u0000\u0a3e\u015d"+
		"\u0001\u0000\u0000\u0000\u0a3f\u0a41\u0005\u0149\u0000\u0000\u0a40\u0a42"+
		"\u0005\u01bf\u0000\u0000\u0a41\u0a40\u0001\u0000\u0000\u0000\u0a41\u0a42"+
		"\u0001\u0000\u0000\u0000\u0a42\u0a4a\u0001\u0000\u0000\u0000\u0a43\u0a45"+
		"\u0005\u0194\u0000\u0000\u0a44\u0a46\u0005\u0151\u0000\u0000\u0a45\u0a44"+
		"\u0001\u0000\u0000\u0000\u0a45\u0a46\u0001\u0000\u0000\u0000\u0a46\u0a47"+
		"\u0001\u0000\u0000\u0000\u0a47\u0a4b\u0003\u02ea\u0175\u0000\u0a48\u0a49"+
		"\u0005\u009c\u0000\u0000\u0a49\u0a4b\u0003\u034c\u01a6\u0000\u0a4a\u0a43"+
		"\u0001\u0000\u0000\u0000\u0a4a\u0a48\u0001\u0000\u0000\u0000\u0a4a\u0a4b"+
		"\u0001\u0000\u0000\u0000\u0a4b\u015f\u0001\u0000\u0000\u0000\u0a4c\u0a4d"+
		"\u0005\u0151\u0000\u0000\u0a4d\u0a4e\u0003\u02ea\u0175\u0000\u0a4e\u0161"+
		"\u0001\u0000\u0000\u0000\u0a4f\u0a50\u0005\u008e\u0000\u0000\u0a50\u0a55"+
		"\u0005\u0126\u0000\u0000\u0a51\u0a52\u0005\u0163\u0000\u0000\u0a52\u0a53"+
		"\u0005\u017d\u0000\u0000\u0a53\u0a54\u0005\u0229\u0000\u0000\u0a54\u0a56"+
		"\u0003\u034c\u01a6\u0000\u0a55\u0a51\u0001\u0000\u0000\u0000\u0a55\u0a56"+
		"\u0001\u0000\u0000\u0000\u0a56\u0a59\u0001\u0000\u0000\u0000\u0a57\u0a58"+
		"\u0005\u00c0\u0000\u0000\u0a58\u0a5a\u0003\u031e\u018f\u0000\u0a59\u0a57"+
		"\u0001\u0000\u0000\u0000\u0a59\u0a5a\u0001\u0000\u0000\u0000\u0a5a\u0a5b"+
		"\u0001\u0000\u0000\u0000\u0a5b\u0a61\u0005\u009a\u0000\u0000\u0a5c\u0a62"+
		"\u0003\u0164\u00b2\u0000\u0a5d\u0a62\u0003\u01d8\u00ec\u0000\u0a5e\u0a62"+
		"\u0003\u01de\u00ef\u0000\u0a5f\u0a62\u0003\u01e0\u00f0\u0000\u0a60\u0a62"+
		"\u0003\u01f8\u00fc\u0000\u0a61\u0a5c\u0001\u0000\u0000\u0000\u0a61\u0a5d"+
		"\u0001\u0000\u0000\u0000\u0a61\u0a5e\u0001\u0000\u0000\u0000\u0a61\u0a5f"+
		"\u0001\u0000\u0000\u0000\u0a61\u0a60\u0001\u0000\u0000\u0000\u0a62\u0163"+
		"\u0001\u0000\u0000\u0000\u0a63\u0a65\u0003\u0166\u00b3\u0000\u0a64\u0a63"+
		"\u0001\u0000\u0000\u0000\u0a64\u0a65\u0001\u0000\u0000\u0000\u0a65\u0a66"+
		"\u0001\u0000\u0000\u0000\u0a66\u0a6b\u0003\u016e\u00b7\u0000\u0a67\u0a6a"+
		"\u0003\u01d2\u00e9\u0000\u0a68\u0a6a\u0003\u01ce\u00e7\u0000\u0a69\u0a67"+
		"\u0001\u0000\u0000\u0000\u0a69\u0a68\u0001\u0000\u0000\u0000\u0a6a\u0a6d"+
		"\u0001\u0000\u0000\u0000\u0a6b\u0a69\u0001\u0000\u0000\u0000\u0a6b\u0a6c"+
		"\u0001\u0000\u0000\u0000\u0a6c\u0165\u0001\u0000\u0000\u0000\u0a6d\u0a6b"+
		"\u0001\u0000\u0000\u0000\u0a6e\u0a6f\u0005\u01bd\u0000\u0000\u0a6f\u0a74"+
		"\u0003\u0168\u00b4\u0000\u0a70\u0a71\u0005\u0218\u0000\u0000\u0a71\u0a73"+
		"\u0003\u0168\u00b4\u0000\u0a72\u0a70\u0001\u0000\u0000\u0000\u0a73\u0a76"+
		"\u0001\u0000\u0000\u0000\u0a74\u0a72\u0001\u0000\u0000\u0000\u0a74\u0a75"+
		"\u0001\u0000\u0000\u0000\u0a75\u0167\u0001\u0000\u0000\u0000\u0a76\u0a74"+
		"\u0001\u0000\u0000\u0000\u0a77\u0a83\u0003\u02fe\u017f\u0000\u0a78\u0a79"+
		"\u0005\u0212\u0000\u0000\u0a79\u0a7e\u0003\"\u0011\u0000\u0a7a\u0a7b\u0005"+
		"\u0218\u0000\u0000\u0a7b\u0a7d\u0003\"\u0011\u0000\u0a7c\u0a7a\u0001\u0000"+
		"\u0000\u0000\u0a7d\u0a80\u0001\u0000\u0000\u0000\u0a7e\u0a7c\u0001\u0000"+
		"\u0000\u0000\u0a7e\u0a7f\u0001\u0000\u0000\u0000\u0a7f\u0a81\u0001\u0000"+
		"\u0000\u0000\u0a80\u0a7e\u0001\u0000\u0000\u0000\u0a81\u0a82\u0005\u0213"+
		"\u0000\u0000\u0a82\u0a84\u0001\u0000\u0000\u0000\u0a83\u0a78\u0001\u0000"+
		"\u0000\u0000\u0a83\u0a84\u0001\u0000\u0000\u0000\u0a84\u0a85\u0001\u0000"+
		"\u0000\u0000\u0a85\u0a86\u0005\u0014\u0000\u0000\u0a86\u0a87\u0005\u0212"+
		"\u0000\u0000\u0a87\u0a89\u0003\u016e\u00b7\u0000\u0a88\u0a8a\u0003\u01ce"+
		"\u00e7\u0000\u0a89\u0a88\u0001\u0000\u0000\u0000\u0a89\u0a8a\u0001\u0000"+
		"\u0000\u0000\u0a8a\u0a8b\u0001\u0000\u0000\u0000\u0a8b\u0a8d\u0005\u0213"+
		"\u0000\u0000\u0a8c\u0a8e\u0003\u016a\u00b5\u0000\u0a8d\u0a8c\u0001\u0000"+
		"\u0000\u0000\u0a8d\u0a8e\u0001\u0000\u0000\u0000\u0a8e\u0a90\u0001\u0000"+
		"\u0000\u0000\u0a8f\u0a91\u0003\u016c\u00b6\u0000\u0a90\u0a8f\u0001\u0000"+
		"\u0000\u0000\u0a90\u0a91\u0001\u0000\u0000\u0000\u0a91\u0169\u0001\u0000"+
		"\u0000\u0000\u0a92\u0a93\u0005\u0155\u0000\u0000\u0a93\u0a94\u0007\u0014"+
		"\u0000\u0000\u0a94\u0a95\u0005\u0095\u0000\u0000\u0a95\u0a96\u0005.\u0000"+
		"\u0000\u0a96\u0a98\u0003\"\u0011\u0000\u0a97\u0a99\u0005\u0015\u0000\u0000"+
		"\u0a98\u0a97\u0001\u0000\u0000\u0000\u0a98\u0a99\u0001\u0000\u0000\u0000"+
		"\u0a99\u0a9b\u0001\u0000\u0000\u0000\u0a9a\u0a9c\u0005p\u0000\u0000\u0a9b"+
		"\u0a9a\u0001\u0000\u0000\u0000\u0a9b\u0a9c\u0001\u0000\u0000\u0000\u0a9c"+
		"\u0a9f\u0001\u0000\u0000\u0000\u0a9d\u0a9e\u0005\u0105\u0000\u0000\u0a9e"+
		"\u0aa0\u0005\u0095\u0000\u0000\u0a9f\u0a9d\u0001\u0000\u0000\u0000\u0a9f"+
		"\u0aa0\u0001\u0000\u0000\u0000\u0aa0\u0aa3\u0001\u0000\u0000\u0000\u0aa1"+
		"\u0aa2\u0005\u0105\u0000\u0000\u0aa2\u0aa4\u0005\u00ca\u0000\u0000\u0aa3"+
		"\u0aa1\u0001\u0000\u0000\u0000\u0aa3\u0aa4\u0001\u0000\u0000\u0000\u0aa4"+
		"\u0ab7\u0001\u0000\u0000\u0000\u0aa5\u0aa6\u0005\u0218\u0000\u0000\u0aa6"+
		"\u0aa8\u0003\"\u0011\u0000\u0aa7\u0aa9\u0005\u0015\u0000\u0000\u0aa8\u0aa7"+
		"\u0001\u0000\u0000\u0000\u0aa8\u0aa9\u0001\u0000\u0000\u0000\u0aa9\u0aab"+
		"\u0001\u0000\u0000\u0000\u0aaa\u0aac\u0005p\u0000\u0000\u0aab\u0aaa\u0001"+
		"\u0000\u0000\u0000\u0aab\u0aac\u0001\u0000\u0000\u0000\u0aac\u0aaf\u0001"+
		"\u0000\u0000\u0000\u0aad\u0aae\u0005\u0105\u0000\u0000\u0aae\u0ab0\u0005"+
		"\u0095\u0000\u0000\u0aaf\u0aad\u0001\u0000\u0000\u0000\u0aaf\u0ab0\u0001"+
		"\u0000\u0000\u0000\u0ab0\u0ab3\u0001\u0000\u0000\u0000\u0ab1\u0ab2\u0005"+
		"\u0105\u0000\u0000\u0ab2\u0ab4\u0005\u00ca\u0000\u0000\u0ab3\u0ab1\u0001"+
		"\u0000\u0000\u0000\u0ab3\u0ab4\u0001\u0000\u0000\u0000\u0ab4\u0ab6\u0001"+
		"\u0000\u0000\u0000\u0ab5\u0aa5\u0001\u0000\u0000\u0000\u0ab6\u0ab9\u0001"+
		"\u0000\u0000\u0000\u0ab7\u0ab5\u0001\u0000\u0000\u0000\u0ab7\u0ab8\u0001"+
		"\u0000\u0000\u0000\u0ab8\u0aba\u0001\u0000\u0000\u0000\u0ab9\u0ab7\u0001"+
		"\u0000\u0000\u0000\u0aba\u0abb\u0005\u0163\u0000\u0000\u0abb\u0abc\u0003"+
		"\"\u0011\u0000\u0abc\u016b\u0001\u0000\u0000\u0000\u0abd\u0abe\u0005\\"+
		"\u0000\u0000\u0abe\u0ac3\u0003\"\u0011\u0000\u0abf\u0ac0\u0005\u0218\u0000"+
		"\u0000\u0ac0\u0ac2\u0003\"\u0011\u0000\u0ac1\u0abf\u0001\u0000\u0000\u0000"+
		"\u0ac2\u0ac5\u0001\u0000\u0000\u0000\u0ac3\u0ac1\u0001\u0000\u0000\u0000"+
		"\u0ac3\u0ac4\u0001\u0000\u0000\u0000\u0ac4\u0ac6\u0001\u0000\u0000\u0000"+
		"\u0ac5\u0ac3\u0001\u0000\u0000\u0000\u0ac6\u0ac7\u0005\u0163\u0000\u0000"+
		"\u0ac7\u0ac8\u0003\"\u0011\u0000\u0ac8\u0ac9\u0005\u0194\u0000\u0000\u0ac9"+
		"\u0aca\u0003\u0252\u0129\u0000\u0aca\u0acb\u0005j\u0000\u0000\u0acb\u0acc"+
		"\u0003\u0252\u0129\u0000\u0acc\u016d\u0001\u0000\u0000\u0000\u0acd\u0ad1"+
		"\u0003\u0172\u00b9\u0000\u0ace\u0ad0\u0003\u0170\u00b8\u0000\u0acf\u0ace"+
		"\u0001\u0000\u0000\u0000\u0ad0\u0ad3\u0001\u0000\u0000\u0000\u0ad1\u0acf"+
		"\u0001\u0000\u0000\u0000\u0ad1\u0ad2\u0001\u0000\u0000\u0000\u0ad2\u016f"+
		"\u0001\u0000\u0000\u0000\u0ad3\u0ad1\u0001\u0000\u0000\u0000\u0ad4\u0ad6"+
		"\u0005\u01a0\u0000\u0000\u0ad5\u0ad7\u0005\r\u0000\u0000\u0ad6\u0ad5\u0001"+
		"\u0000\u0000\u0000\u0ad6\u0ad7\u0001\u0000\u0000\u0000\u0ad7\u0adb\u0001"+
		"\u0000\u0000\u0000\u0ad8\u0adb\u0005\u00be\u0000\u0000\u0ad9\u0adb\u0005"+
		"\u00e4\u0000\u0000\u0ada\u0ad4\u0001\u0000\u0000\u0000\u0ada\u0ad8\u0001"+
		"\u0000\u0000\u0000\u0ada\u0ad9\u0001\u0000\u0000\u0000\u0adb\u0adc\u0001"+
		"\u0000\u0000\u0000\u0adc\u0add\u0003\u0172\u00b9\u0000\u0add\u0171\u0001"+
		"\u0000\u0000\u0000\u0ade\u0ae4\u0003\u0174\u00ba\u0000\u0adf\u0ae0\u0005"+
		"\u0212\u0000\u0000\u0ae0\u0ae1\u0003\u016e\u00b7\u0000\u0ae1\u0ae2\u0005"+
		"\u0213\u0000\u0000\u0ae2\u0ae4\u0001\u0000\u0000\u0000\u0ae3\u0ade\u0001"+
		"\u0000\u0000\u0000\u0ae3\u0adf\u0001\u0000\u0000\u0000\u0ae4\u0173\u0001"+
		"\u0000\u0000\u0000\u0ae5\u0ae7\u0005\u015b\u0000\u0000\u0ae6\u0ae8\u0007"+
		"\u0015\u0000\u0000\u0ae7\u0ae6\u0001\u0000\u0000\u0000\u0ae7\u0ae8\u0001"+
		"\u0000\u0000\u0000\u0ae8\u0af2\u0001\u0000\u0000\u0000\u0ae9\u0af3\u0005"+
		"\u0215\u0000\u0000\u0aea\u0aef\u0003\u0176\u00bb\u0000\u0aeb\u0aec\u0005"+
		"\u0218\u0000\u0000\u0aec\u0aee\u0003\u0176\u00bb\u0000\u0aed\u0aeb\u0001"+
		"\u0000\u0000\u0000\u0aee\u0af1\u0001\u0000\u0000\u0000\u0aef\u0aed\u0001"+
		"\u0000\u0000\u0000\u0aef\u0af0\u0001\u0000\u0000\u0000\u0af0\u0af3\u0001"+
		"\u0000\u0000\u0000\u0af1\u0aef\u0001\u0000\u0000\u0000\u0af2\u0ae9\u0001"+
		"\u0000\u0000\u0000\u0af2\u0aea\u0001\u0000\u0000\u0000\u0af3\u0af5\u0001"+
		"\u0000\u0000\u0000\u0af4\u0af6\u0003\u02e2\u0171\u0000\u0af5\u0af4\u0001"+
		"\u0000\u0000\u0000\u0af5\u0af6\u0001\u0000\u0000\u0000\u0af6\u0af7\u0001"+
		"\u0000\u0000\u0000\u0af7\u0af9\u0003\u0178\u00bc\u0000\u0af8\u0afa\u0003"+
		"\u02de\u016f\u0000\u0af9\u0af8\u0001\u0000\u0000\u0000\u0af9\u0afa\u0001"+
		"\u0000\u0000\u0000\u0afa\u0afc\u0001\u0000\u0000\u0000\u0afb\u0afd\u0003"+
		"\u01a0\u00d0\u0000\u0afc\u0afb\u0001\u0000\u0000\u0000\u0afc\u0afd\u0001"+
		"\u0000\u0000\u0000\u0afd\u0aff\u0001\u0000\u0000\u0000\u0afe\u0b00\u0003"+
		"\u01a4\u00d2\u0000\u0aff\u0afe\u0001\u0000\u0000\u0000\u0aff\u0b00\u0001"+
		"\u0000\u0000\u0000\u0b00\u0b02\u0001\u0000\u0000\u0000\u0b01\u0b03\u0003"+
		"\u01b0\u00d8\u0000\u0b02\u0b01\u0001\u0000\u0000\u0000\u0b02\u0b03\u0001"+
		"\u0000\u0000\u0000\u0b03\u0175\u0001\u0000\u0000\u0000\u0b04\u0b06\u0003"+
		"\u017a\u00bd\u0000\u0b05\u0b07\u0003\u02d8\u016c\u0000\u0b06\u0b05\u0001"+
		"\u0000\u0000\u0000\u0b06\u0b07\u0001\u0000\u0000\u0000\u0b07\u0177\u0001"+
		"\u0000\u0000\u0000\u0b08\u0b09\u0005\u009d\u0000\u0000\u0b09\u0b0a\u0003"+
		"\u017c\u00be\u0000\u0b0a\u0179\u0001\u0000\u0000\u0000\u0b0b\u0b0c\u0003"+
		"\u031e\u018f\u0000\u0b0c\u0b0d\u0005\u020b\u0000\u0000\u0b0d\u0b0e\u0005"+
		"\u0215\u0000\u0000\u0b0e\u0b12\u0001\u0000\u0000\u0000\u0b0f\u0b12\u0003"+
		"\u0252\u0129\u0000\u0b10\u0b12\u0003\u023c\u011e\u0000\u0b11\u0b0b\u0001"+
		"\u0000\u0000\u0000\u0b11\u0b0f\u0001\u0000\u0000\u0000\u0b11\u0b10\u0001"+
		"\u0000\u0000\u0000\u0b12\u017b\u0001\u0000\u0000\u0000\u0b13\u0b18\u0003"+
		"\u017e\u00bf\u0000\u0b14\u0b15\u0005\u0218\u0000\u0000\u0b15\u0b17\u0003"+
		"\u017e\u00bf\u0000\u0b16\u0b14\u0001\u0000\u0000\u0000\u0b17\u0b1a\u0001"+
		"\u0000\u0000\u0000\u0b18\u0b16\u0001\u0000\u0000\u0000\u0b18\u0b19\u0001"+
		"\u0000\u0000\u0000\u0b19\u017d\u0001\u0000\u0000\u0000\u0b1a\u0b18\u0001"+
		"\u0000\u0000\u0000\u0b1b\u0b1f\u0003\u0180\u00c0\u0000\u0b1c\u0b1e\u0003"+
		"\u0182\u00c1\u0000\u0b1d\u0b1c\u0001\u0000\u0000\u0000\u0b1e\u0b21\u0001"+
		"\u0000\u0000\u0000\u0b1f\u0b1d\u0001\u0000\u0000\u0000\u0b1f\u0b20\u0001"+
		"\u0000\u0000\u0000\u0b20\u0b24\u0001\u0000\u0000\u0000\u0b21\u0b1f\u0001"+
		"\u0000\u0000\u0000\u0b22\u0b25\u0003\u018e\u00c7\u0000\u0b23\u0b25\u0003"+
		"\u019a\u00cd\u0000\u0b24\u0b22\u0001\u0000\u0000\u0000\u0b24\u0b23\u0001"+
		"\u0000\u0000\u0000\u0b24\u0b25\u0001\u0000\u0000\u0000\u0b25\u017f\u0001"+
		"\u0000\u0000\u0000\u0b26\u0b29\u0003\u0216\u010b\u0000\u0b27\u0b2a\u0003"+
		"\u018e\u00c7\u0000\u0b28\u0b2a\u0003\u019a\u00cd\u0000\u0b29\u0b27\u0001"+
		"\u0000\u0000\u0000\u0b29\u0b28\u0001\u0000\u0000\u0000\u0b29\u0b2a\u0001"+
		"\u0000\u0000\u0000\u0b2a\u0b43\u0001\u0000\u0000\u0000\u0b2b\u0b2c\u0005"+
		"\u0212\u0000\u0000\u0b2c\u0b30\u0003\u017e\u00bf\u0000\u0b2d\u0b2f\u0003"+
		"\u0170\u00b8\u0000\u0b2e\u0b2d\u0001\u0000\u0000\u0000\u0b2f\u0b32\u0001"+
		"\u0000\u0000\u0000\u0b30\u0b2e\u0001\u0000\u0000\u0000\u0b30\u0b31\u0001"+
		"\u0000\u0000\u0000\u0b31\u0b33\u0001\u0000\u0000\u0000\u0b32\u0b30\u0001"+
		"\u0000\u0000\u0000\u0b33\u0b36\u0005\u0213\u0000\u0000\u0b34\u0b37\u0003"+
		"\u018e\u00c7\u0000\u0b35\u0b37\u0003\u019a\u00cd\u0000\u0b36\u0b34\u0001"+
		"\u0000\u0000\u0000\u0b36\u0b35\u0001\u0000\u0000\u0000\u0b36\u0b37\u0001"+
		"\u0000\u0000\u0000\u0b37\u0b43\u0001\u0000\u0000\u0000\u0b38\u0b39\u0005"+
		"\u010f\u0000\u0000\u0b39\u0b3a\u0005\u0212\u0000\u0000\u0b3a\u0b3b\u0003"+
		"\u0216\u010b\u0000\u0b3b\u0b3c\u0005\u0213\u0000\u0000\u0b3c\u0b43\u0001"+
		"\u0000\u0000\u0000\u0b3d\u0b40\u0003\u0216\u010b\u0000\u0b3e\u0b41\u0003"+
		"\u018e\u00c7\u0000\u0b3f\u0b41\u0003\u019a\u00cd\u0000\u0b40\u0b3e\u0001"+
		"\u0000\u0000\u0000\u0b40\u0b3f\u0001\u0000\u0000\u0000\u0b40\u0b41\u0001"+
		"\u0000\u0000\u0000\u0b41\u0b43\u0001\u0000\u0000\u0000\u0b42\u0b26\u0001"+
		"\u0000\u0000\u0000\u0b42\u0b2b\u0001\u0000\u0000\u0000\u0b42\u0b38\u0001"+
		"\u0000\u0000\u0000\u0b42\u0b3d\u0001\u0000\u0000\u0000\u0b43\u0b47\u0001"+
		"\u0000\u0000\u0000\u0b44\u0b46\u0003\u018c\u00c6\u0000\u0b45\u0b44\u0001"+
		"\u0000\u0000\u0000\u0b46\u0b49\u0001\u0000\u0000\u0000\u0b47\u0b45\u0001"+
		"\u0000\u0000\u0000\u0b47\u0b48\u0001\u0000\u0000\u0000\u0b48\u0b4e\u0001"+
		"\u0000\u0000\u0000\u0b49\u0b47\u0001\u0000\u0000\u0000\u0b4a\u0b4c\u0005"+
		"\u0014\u0000\u0000\u0b4b\u0b4a\u0001\u0000\u0000\u0000\u0b4b\u0b4c\u0001"+
		"\u0000\u0000\u0000\u0b4c\u0b4d\u0001\u0000\u0000\u0000\u0b4d\u0b4f\u0003"+
		"\u02da\u016d\u0000\u0b4e\u0b4b\u0001\u0000\u0000\u0000\u0b4e\u0b4f\u0001"+
		"\u0000\u0000\u0000\u0b4f\u0b58\u0001\u0000\u0000\u0000\u0b50\u0b55\u0005"+
		"\u021c\u0000\u0000\u0b51\u0b53\u0005\u0014\u0000\u0000\u0b52\u0b51\u0001"+
		"\u0000\u0000\u0000\u0b52\u0b53\u0001\u0000\u0000\u0000\u0b53\u0b54\u0001"+
		"\u0000\u0000\u0000\u0b54\u0b56\u0003\u02da\u016d\u0000\u0b55\u0b52\u0001"+
		"\u0000\u0000\u0000\u0b55\u0b56\u0001\u0000\u0000\u0000\u0b56\u0b58\u0001"+
		"\u0000\u0000\u0000\u0b57\u0b42\u0001\u0000\u0000\u0000\u0b57\u0b50\u0001"+
		"\u0000\u0000\u0000\u0b58\u0181\u0001\u0000\u0000\u0000\u0b59\u0b5b\u0003"+
		"\u018a\u00c5\u0000\u0b5a\u0b59\u0001\u0000\u0000\u0000\u0b5a\u0b5b\u0001"+
		"\u0000\u0000\u0000\u0b5b\u0b5d\u0001\u0000\u0000\u0000\u0b5c\u0b5e\u0007"+
		"\u0016\u0000\u0000\u0b5d\u0b5c\u0001\u0000\u0000\u0000\u0b5d\u0b5e\u0001"+
		"\u0000\u0000\u0000\u0b5e\u0b61\u0001\u0000\u0000\u0000\u0b5f\u0b62\u0005"+
		"\u00b7\u0000\u0000\u0b60\u0b62\u0003\u0188\u00c4\u0000\u0b61\u0b5f\u0001"+
		"\u0000\u0000\u0000\u0b61\u0b60\u0001\u0000\u0000\u0000\u0b61\u0b62\u0001"+
		"\u0000\u0000\u0000\u0b62\u0b63\u0001\u0000\u0000\u0000\u0b63\u0b64\u0005"+
		"\u00c7\u0000\u0000\u0b64\u0b66\u0003\u0180\u00c0\u0000\u0b65\u0b67\u0003"+
		"\u018a\u00c5\u0000\u0b66\u0b65\u0001\u0000\u0000\u0000\u0b66\u0b67\u0001"+
		"\u0000\u0000\u0000\u0b67\u0b6c\u0001\u0000\u0000\u0000\u0b68\u0b6b\u0003"+
		"\u0184\u00c2\u0000\u0b69\u0b6b\u0003\u0186\u00c3\u0000\u0b6a\u0b68\u0001"+
		"\u0000\u0000\u0000\u0b6a\u0b69\u0001\u0000\u0000\u0000\u0b6b\u0b6e\u0001"+
		"\u0000\u0000\u0000\u0b6c\u0b6a\u0001\u0000\u0000\u0000\u0b6c\u0b6d\u0001"+
		"\u0000\u0000\u0000\u0b6d\u0183\u0001\u0000\u0000\u0000\u0b6e\u0b6c\u0001"+
		"\u0000\u0000\u0000\u0b6f\u0b70\u0005\u010e\u0000\u0000\u0b70\u0b71\u0003"+
		"\u0224\u0112\u0000\u0b71\u0185\u0001\u0000\u0000\u0000\u0b72\u0b73\u0005"+
		"\u01aa\u0000\u0000\u0b73\u0b74\u0005\u0212\u0000\u0000\u0b74\u0b79\u0003"+
		"\"\u0011\u0000\u0b75\u0b76\u0005\u0218\u0000\u0000\u0b76\u0b78\u0003\""+
		"\u0011\u0000\u0b77\u0b75\u0001\u0000\u0000\u0000\u0b78\u0b7b\u0001\u0000"+
		"\u0000\u0000\u0b79\u0b77\u0001\u0000\u0000\u0000\u0b79\u0b7a\u0001\u0000"+
		"\u0000\u0000\u0b7a\u0b7c\u0001\u0000\u0000\u0000\u0b7b\u0b79\u0001\u0000"+
		"\u0000\u0000\u0b7c\u0b7d\u0005\u0213\u0000\u0000\u0b7d\u0187\u0001\u0000"+
		"\u0000\u0000\u0b7e\u0b80\u0007\u0017\u0000\u0000\u0b7f\u0b81\u0005\u0118"+
		"\u0000\u0000\u0b80\u0b7f\u0001\u0000\u0000\u0000\u0b80\u0b81\u0001\u0000"+
		"\u0000\u0000\u0b81\u0189\u0001\u0000\u0000\u0000\u0b82\u0b83\u0005\u011f"+
		"\u0000\u0000\u0b83\u0b91\u0005.\u0000\u0000\u0b84\u0b85\u0005\u0212\u0000"+
		"\u0000\u0b85\u0b86\u0003\u016e\u00b7\u0000\u0b86\u0b87\u0005\u0213\u0000"+
		"\u0000\u0b87\u0b92\u0001\u0000\u0000\u0000\u0b88\u0b92\u0003\u0222\u0111"+
		"\u0000\u0b89\u0b8e\u0003\u0252\u0129\u0000\u0b8a\u0b8b\u0005\u0218\u0000"+
		"\u0000\u0b8b\u0b8d\u0003\u0252\u0129\u0000\u0b8c\u0b8a\u0001\u0000\u0000"+
		"\u0000\u0b8d\u0b90\u0001\u0000\u0000\u0000\u0b8e\u0b8c\u0001\u0000\u0000"+
		"\u0000\u0b8e\u0b8f\u0001\u0000\u0000\u0000\u0b8f\u0b92\u0001\u0000\u0000"+
		"\u0000\u0b90\u0b8e\u0001\u0000\u0000\u0000\u0b91\u0b84\u0001\u0000\u0000"+
		"\u0000\u0b91\u0b88\u0001\u0000\u0000\u0000\u0b91\u0b89\u0001\u0000\u0000"+
		"\u0000\u0b92\u018b\u0001\u0000\u0000\u0000\u0b93\u0b94\u0005\u01b4\u0000"+
		"\u0000\u0b94\u0b95\u0005!\u0000\u0000\u0b95\u0b96\u0007\u0018\u0000\u0000"+
		"\u0b96\u0b9c\u0003\u0252\u0129\u0000\u0b97\u0b98\u0005\u0014\u0000\u0000"+
		"\u0b98\u0b99\u0005\u010a\u0000\u0000\u0b99\u0b9a\u0007\u0019\u0000\u0000"+
		"\u0b9a\u0b9c\u0003\u0252\u0129\u0000\u0b9b\u0b93\u0001\u0000\u0000\u0000"+
		"\u0b9b\u0b97\u0001\u0000\u0000\u0000\u0b9c\u018d\u0001\u0000\u0000\u0000"+
		"\u0b9d\u0b9f\u0005\u0125\u0000\u0000\u0b9e\u0ba0\u0005\u01c1\u0000\u0000"+
		"\u0b9f\u0b9e\u0001\u0000\u0000\u0000\u0b9f\u0ba0\u0001\u0000\u0000\u0000"+
		"\u0ba0\u0ba1\u0001\u0000\u0000\u0000\u0ba1\u0ba2\u0005\u0212\u0000\u0000"+
		"\u0ba2\u0ba7\u0003\u0190\u00c8\u0000\u0ba3\u0ba4\u0005\u0218\u0000\u0000"+
		"\u0ba4\u0ba6\u0003\u0190\u00c8\u0000\u0ba5\u0ba3\u0001\u0000\u0000\u0000"+
		"\u0ba6\u0ba9\u0001\u0000\u0000\u0000\u0ba7\u0ba5\u0001\u0000\u0000\u0000"+
		"\u0ba7\u0ba8\u0001\u0000\u0000\u0000\u0ba8\u0baa\u0001\u0000\u0000\u0000"+
		"\u0ba9\u0ba7\u0001\u0000\u0000\u0000\u0baa\u0bab\u0003\u0192\u00c9\u0000"+
		"\u0bab\u0bac\u0003\u0194\u00ca\u0000\u0bac\u0bad\u0005\u0213\u0000\u0000"+
		"\u0bad\u018f\u0001\u0000\u0000\u0000\u0bae\u0baf\u0003\u02fc\u017e\u0000"+
		"\u0baf\u0bb0\u0005\u0212\u0000\u0000\u0bb0\u0bb1\u0003\u0252\u0129\u0000"+
		"\u0bb1\u0bb3\u0005\u0213\u0000\u0000\u0bb2\u0bb4\u0003\u02d8\u016c\u0000"+
		"\u0bb3\u0bb2\u0001\u0000\u0000\u0000\u0bb3\u0bb4\u0001\u0000\u0000\u0000"+
		"\u0bb4\u0191\u0001\u0000\u0000\u0000\u0bb5\u0bc2\u0005\u009a\u0000\u0000"+
		"\u0bb6\u0bc3\u0003\"\u0011\u0000\u0bb7\u0bb8\u0005\u0212\u0000\u0000\u0bb8"+
		"\u0bbd\u0003\"\u0011\u0000\u0bb9\u0bba\u0005\u0218\u0000\u0000\u0bba\u0bbc"+
		"\u0003\"\u0011\u0000\u0bbb\u0bb9\u0001\u0000\u0000\u0000\u0bbc\u0bbf\u0001"+
		"\u0000\u0000\u0000\u0bbd\u0bbb\u0001\u0000\u0000\u0000\u0bbd\u0bbe\u0001"+
		"\u0000\u0000\u0000\u0bbe\u0bc0\u0001\u0000\u0000\u0000\u0bbf\u0bbd\u0001"+
		"\u0000\u0000\u0000\u0bc0\u0bc1\u0005\u0213\u0000\u0000\u0bc1\u0bc3\u0001"+
		"\u0000\u0000\u0000\u0bc2\u0bb6\u0001\u0000\u0000\u0000\u0bc2\u0bb7\u0001"+
		"\u0000\u0000\u0000\u0bc3\u0193\u0001\u0000\u0000\u0000\u0bc4\u0bc5\u0005"+
		"\u00ac\u0000\u0000\u0bc5\u0bd7\u0005\u0212\u0000\u0000\u0bc6\u0bd8\u0003"+
		"\u016e\u00b7\u0000\u0bc7\u0bcc\u0005\u0012\u0000\u0000\u0bc8\u0bc9\u0005"+
		"\u0218\u0000\u0000\u0bc9\u0bcb\u0005\u0012\u0000\u0000\u0bca\u0bc8\u0001"+
		"\u0000\u0000\u0000\u0bcb\u0bce\u0001\u0000\u0000\u0000\u0bcc\u0bca\u0001"+
		"\u0000\u0000\u0000\u0bcc\u0bcd\u0001\u0000\u0000\u0000\u0bcd\u0bd8\u0001"+
		"\u0000\u0000\u0000\u0bce\u0bcc\u0001\u0000\u0000\u0000\u0bcf\u0bd4\u0003"+
		"\u0196\u00cb\u0000\u0bd0\u0bd1\u0005\u0218\u0000\u0000\u0bd1\u0bd3\u0003"+
		"\u0196\u00cb\u0000\u0bd2\u0bd0\u0001\u0000\u0000\u0000\u0bd3\u0bd6\u0001"+
		"\u0000\u0000\u0000\u0bd4\u0bd2\u0001\u0000\u0000\u0000\u0bd4\u0bd5\u0001"+
		"\u0000\u0000\u0000\u0bd5\u0bd8\u0001\u0000\u0000\u0000\u0bd6\u0bd4\u0001"+
		"\u0000\u0000\u0000\u0bd7\u0bc6\u0001\u0000\u0000\u0000\u0bd7\u0bc7\u0001"+
		"\u0000\u0000\u0000\u0bd7\u0bcf\u0001\u0000\u0000\u0000\u0bd8\u0bd9\u0001"+
		"\u0000\u0000\u0000\u0bd9\u0bda\u0005\u0213\u0000\u0000\u0bda\u0195\u0001"+
		"\u0000\u0000\u0000\u0bdb\u0bdd\u0003\u0198\u00cc\u0000\u0bdc\u0bde\u0003"+
		"\u02d8\u016c\u0000\u0bdd\u0bdc\u0001\u0000\u0000\u0000\u0bdd\u0bde\u0001"+
		"\u0000\u0000\u0000\u0bde\u0197\u0001\u0000\u0000\u0000\u0bdf\u0be2\u0003"+
		"\u0252\u0129\u0000\u0be0\u0be2\u0003\u0222\u0111\u0000\u0be1\u0bdf\u0001"+
		"\u0000\u0000\u0000\u0be1\u0be0\u0001\u0000\u0000\u0000\u0be2\u0199\u0001"+
		"\u0000\u0000\u0000\u0be3\u0be6\u0005\u01a3\u0000\u0000\u0be4\u0be5\u0007"+
		"\u001a\u0000\u0000\u0be5\u0be7\u0005\u0105\u0000\u0000\u0be6\u0be4\u0001"+
		"\u0000\u0000\u0000\u0be6\u0be7\u0001\u0000\u0000\u0000\u0be7\u0be8\u0001"+
		"\u0000\u0000\u0000\u0be8\u0bf5\u0005\u0212\u0000\u0000\u0be9\u0bf6\u0003"+
		"\"\u0011\u0000\u0bea\u0beb\u0005\u0212\u0000\u0000\u0beb\u0bf0\u0003\""+
		"\u0011\u0000\u0bec\u0bed\u0005\u0218\u0000\u0000\u0bed\u0bef\u0003\"\u0011"+
		"\u0000\u0bee\u0bec\u0001\u0000\u0000\u0000\u0bef\u0bf2\u0001\u0000\u0000"+
		"\u0000\u0bf0\u0bee\u0001\u0000\u0000\u0000\u0bf0\u0bf1\u0001\u0000\u0000"+
		"\u0000\u0bf1\u0bf3\u0001\u0000\u0000\u0000\u0bf2\u0bf0\u0001\u0000\u0000"+
		"\u0000\u0bf3\u0bf4\u0005\u0213\u0000\u0000\u0bf4\u0bf6\u0001\u0000\u0000"+
		"\u0000\u0bf5\u0be9\u0001\u0000\u0000\u0000\u0bf5\u0bea\u0001\u0000\u0000"+
		"\u0000\u0bf6\u0bf7\u0001\u0000\u0000\u0000\u0bf7\u0bf8\u0003\u0192\u00c9"+
		"\u0000\u0bf8\u0bf9\u0003\u019c\u00ce\u0000\u0bf9\u0bfa\u0005\u0213\u0000"+
		"\u0000\u0bfa\u019b\u0001\u0000\u0000\u0000\u0bfb\u0bfc\u0005\u00ac\u0000"+
		"\u0000\u0bfc\u0bfd\u0005\u0212\u0000\u0000\u0bfd\u0c02\u0003\u019e\u00cf"+
		"\u0000\u0bfe\u0bff\u0005\u0218\u0000\u0000\u0bff\u0c01\u0003\u019e\u00cf"+
		"\u0000\u0c00\u0bfe\u0001\u0000\u0000\u0000\u0c01\u0c04\u0001\u0000\u0000"+
		"\u0000\u0c02\u0c00\u0001\u0000\u0000\u0000\u0c02\u0c03\u0001\u0000\u0000"+
		"\u0000\u0c03\u0c05\u0001\u0000\u0000\u0000\u0c04\u0c02\u0001\u0000\u0000"+
		"\u0000\u0c05\u0c06\u0005\u0213\u0000\u0000\u0c06\u019d\u0001\u0000\u0000"+
		"\u0000\u0c07\u0c14\u0003\"\u0011\u0000\u0c08\u0c09\u0005\u0212\u0000\u0000"+
		"\u0c09\u0c0e\u0003\"\u0011\u0000\u0c0a\u0c0b\u0005\u0218\u0000\u0000\u0c0b"+
		"\u0c0d\u0003\"\u0011\u0000\u0c0c\u0c0a\u0001\u0000\u0000\u0000\u0c0d\u0c10"+
		"\u0001\u0000\u0000\u0000\u0c0e\u0c0c\u0001\u0000\u0000\u0000\u0c0e\u0c0f"+
		"\u0001\u0000\u0000\u0000\u0c0f\u0c11\u0001\u0000\u0000\u0000\u0c10\u0c0e"+
		"\u0001\u0000\u0000\u0000\u0c11\u0c12\u0005\u0213\u0000\u0000\u0c12\u0c14"+
		"\u0001\u0000\u0000\u0000\u0c13\u0c07\u0001\u0000\u0000\u0000\u0c13\u0c08"+
		"\u0001\u0000\u0000\u0000\u0c14\u0c24\u0001\u0000\u0000\u0000\u0c15\u0c22"+
		"\u0005\u0014\u0000\u0000\u0c16\u0c23\u0003\u0346\u01a3\u0000\u0c17\u0c18"+
		"\u0005\u0212\u0000\u0000\u0c18\u0c1d\u0003\u0346\u01a3\u0000\u0c19\u0c1a"+
		"\u0005\u0218\u0000\u0000\u0c1a\u0c1c\u0003\u0346\u01a3\u0000\u0c1b\u0c19"+
		"\u0001\u0000\u0000\u0000\u0c1c\u0c1f\u0001\u0000\u0000\u0000\u0c1d\u0c1b"+
		"\u0001\u0000\u0000\u0000\u0c1d\u0c1e\u0001\u0000\u0000\u0000\u0c1e\u0c20"+
		"\u0001\u0000\u0000\u0000\u0c1f\u0c1d\u0001\u0000\u0000\u0000\u0c20\u0c21"+
		"\u0005\u0213\u0000\u0000\u0c21\u0c23\u0001\u0000\u0000\u0000\u0c22\u0c16"+
		"\u0001\u0000\u0000\u0000\u0c22\u0c17\u0001\u0000\u0000\u0000\u0c23\u0c25"+
		"\u0001\u0000\u0000\u0000\u0c24\u0c15\u0001\u0000\u0000\u0000\u0c24\u0c25"+
		"\u0001\u0000\u0000\u0000\u0c25\u019f\u0001\u0000\u0000\u0000\u0c26\u0c27"+
		"\u0005G\u0000\u0000\u0c27\u0c29\u0005.\u0000\u0000\u0c28\u0c2a\u0005\u00fb"+
		"\u0000\u0000\u0c29\u0c28\u0001\u0000\u0000\u0000\u0c29\u0c2a\u0001\u0000"+
		"\u0000\u0000\u0c2a\u0c2b\u0001\u0000\u0000\u0000\u0c2b\u0c2d\u0003\u0224"+
		"\u0112\u0000\u0c2c\u0c2e\u0003\u01a2\u00d1\u0000\u0c2d\u0c2c\u0001\u0000"+
		"\u0000\u0000\u0c2d\u0c2e\u0001\u0000\u0000\u0000\u0c2e\u0c38\u0001\u0000"+
		"\u0000\u0000\u0c2f\u0c30\u0003\u01a2\u00d1\u0000\u0c30\u0c31\u0005G\u0000"+
		"\u0000\u0c31\u0c33\u0005.\u0000\u0000\u0c32\u0c34\u0005\u00fb\u0000\u0000"+
		"\u0c33\u0c32\u0001\u0000\u0000\u0000\u0c33\u0c34\u0001\u0000\u0000\u0000"+
		"\u0c34\u0c35\u0001\u0000\u0000\u0000\u0c35\u0c36\u0003\u0224\u0112\u0000"+
		"\u0c36\u0c38\u0001\u0000\u0000\u0000\u0c37\u0c26\u0001\u0000\u0000\u0000"+
		"\u0c37\u0c2f\u0001\u0000\u0000\u0000\u0c38\u01a1\u0001\u0000\u0000\u0000"+
		"\u0c39\u0c3a\u0005\u017a\u0000\u0000\u0c3a\u0c3b\u0005\u01bd\u0000\u0000"+
		"\u0c3b\u0c3c\u0003\u0224\u0112\u0000\u0c3c\u01a3\u0001\u0000\u0000\u0000"+
		"\u0c3d\u0c3e\u0005\u00a2\u0000\u0000\u0c3e\u0c3f\u0005.\u0000\u0000\u0c3f"+
		"\u0c44\u0003\u01a6\u00d3\u0000\u0c40\u0c41\u0005\u0218\u0000\u0000\u0c41"+
		"\u0c43\u0003\u01a6\u00d3\u0000\u0c42\u0c40\u0001\u0000\u0000\u0000\u0c43"+
		"\u0c46\u0001\u0000\u0000\u0000\u0c44\u0c42\u0001\u0000\u0000\u0000\u0c44"+
		"\u0c45\u0001\u0000\u0000\u0000\u0c45\u0c48\u0001\u0000\u0000\u0000\u0c46"+
		"\u0c44\u0001\u0000\u0000\u0000\u0c47\u0c49\u0003\u01ae\u00d7\u0000\u0c48"+
		"\u0c47\u0001\u0000\u0000\u0000\u0c48\u0c49\u0001\u0000\u0000\u0000\u0c49"+
		"\u0c58\u0001\u0000\u0000\u0000\u0c4a\u0c55\u0003\u01ae\u00d7\u0000\u0c4b"+
		"\u0c4c\u0005\u00a2\u0000\u0000\u0c4c\u0c4d\u0005.\u0000\u0000\u0c4d\u0c52"+
		"\u0003\u01a6\u00d3\u0000\u0c4e\u0c4f\u0005\u0218\u0000\u0000\u0c4f\u0c51"+
		"\u0003\u01a6\u00d3\u0000\u0c50\u0c4e\u0001\u0000\u0000\u0000\u0c51\u0c54"+
		"\u0001\u0000\u0000\u0000\u0c52\u0c50\u0001\u0000\u0000\u0000\u0c52\u0c53"+
		"\u0001\u0000\u0000\u0000\u0c53\u0c56\u0001\u0000\u0000\u0000\u0c54\u0c52"+
		"\u0001\u0000\u0000\u0000\u0c55\u0c4b\u0001\u0000\u0000\u0000\u0c55\u0c56"+
		"\u0001\u0000\u0000\u0000\u0c56\u0c58\u0001\u0000\u0000\u0000\u0c57\u0c3d"+
		"\u0001\u0000\u0000\u0000\u0c57\u0c4a\u0001\u0000\u0000\u0000\u0c58\u01a5"+
		"\u0001\u0000\u0000\u0000\u0c59\u0c5d\u0003\u01aa\u00d5\u0000\u0c5a\u0c5d"+
		"\u0003\u01a8\u00d4\u0000\u0c5b\u0c5d\u0003\u0252\u0129\u0000\u0c5c\u0c59"+
		"\u0001\u0000\u0000\u0000\u0c5c\u0c5a\u0001\u0000\u0000\u0000\u0c5c\u0c5b"+
		"\u0001\u0000\u0000\u0000\u0c5d\u01a7\u0001\u0000\u0000\u0000\u0c5e\u0c5f"+
		"\u0007\u001b\u0000\u0000\u0c5f\u0c60\u0005\u0212\u0000\u0000\u0c60\u0c65"+
		"\u0003\u01ac\u00d6\u0000\u0c61\u0c62\u0005\u0218\u0000\u0000\u0c62\u0c64"+
		"\u0003\u01ac\u00d6\u0000\u0c63\u0c61\u0001\u0000\u0000\u0000\u0c64\u0c67"+
		"\u0001\u0000\u0000\u0000\u0c65\u0c63\u0001\u0000\u0000\u0000\u0c65\u0c66"+
		"\u0001\u0000\u0000\u0000\u0c66\u0c68\u0001\u0000\u0000\u0000\u0c67\u0c65"+
		"\u0001\u0000\u0000\u0000\u0c68\u0c69\u0005\u0213\u0000\u0000\u0c69\u01a9"+
		"\u0001\u0000\u0000\u0000\u0c6a\u0c6b\u0005\u00a3\u0000\u0000\u0c6b\u0c6c"+
		"\u0005\u0164\u0000\u0000\u0c6c\u0c6d\u0005\u0212\u0000\u0000\u0c6d\u0c72"+
		"\u0003\u01ac\u00d6\u0000\u0c6e\u0c6f\u0005\u0218\u0000\u0000\u0c6f\u0c71"+
		"\u0003\u01ac\u00d6\u0000\u0c70\u0c6e\u0001\u0000\u0000\u0000\u0c71\u0c74"+
		"\u0001\u0000\u0000\u0000\u0c72\u0c70\u0001\u0000\u0000\u0000\u0c72\u0c73"+
		"\u0001\u0000\u0000\u0000\u0c73\u0c75\u0001\u0000\u0000\u0000\u0c74\u0c72"+
		"\u0001\u0000\u0000\u0000\u0c75\u0c76\u0005\u0213\u0000\u0000\u0c76\u01ab"+
		"\u0001\u0000\u0000\u0000\u0c77\u0c7b\u0003\u01a8\u00d4\u0000\u0c78\u0c7b"+
		"\u0003\u0222\u0111\u0000\u0c79\u0c7b\u0003\u0252\u0129\u0000\u0c7a\u0c77"+
		"\u0001\u0000\u0000\u0000\u0c7a\u0c78\u0001\u0000\u0000\u0000\u0c7a\u0c79"+
		"\u0001\u0000\u0000\u0000\u0c7b\u01ad\u0001\u0000\u0000\u0000\u0c7c\u0c7d"+
		"\u0005\u00a5\u0000\u0000\u0c7d\u0c7e\u0003\u0224\u0112\u0000\u0c7e\u01af"+
		"\u0001\u0000\u0000\u0000\u0c7f\u0c83\u0005\u00e9\u0000\u0000\u0c80\u0c82"+
		"\u0003\u01b2\u00d9\u0000\u0c81\u0c80\u0001\u0000\u0000\u0000\u0c82\u0c85"+
		"\u0001\u0000\u0000\u0000\u0c83\u0c81\u0001\u0000\u0000\u0000\u0c83\u0c84"+
		"\u0001\u0000\u0000\u0000\u0c84\u0c87\u0001\u0000\u0000\u0000\u0c85\u0c83"+
		"\u0001\u0000\u0000\u0000\u0c86\u0c88\u0003\u01b4\u00da\u0000\u0c87\u0c86"+
		"\u0001\u0000\u0000\u0000\u0c87\u0c88\u0001\u0000\u0000\u0000\u0c88\u0c8c"+
		"\u0001\u0000\u0000\u0000\u0c89\u0c8b\u0003\u01b6\u00db\u0000\u0c8a\u0c89"+
		"\u0001\u0000\u0000\u0000\u0c8b\u0c8e\u0001\u0000\u0000\u0000\u0c8c\u0c8a"+
		"\u0001\u0000\u0000\u0000\u0c8c\u0c8d\u0001\u0000\u0000\u0000\u0c8d\u0c8f"+
		"\u0001\u0000\u0000\u0000\u0c8e\u0c8c\u0001\u0000\u0000\u0000\u0c8f\u0c90"+
		"\u0003\u01b8\u00dc\u0000\u0c90\u01b1\u0001\u0000\u0000\u0000\u0c91\u0c92"+
		"\u0007\u001c\u0000\u0000\u0c92\u0c9a\u0005\u00f1\u0000\u0000\u0c93\u0c97"+
		"\u0005\u01a1\u0000\u0000\u0c94\u0c98\u0005r\u0000\u0000\u0c95\u0c96\u0005"+
		"\u016c\u0000\u0000\u0c96\u0c98\u0005\u0138\u0000\u0000\u0c97\u0c94\u0001"+
		"\u0000\u0000\u0000\u0c97\u0c95\u0001\u0000\u0000\u0000\u0c98\u0c9a\u0001"+
		"\u0000\u0000\u0000\u0c99\u0c91\u0001\u0000\u0000\u0000\u0c99\u0c93\u0001"+
		"\u0000\u0000\u0000\u0c9a\u01b3\u0001\u0000\u0000\u0000\u0c9b\u0c9c\u0005"+
		"\u0142\u0000\u0000\u0c9c\u0c9d\u0007\u001d\u0000\u0000\u0c9d\u0c9e\u0005"+
		"\u014d\u0000\u0000\u0c9e\u01b5\u0001\u0000\u0000\u0000\u0c9f\u0ca0\u0005"+
		"\u0138\u0000\u0000\u0ca0\u0ca1\u0003\u02f8\u017c\u0000\u0ca1\u0ca2\u0005"+
		"\u010e\u0000\u0000\u0ca2\u0ca3\u0005\u0212\u0000\u0000\u0ca3\u0ca4\u0003"+
		"\u016e\u00b7\u0000\u0ca4\u0ca5\u0005\u0213\u0000\u0000\u0ca5\u0ca9\u0003"+
		"\u01ba\u00dd\u0000\u0ca6\u0ca8\u0003\u01b2\u00d9\u0000\u0ca7\u0ca6\u0001"+
		"\u0000\u0000\u0000\u0ca8\u0cab\u0001\u0000\u0000\u0000\u0ca9\u0ca7\u0001"+
		"\u0000\u0000\u0000\u0ca9\u0caa\u0001\u0000\u0000\u0000\u0caa\u01b7\u0001"+
		"\u0000\u0000\u0000\u0cab\u0ca9\u0001\u0000\u0000\u0000\u0cac\u0cad\u0005"+
		"\u00dd\u0000\u0000\u0cad\u0caf\u0003\u02fa\u017d\u0000\u0cae\u0cac\u0001"+
		"\u0000\u0000\u0000\u0cae\u0caf\u0001\u0000\u0000\u0000\u0caf\u0cb0\u0001"+
		"\u0000\u0000\u0000\u0cb0\u0cb4\u0003\u01ba\u00dd\u0000\u0cb1\u0cb3\u0003"+
		"\u01b2\u00d9\u0000\u0cb2\u0cb1\u0001\u0000\u0000\u0000\u0cb3\u0cb6\u0001"+
		"\u0000\u0000\u0000\u0cb4\u0cb2\u0001\u0000\u0000\u0000\u0cb4\u0cb5\u0001"+
		"\u0000\u0000\u0000\u0cb5\u0cb7\u0001\u0000\u0000\u0000\u0cb6\u0cb4\u0001"+
		"\u0000\u0000\u0000\u0cb7\u0cb8\u0003\u01c2\u00e1\u0000\u0cb8\u01b9\u0001"+
		"\u0000\u0000\u0000\u0cb9\u0cbb\u0003\u01bc\u00de\u0000\u0cba\u0cb9\u0001"+
		"\u0000\u0000\u0000\u0cba\u0cbb\u0001\u0000\u0000\u0000\u0cbb\u0cbc\u0001"+
		"\u0000\u0000\u0000\u0cbc\u0cbd\u0005r\u0000\u0000\u0cbd\u0cbe\u0005.\u0000"+
		"\u0000\u0cbe\u0cbf\u0003\u01be\u00df\u0000\u0cbf\u0cc0\u0005\u00e1\u0000"+
		"\u0000\u0cc0\u0cc1\u0003\u01be\u00df\u0000\u0cc1\u01bb\u0001\u0000\u0000"+
		"\u0000\u0cc2\u0cc3\u0005\u011f\u0000\u0000\u0cc3\u0cc4\u0005.\u0000\u0000"+
		"\u0cc4\u0cc5\u0003\u01be\u00df\u0000\u0cc5\u01bd\u0001\u0000\u0000\u0000"+
		"\u0cc6\u0cc7\u0005\u0212\u0000\u0000\u0cc7\u0ccc\u0003\u01c0\u00e0\u0000"+
		"\u0cc8\u0cc9\u0005\u0218\u0000\u0000\u0cc9\u0ccb\u0003\u01c0\u00e0\u0000"+
		"\u0cca\u0cc8\u0001\u0000\u0000\u0000\u0ccb\u0cce\u0001\u0000\u0000\u0000"+
		"\u0ccc\u0cca\u0001\u0000\u0000\u0000\u0ccc\u0ccd\u0001\u0000\u0000\u0000"+
		"\u0ccd\u0ccf\u0001\u0000\u0000\u0000\u0cce\u0ccc\u0001\u0000\u0000\u0000"+
		"\u0ccf\u0cd0\u0005\u0213\u0000\u0000\u0cd0\u01bf\u0001\u0000\u0000\u0000"+
		"\u0cd1\u0cd3\u0003\u0252\u0129\u0000\u0cd2\u0cd4\u0003\u02da\u016d\u0000"+
		"\u0cd3\u0cd2\u0001\u0000\u0000\u0000\u0cd3\u0cd4\u0001\u0000\u0000\u0000"+
		"\u0cd4\u01c1\u0001\u0000\u0000\u0000\u0cd5\u0cd7\u0003\u01c4\u00e2\u0000"+
		"\u0cd6\u0cd5\u0001\u0000\u0000\u0000\u0cd6\u0cd7\u0001\u0000\u0000\u0000"+
		"\u0cd7\u0cd8\u0001\u0000\u0000\u0000\u0cd8\u0cd9\u0005\u0212\u0000\u0000"+
		"\u0cd9\u0cde\u0003\u01c6\u00e3\u0000\u0cda\u0cdb\u0005\u0218\u0000\u0000"+
		"\u0cdb\u0cdd\u0003\u01c6\u00e3\u0000\u0cdc\u0cda\u0001\u0000\u0000\u0000"+
		"\u0cdd\u0ce0\u0001\u0000\u0000\u0000\u0cde\u0cdc\u0001\u0000\u0000\u0000"+
		"\u0cde\u0cdf\u0001\u0000\u0000\u0000\u0cdf\u0ce1\u0001\u0000\u0000\u0000"+
		"\u0ce0\u0cde\u0001\u0000\u0000\u0000\u0ce1\u0ce2\u0005\u0213\u0000\u0000"+
		"\u0ce2\u01c3\u0001\u0000\u0000\u0000\u0ce3\u0ce9\u0005\u014e\u0000\u0000"+
		"\u0ce4\u0cea\u0005\u01a5\u0000\u0000\u0ce5\u0ce7\u0005\u01a7\u0000\u0000"+
		"\u0ce6\u0ce8\u0005\r\u0000\u0000\u0ce7\u0ce6\u0001\u0000\u0000\u0000\u0ce7"+
		"\u0ce8\u0001\u0000\u0000\u0000\u0ce8\u0cea\u0001\u0000\u0000\u0000\u0ce9"+
		"\u0ce4\u0001\u0000\u0000\u0000\u0ce9\u0ce5\u0001\u0000\u0000\u0000\u0ce9"+
		"\u0cea\u0001\u0000\u0000\u0000\u0cea\u0ced\u0001\u0000\u0000\u0000\u0ceb"+
		"\u0cec\u0007\u001e\u0000\u0000\u0cec\u0cee\u0005\u0114\u0000\u0000\u0ced"+
		"\u0ceb\u0001\u0000\u0000\u0000\u0ced\u0cee\u0001\u0000\u0000\u0000\u0cee"+
		"\u0cf0\u0001\u0000\u0000\u0000\u0cef\u0cf1\u0003\u01ca\u00e5\u0000\u0cf0"+
		"\u0cef\u0001\u0000\u0000\u0000\u0cf0\u0cf1\u0001\u0000\u0000\u0000\u0cf1"+
		"\u01c5\u0001\u0000\u0000\u0000\u0cf2\u0cf8\u0005\u01a5\u0000\u0000\u0cf3"+
		"\u0cf5\u0005\u01a7\u0000\u0000\u0cf4\u0cf6\u0005\r\u0000\u0000\u0cf5\u0cf4"+
		"\u0001\u0000\u0000\u0000\u0cf5\u0cf6\u0001\u0000\u0000\u0000\u0cf6\u0cf8"+
		"\u0001\u0000\u0000\u0000\u0cf7\u0cf2\u0001\u0000\u0000\u0000\u0cf7\u0cf3"+
		"\u0001\u0000\u0000\u0000\u0cf7\u0cf8\u0001\u0000\u0000\u0000\u0cf8\u0cf9"+
		"\u0001\u0000\u0000\u0000\u0cf9\u0cfb\u0003\u01c8\u00e4\u0000\u0cfa\u0cfc"+
		"\u0003\u01ce\u00e7\u0000\u0cfb\u0cfa\u0001\u0000\u0000\u0000\u0cfb\u0cfc"+
		"\u0001\u0000\u0000\u0000\u0cfc\u0cfd\u0001\u0000\u0000\u0000\u0cfd\u0cfe"+
		"\u0005\u0229\u0000\u0000\u0cfe\u0cff\u0003\u0252\u0129\u0000\u0cff\u01c7"+
		"\u0001\u0000\u0000\u0000\u0d00\u0d01\u0003\u027a\u013d\u0000\u0d01\u01c9"+
		"\u0001\u0000\u0000\u0000\u0d02\u0d03\u0005\u00c5\u0000\u0000\u0d03\u0d04"+
		"\u0005\u0212\u0000\u0000\u0d04\u0d05\u0003\u0252\u0129\u0000\u0d05\u0d07"+
		"\u0005\u0213\u0000\u0000\u0d06\u0d08\u0003\u01cc\u00e6\u0000\u0d07\u0d06"+
		"\u0001\u0000\u0000\u0000\u0d07\u0d08\u0001\u0000\u0000\u0000\u0d08\u01cb"+
		"\u0001\u0000\u0000\u0000\u0d09\u0d0a\u0005\u01a4\u0000\u0000\u0d0a\u0d0b"+
		"\u0005\u0212\u0000\u0000\u0d0b\u0d0c\u0003\u0224\u0112\u0000\u0d0c\u0d0d"+
		"\u0005\u0213\u0000\u0000\u0d0d\u01cd\u0001\u0000\u0000\u0000\u0d0e\u0d10"+
		"\u0005\u0114\u0000\u0000\u0d0f\u0d11\u0005\u0169\u0000\u0000\u0d10\u0d0f"+
		"\u0001\u0000\u0000\u0000\u0d10\u0d11\u0001\u0000\u0000\u0000\u0d11\u0d12"+
		"\u0001\u0000\u0000\u0000\u0d12\u0d13\u0005.\u0000\u0000\u0d13\u0d18\u0003"+
		"\u01d0\u00e8\u0000\u0d14\u0d15\u0005\u0218\u0000\u0000\u0d15\u0d17\u0003"+
		"\u01d0\u00e8\u0000\u0d16\u0d14\u0001\u0000\u0000\u0000\u0d17\u0d1a\u0001"+
		"\u0000\u0000\u0000\u0d18\u0d16\u0001\u0000\u0000\u0000\u0d18\u0d19\u0001"+
		"\u0000\u0000\u0000\u0d19\u01cf\u0001\u0000\u0000\u0000\u0d1a\u0d18\u0001"+
		"\u0000\u0000\u0000\u0d1b\u0d1d\u0003\u0252\u0129\u0000\u0d1c\u0d1e\u0007"+
		"\u001f\u0000\u0000\u0d1d\u0d1c\u0001\u0000\u0000\u0000\u0d1d\u0d1e\u0001"+
		"\u0000\u0000\u0000\u0d1e\u0d21\u0001\u0000\u0000\u0000\u0d1f\u0d20\u0005"+
		"\u0105\u0000\u0000\u0d20\u0d22\u0007 \u0000\u0000\u0d21\u0d1f\u0001\u0000"+
		"\u0000\u0000\u0d21\u0d22\u0001\u0000\u0000\u0000\u0d22\u01d1\u0001\u0000"+
		"\u0000\u0000\u0d23\u0d24\u0005\u009a\u0000\u0000\u0d24\u0d26\u0005\u01a5"+
		"\u0000\u0000\u0d25\u0d27\u0003\u01d4\u00ea\u0000\u0d26\u0d25\u0001\u0000"+
		"\u0000\u0000\u0d26\u0d27\u0001\u0000\u0000\u0000\u0d27\u0d29\u0001\u0000"+
		"\u0000\u0000\u0d28\u0d2a\u0003\u01d6\u00eb\u0000\u0d29\u0d28\u0001\u0000"+
		"\u0000\u0000\u0d29\u0d2a\u0001\u0000\u0000\u0000\u0d2a\u01d3\u0001\u0000"+
		"\u0000\u0000\u0d2b\u0d2c\u0005\u010a\u0000\u0000\u0d2c\u0d31\u0003\"\u0011"+
		"\u0000\u0d2d\u0d2e\u0005\u0218\u0000\u0000\u0d2e\u0d30\u0003\"\u0011\u0000"+
		"\u0d2f\u0d2d\u0001\u0000\u0000\u0000\u0d30\u0d33\u0001\u0000\u0000\u0000"+
		"\u0d31\u0d2f\u0001\u0000\u0000\u0000\u0d31\u0d32\u0001\u0000\u0000\u0000"+
		"\u0d32\u01d5\u0001\u0000\u0000\u0000\u0d33\u0d31\u0001\u0000\u0000\u0000"+
		"\u0d34\u0d35\u0005\u016e\u0000\u0000\u0d35\u0d3a\u0005\u00d7\u0000\u0000"+
		"\u0d36\u0d3a\u0005\u0103\u0000\u0000\u0d37\u0d38\u0005\u01b6\u0000\u0000"+
		"\u0d38\u0d3a\u0003\u0252\u0129\u0000\u0d39\u0d34\u0001\u0000\u0000\u0000"+
		"\u0d39\u0d36\u0001\u0000\u0000\u0000\u0d39\u0d37\u0001\u0000\u0000\u0000"+
		"\u0d3a\u01d7\u0001\u0000\u0000\u0000\u0d3b\u0d3c\u0005\u01a5\u0000\u0000"+
		"\u0d3c\u0d3d\u0003\u020c\u0106\u0000\u0d3d\u0d3f\u0003\u01da\u00ed\u0000"+
		"\u0d3e\u0d40\u0003\u02de\u016f\u0000\u0d3f\u0d3e\u0001\u0000\u0000\u0000"+
		"\u0d3f\u0d40\u0001\u0000\u0000\u0000\u0d40\u0d42\u0001\u0000\u0000\u0000"+
		"\u0d41\u0d43\u0003\u020e\u0107\u0000\u0d42\u0d41\u0001\u0000\u0000\u0000"+
		"\u0d42\u0d43\u0001\u0000\u0000\u0000\u0d43\u0d45\u0001\u0000\u0000\u0000"+
		"\u0d44\u0d46\u0003\u0210\u0108\u0000\u0d45\u0d44\u0001\u0000\u0000\u0000"+
		"\u0d45\u0d46\u0001\u0000\u0000\u0000\u0d46\u01d9\u0001\u0000\u0000\u0000"+
		"\u0d47\u0d57\u0005\u0163\u0000\u0000\u0d48\u0d4d\u0003\u01dc\u00ee\u0000"+
		"\u0d49\u0d4a\u0005\u0218\u0000\u0000\u0d4a\u0d4c\u0003\u01dc\u00ee\u0000"+
		"\u0d4b\u0d49\u0001\u0000\u0000\u0000\u0d4c\u0d4f\u0001\u0000\u0000\u0000"+
		"\u0d4d\u0d4b\u0001\u0000\u0000\u0000\u0d4d\u0d4e\u0001\u0000\u0000\u0000"+
		"\u0d4e\u0d58\u0001\u0000\u0000\u0000\u0d4f\u0d4d\u0001\u0000\u0000\u0000"+
		"\u0d50\u0d51\u0005\u01ac\u0000\u0000\u0d51\u0d52\u0005\u0212\u0000\u0000"+
		"\u0d52\u0d53\u0003\u034e\u01a7\u0000\u0d53\u0d54\u0005\u0213\u0000\u0000"+
		"\u0d54\u0d55\u0005\u0229\u0000\u0000\u0d55\u0d56\u0003\u0252\u0129\u0000"+
		"\u0d56\u0d58\u0001\u0000\u0000\u0000\u0d57\u0d48\u0001\u0000\u0000\u0000"+
		"\u0d57\u0d50\u0001\u0000\u0000\u0000\u0d58\u01db\u0001\u0000\u0000\u0000"+
		"\u0d59\u0d5a\u0003\"\u0011\u0000\u0d5a\u0d5b\u0005\u0229\u0000\u0000\u0d5b"+
		"\u0d5c\u0003\u0252\u0129\u0000\u0d5c\u0d6b\u0001\u0000\u0000\u0000\u0d5d"+
		"\u0d5e\u0005\u0212\u0000\u0000\u0d5e\u0d63\u0003\"\u0011\u0000\u0d5f\u0d60"+
		"\u0005\u0218\u0000\u0000\u0d60\u0d62\u0003\"\u0011\u0000\u0d61\u0d5f\u0001"+
		"\u0000\u0000\u0000\u0d62\u0d65\u0001\u0000\u0000\u0000\u0d63\u0d61\u0001"+
		"\u0000\u0000\u0000\u0d63\u0d64\u0001\u0000\u0000\u0000\u0d64\u0d66\u0001"+
		"\u0000\u0000\u0000\u0d65\u0d63\u0001\u0000\u0000\u0000\u0d66\u0d67\u0005"+
		"\u0213\u0000\u0000\u0d67\u0d68\u0005\u0229\u0000\u0000\u0d68\u0d69\u0003"+
		"\u016e\u00b7\u0000\u0d69\u0d6b\u0001\u0000\u0000\u0000\u0d6a\u0d59\u0001"+
		"\u0000\u0000\u0000\u0d6a\u0d5d\u0001\u0000\u0000\u0000\u0d6b\u01dd\u0001"+
		"\u0000\u0000\u0000\u0d6c\u0d6e\u0005n\u0000\u0000\u0d6d\u0d6f\u0005\u009d"+
		"\u0000\u0000\u0d6e\u0d6d\u0001\u0000\u0000\u0000\u0d6e\u0d6f\u0001\u0000"+
		"\u0000\u0000\u0d6f\u0d70\u0001\u0000\u0000\u0000\u0d70\u0d72\u0003\u020c"+
		"\u0106\u0000\u0d71\u0d73\u0003\u02de\u016f\u0000\u0d72\u0d71\u0001\u0000"+
		"\u0000\u0000\u0d72\u0d73\u0001\u0000\u0000\u0000\u0d73\u0d75\u0001\u0000"+
		"\u0000\u0000\u0d74\u0d76\u0003\u020e\u0107\u0000\u0d75\u0d74\u0001\u0000"+
		"\u0000\u0000\u0d75\u0d76\u0001\u0000\u0000\u0000\u0d76\u0d78\u0001\u0000"+
		"\u0000\u0000\u0d77\u0d79\u0003\u0210\u0108\u0000\u0d78\u0d77\u0001\u0000"+
		"\u0000\u0000\u0d78\u0d79\u0001\u0000\u0000\u0000\u0d79\u01df\u0001\u0000"+
		"\u0000\u0000\u0d7a\u0d7d\u0005\u00b9\u0000\u0000\u0d7b\u0d7e\u0003\u01e8"+
		"\u00f4\u0000\u0d7c\u0d7e\u0003\u01ea\u00f5\u0000\u0d7d\u0d7b\u0001\u0000"+
		"\u0000\u0000\u0d7d\u0d7c\u0001\u0000\u0000\u0000\u0d7e\u01e1\u0001\u0000"+
		"\u0000\u0000\u0d7f\u0d80\u0005g\u0000\u0000\u0d80\u0d82\u0003\u034e\u01a7"+
		"\u0000\u0d81\u0d83\u0003\u032e\u0197\u0000\u0d82\u0d81\u0001\u0000\u0000"+
		"\u0000\u0d82\u0d83\u0001\u0000\u0000\u0000\u0d83\u0d85\u0001\u0000\u0000"+
		"\u0000\u0d84\u0d86\u0003\u00ecv\u0000\u0d85\u0d84\u0001\u0000\u0000\u0000"+
		"\u0d85\u0d86\u0001\u0000\u0000\u0000\u0d86\u01e3\u0001\u0000\u0000\u0000"+
		"\u0d87\u0d88\u0005g\u0000\u0000\u0d88\u0d89\u0005\u008d\u0000\u0000\u0d89"+
		"\u0d8a\u0005\u00a6\u0000\u0000\u0d8a\u0d8b\u0005\u009a\u0000\u0000\u0d8b"+
		"\u0d8c\u0003X,\u0000\u0d8c\u0d8d\u0003\u0148\u00a4\u0000\u0d8d\u01e5\u0001"+
		"\u0000\u0000\u0000\u0d8e\u0d91\u0005\u0177\u0000\u0000\u0d8f\u0d91\u0003"+
		"\u034e\u01a7\u0000\u0d90\u0d8e\u0001\u0000\u0000\u0000\u0d90\u0d8f\u0001"+
		"\u0000\u0000\u0000\u0d91\u01e7\u0001\u0000\u0000\u0000\u0d92\u0d98\u0003"+
		"\u01f4\u00fa\u0000\u0d93\u0d95\u0003\u01f6\u00fb\u0000\u0d94\u0d96\u0003"+
		"\u020e\u0107\u0000\u0d95\u0d94\u0001\u0000\u0000\u0000\u0d95\u0d96\u0001"+
		"\u0000\u0000\u0000\u0d96\u0d99\u0001\u0000\u0000\u0000\u0d97\u0d99\u0003"+
		"\u0164\u00b2\u0000\u0d98\u0d93\u0001\u0000\u0000\u0000\u0d98\u0d97\u0001"+
		"\u0000\u0000\u0000\u0d99\u0d9b\u0001\u0000\u0000\u0000\u0d9a\u0d9c\u0003"+
		"\u0210\u0108\u0000\u0d9b\u0d9a\u0001\u0000\u0000\u0000\u0d9b\u0d9c\u0001"+
		"\u0000\u0000\u0000\u0d9c\u01e9\u0001\u0000\u0000\u0000\u0d9d\u0d9f\u0005"+
		"\r\u0000\u0000\u0d9e\u0da0\u0003\u01ec\u00f6\u0000\u0d9f\u0d9e\u0001\u0000"+
		"\u0000\u0000\u0da0\u0da1\u0001\u0000\u0000\u0000\u0da1\u0d9f\u0001\u0000"+
		"\u0000\u0000\u0da1\u0da2\u0001\u0000\u0000\u0000\u0da2\u0da5\u0001\u0000"+
		"\u0000\u0000\u0da3\u0da5\u0003\u01ee\u00f7\u0000\u0da4\u0d9d\u0001\u0000"+
		"\u0000\u0000\u0da4\u0da3\u0001\u0000\u0000\u0000\u0da5\u0da6\u0001\u0000"+
		"\u0000\u0000\u0da6\u0da7\u0003\u0164\u00b2\u0000\u0da7\u01eb\u0001\u0000"+
		"\u0000\u0000\u0da8\u0daa\u0003\u01f4\u00fa\u0000\u0da9\u0dab\u0003\u01f6"+
		"\u00fb\u0000\u0daa\u0da9\u0001\u0000\u0000\u0000\u0daa\u0dab\u0001\u0000"+
		"\u0000\u0000\u0dab\u0dad\u0001\u0000\u0000\u0000\u0dac\u0dae\u0003\u0210"+
		"\u0108\u0000\u0dad\u0dac\u0001\u0000\u0000\u0000\u0dad\u0dae\u0001\u0000"+
		"\u0000\u0000\u0dae\u01ed\u0001\u0000\u0000\u0000\u0daf\u0db1\u0007!\u0000"+
		"\u0000\u0db0\u0daf\u0001\u0000\u0000\u0000\u0db0\u0db1\u0001\u0000\u0000"+
		"\u0000\u0db1\u0db3\u0001\u0000\u0000\u0000\u0db2\u0db4\u0003\u01f0\u00f8"+
		"\u0000\u0db3\u0db2\u0001\u0000\u0000\u0000\u0db4\u0db5\u0001\u0000\u0000"+
		"\u0000\u0db5\u0db3\u0001\u0000\u0000\u0000\u0db5\u0db6\u0001\u0000\u0000"+
		"\u0000\u0db6\u0db8\u0001\u0000\u0000\u0000\u0db7\u0db9\u0003\u01f2\u00f9"+
		"\u0000\u0db8\u0db7\u0001\u0000\u0000\u0000\u0db8\u0db9\u0001\u0000\u0000"+
		"\u0000\u0db9\u01ef\u0001\u0000\u0000\u0000\u0dba\u0dbb\u0005\u01b9\u0000"+
		"\u0000\u0dbb\u0dbc\u0003\u0224\u0112\u0000\u0dbc\u0dbe\u0005\u0189\u0000"+
		"\u0000\u0dbd\u0dbf\u0003\u01ec\u00f6\u0000\u0dbe\u0dbd\u0001\u0000\u0000"+
		"\u0000\u0dbf\u0dc0\u0001\u0000\u0000\u0000\u0dc0\u0dbe\u0001\u0000\u0000"+
		"\u0000\u0dc0\u0dc1\u0001\u0000\u0000\u0000\u0dc1\u01f1\u0001\u0000\u0000"+
		"\u0000\u0dc2\u0dc4\u0005|\u0000\u0000\u0dc3\u0dc5\u0003\u01ec\u00f6\u0000"+
		"\u0dc4\u0dc3\u0001\u0000\u0000\u0000\u0dc5\u0dc6\u0001\u0000\u0000\u0000"+
		"\u0dc6\u0dc4\u0001\u0000\u0000\u0000\u0dc6\u0dc7\u0001\u0000\u0000\u0000"+
		"\u0dc7\u01f3\u0001\u0000\u0000\u0000\u0dc8\u0dc9\u0005\u00c0\u0000\u0000"+
		"\u0dc9\u0dd5\u0003\u020c\u0106\u0000\u0dca\u0dcb\u0005\u0212\u0000\u0000"+
		"\u0dcb\u0dd0\u0003\"\u0011\u0000\u0dcc\u0dcd\u0005\u0218\u0000\u0000\u0dcd"+
		"\u0dcf\u0003\"\u0011\u0000\u0dce\u0dcc\u0001\u0000\u0000\u0000\u0dcf\u0dd2"+
		"\u0001\u0000\u0000\u0000\u0dd0\u0dce\u0001\u0000\u0000\u0000\u0dd0\u0dd1"+
		"\u0001\u0000\u0000\u0000\u0dd1\u0dd3\u0001\u0000\u0000\u0000\u0dd2\u0dd0"+
		"\u0001\u0000\u0000\u0000\u0dd3\u0dd4\u0005\u0213\u0000\u0000\u0dd4\u0dd6"+
		"\u0001\u0000\u0000\u0000\u0dd5\u0dca\u0001\u0000\u0000\u0000\u0dd5\u0dd6"+
		"\u0001\u0000\u0000\u0000\u0dd6\u01f5\u0001\u0000\u0000\u0000\u0dd7\u0dd8"+
		"\u0005\u01ad\u0000\u0000\u0dd8\u0dd9\u0003\u0222\u0111\u0000\u0dd9\u01f7"+
		"\u0001\u0000\u0000\u0000\u0dda\u0ddb\u0005\u00e3\u0000\u0000\u0ddb\u0ddc"+
		"\u0005\u00c0\u0000\u0000\u0ddc\u0dde\u0003\u031e\u018f\u0000\u0ddd\u0ddf"+
		"\u0003\u02da\u016d\u0000\u0dde\u0ddd\u0001\u0000\u0000\u0000\u0dde\u0ddf"+
		"\u0001\u0000\u0000\u0000\u0ddf\u0de0\u0001\u0000\u0000\u0000\u0de0\u0de1"+
		"\u0005\u01aa\u0000\u0000\u0de1\u0de2\u0003\u0202\u0101\u0000\u0de2\u0de3"+
		"\u0005\u010e\u0000\u0000\u0de3\u0de4\u0005\u0212\u0000\u0000\u0de4\u0de5"+
		"\u0003\u0224\u0112\u0000\u0de5\u0dee\u0005\u0213\u0000\u0000\u0de6\u0de8"+
		"\u0003\u01fa\u00fd\u0000\u0de7\u0de9\u0003\u0200\u0100\u0000\u0de8\u0de7"+
		"\u0001\u0000\u0000\u0000\u0de8\u0de9\u0001\u0000\u0000\u0000\u0de9\u0def"+
		"\u0001\u0000\u0000\u0000\u0dea\u0dec\u0003\u0200\u0100\u0000\u0deb\u0ded"+
		"\u0003\u01fa\u00fd\u0000\u0dec\u0deb\u0001\u0000\u0000\u0000\u0dec\u0ded"+
		"\u0001\u0000\u0000\u0000\u0ded\u0def\u0001\u0000\u0000\u0000\u0dee\u0de6"+
		"\u0001\u0000\u0000\u0000\u0dee\u0dea\u0001\u0000\u0000\u0000\u0dee\u0def"+
		"\u0001\u0000\u0000\u0000\u0def\u0df1\u0001\u0000\u0000\u0000\u0df0\u0df2"+
		"\u0003\u0210\u0108\u0000\u0df1\u0df0\u0001\u0000\u0000\u0000\u0df1\u0df2"+
		"\u0001\u0000\u0000\u0000\u0df2\u01f9\u0001\u0000\u0000\u0000\u0df3\u0df4"+
		"\u0005\u01b9\u0000\u0000\u0df4\u0df5\u0005\u00df\u0000\u0000\u0df5\u0df6"+
		"\u0005\u0189\u0000\u0000\u0df6\u0df7\u0005\u01a5\u0000\u0000\u0df7\u0df8"+
		"\u0005\u0163\u0000\u0000\u0df8\u0dfd\u0003\u01fc\u00fe\u0000\u0df9\u0dfa"+
		"\u0005\u0218\u0000\u0000\u0dfa\u0dfc\u0003\u01fc\u00fe\u0000\u0dfb\u0df9"+
		"\u0001\u0000\u0000\u0000\u0dfc\u0dff\u0001\u0000\u0000\u0000\u0dfd\u0dfb"+
		"\u0001\u0000\u0000\u0000\u0dfd\u0dfe\u0001\u0000\u0000\u0000\u0dfe\u0e01"+
		"\u0001\u0000\u0000\u0000\u0dff\u0dfd\u0001\u0000\u0000\u0000\u0e00\u0e02"+
		"\u0003\u02de\u016f\u0000\u0e01\u0e00\u0001\u0000\u0000\u0000\u0e01\u0e02"+
		"\u0001\u0000\u0000\u0000\u0e02\u0e04\u0001\u0000\u0000\u0000\u0e03\u0e05"+
		"\u0003\u01fe\u00ff\u0000\u0e04\u0e03\u0001\u0000\u0000\u0000\u0e04\u0e05"+
		"\u0001\u0000\u0000\u0000\u0e05\u01fb\u0001\u0000\u0000\u0000\u0e06\u0e07"+
		"\u0003\"\u0011\u0000\u0e07\u0e08\u0005\u0229\u0000\u0000\u0e08\u0e09\u0003"+
		"\u0252\u0129\u0000\u0e09\u01fd\u0001\u0000\u0000\u0000\u0e0a\u0e0b\u0005"+
		"n\u0000\u0000\u0e0b\u0e0c\u0003\u02de\u016f\u0000\u0e0c\u01ff\u0001\u0000"+
		"\u0000\u0000\u0e0d\u0e0e\u0005\u01b9\u0000\u0000\u0e0e\u0e0f\u0005\u0102"+
		"\u0000\u0000\u0e0f\u0e10\u0005\u00df\u0000\u0000\u0e10\u0e11\u0005\u0189"+
		"\u0000\u0000\u0e11\u0e1d\u0005\u00b9\u0000\u0000\u0e12\u0e13\u0005\u0212"+
		"\u0000\u0000\u0e13\u0e18\u0003\"\u0011\u0000\u0e14\u0e15\u0005\u0218\u0000"+
		"\u0000\u0e15\u0e17\u0003\"\u0011\u0000\u0e16\u0e14\u0001\u0000\u0000\u0000"+
		"\u0e17\u0e1a\u0001\u0000\u0000\u0000\u0e18\u0e16\u0001\u0000\u0000\u0000"+
		"\u0e18\u0e19\u0001\u0000\u0000\u0000\u0e19\u0e1b\u0001\u0000\u0000\u0000"+
		"\u0e1a\u0e18\u0001\u0000\u0000\u0000\u0e1b\u0e1c\u0005\u0213\u0000\u0000"+
		"\u0e1c\u0e1e\u0001\u0000\u0000\u0000\u0e1d\u0e12\u0001\u0000\u0000\u0000"+
		"\u0e1d\u0e1e\u0001\u0000\u0000\u0000\u0e1e\u0e1f\u0001\u0000\u0000\u0000"+
		"\u0e1f\u0e20\u0005\u01ad\u0000\u0000\u0e20\u0e22\u0003\u0222\u0111\u0000"+
		"\u0e21\u0e23\u0003\u02de\u016f\u0000\u0e22\u0e21\u0001\u0000\u0000\u0000"+
		"\u0e22\u0e23\u0001\u0000\u0000\u0000\u0e23\u0201\u0001\u0000\u0000\u0000"+
		"\u0e24\u0e2a\u0003\u031e\u018f\u0000\u0e25\u0e26\u0005\u0212\u0000\u0000"+
		"\u0e26\u0e27\u0003\u0164\u00b2\u0000\u0e27\u0e28\u0005\u0213\u0000\u0000"+
		"\u0e28\u0e2a\u0001\u0000\u0000\u0000\u0e29\u0e24\u0001\u0000\u0000\u0000"+
		"\u0e29\u0e25\u0001\u0000\u0000\u0000\u0e2a\u0e2c\u0001\u0000\u0000\u0000"+
		"\u0e2b\u0e2d\u0003\u02da\u016d\u0000\u0e2c\u0e2b\u0001\u0000\u0000\u0000"+
		"\u0e2c\u0e2d\u0001\u0000\u0000\u0000\u0e2d\u0203\u0001\u0000\u0000\u0000"+
		"\u0e2e\u0e2f\u0005\u00d6\u0000\u0000\u0e2f\u0e30\u0005\u0187\u0000\u0000"+
		"\u0e30\u0e35\u0003\u0208\u0104\u0000\u0e31\u0e32\u0005\u0218\u0000\u0000"+
		"\u0e32\u0e34\u0003\u0208\u0104\u0000\u0e33\u0e31\u0001\u0000\u0000\u0000"+
		"\u0e34\u0e37\u0001\u0000\u0000\u0000\u0e35\u0e33\u0001\u0000\u0000\u0000"+
		"\u0e35\u0e36\u0001\u0000\u0000\u0000\u0e36\u0e38\u0001\u0000\u0000\u0000"+
		"\u0e37\u0e35\u0001\u0000\u0000\u0000\u0e38\u0e39\u0005\u00ac\u0000\u0000"+
		"\u0e39\u0e3a\u0003\u020a\u0105\u0000\u0e3a\u0e3c\u0005\u00e8\u0000\u0000"+
		"\u0e3b\u0e3d\u0003\u0206\u0103\u0000\u0e3c\u0e3b\u0001\u0000\u0000\u0000"+
		"\u0e3c\u0e3d\u0001\u0000\u0000\u0000\u0e3d\u0205\u0001\u0000\u0000\u0000"+
		"\u0e3e\u0e3f\u0005\u01b6\u0000\u0000\u0e3f\u0e42\u0003\u0252\u0129\u0000"+
		"\u0e40\u0e42\u0005\u0103\u0000\u0000\u0e41\u0e3e\u0001\u0000\u0000\u0000"+
		"\u0e41\u0e40\u0001\u0000\u0000\u0000\u0e42\u0207\u0001\u0000\u0000\u0000"+
		"\u0e43\u0e45\u0003\u031e\u018f\u0000\u0e44\u0e46\u0003\u02d6\u016b\u0000"+
		"\u0e45\u0e44\u0001\u0000\u0000\u0000\u0e45\u0e46\u0001\u0000\u0000\u0000"+
		"\u0e46\u0209\u0001\u0000\u0000\u0000\u0e47\u0e48\u0005\u014b\u0000\u0000"+
		"\u0e48\u0e54\u0005\u0166\u0000\u0000\u0e49\u0e4a\u0005\u014b\u0000\u0000"+
		"\u0e4a\u0e54\u0005\u008a\u0000\u0000\u0e4b\u0e4d\u0005\u0166\u0000\u0000"+
		"\u0e4c\u0e4e\u0005\u01a5\u0000\u0000\u0e4d\u0e4c\u0001\u0000\u0000\u0000"+
		"\u0e4d\u0e4e\u0001\u0000\u0000\u0000\u0e4e\u0e54\u0001\u0000\u0000\u0000"+
		"\u0e4f\u0e50\u0005\u0166\u0000\u0000\u0e50\u0e51\u0005\u014b\u0000\u0000"+
		"\u0e51\u0e54\u0005\u008a\u0000\u0000\u0e52\u0e54\u0005\u008a\u0000\u0000"+
		"\u0e53\u0e47\u0001\u0000\u0000\u0000\u0e53\u0e49\u0001\u0000\u0000\u0000"+
		"\u0e53\u0e4b\u0001\u0000\u0000\u0000\u0e53\u0e4f\u0001\u0000\u0000\u0000"+
		"\u0e53\u0e52\u0001\u0000\u0000\u0000\u0e54\u020b\u0001\u0000\u0000\u0000"+
		"\u0e55\u0e5c\u0003\u0216\u010b\u0000\u0e56\u0e57\u0005\u010f\u0000\u0000"+
		"\u0e57\u0e58\u0005\u0212\u0000\u0000\u0e58\u0e59\u0003\u0216\u010b\u0000"+
		"\u0e59\u0e5a\u0005\u0213\u0000\u0000\u0e5a\u0e5c\u0001\u0000\u0000\u0000"+
		"\u0e5b\u0e55\u0001\u0000\u0000\u0000\u0e5b\u0e56\u0001\u0000\u0000\u0000"+
		"\u0e5c\u0e5e\u0001\u0000\u0000\u0000\u0e5d\u0e5f\u0003\u02da\u016d\u0000"+
		"\u0e5e\u0e5d\u0001\u0000\u0000\u0000\u0e5e\u0e5f\u0001\u0000\u0000\u0000"+
		"\u0e5f\u020d\u0001\u0000\u0000\u0000\u0e60\u0e61\u0007\u000e\u0000\u0000"+
		"\u0e61\u0e66\u0003\u0252\u0129\u0000\u0e62\u0e63\u0005\u0218\u0000\u0000"+
		"\u0e63\u0e65\u0003\u0252\u0129\u0000\u0e64\u0e62\u0001\u0000\u0000\u0000"+
		"\u0e65\u0e68\u0001\u0000\u0000\u0000\u0e66\u0e64\u0001\u0000\u0000\u0000"+
		"\u0e66\u0e67\u0001\u0000\u0000\u0000\u0e67\u0e69\u0001\u0000\u0000\u0000"+
		"\u0e68\u0e66\u0001\u0000\u0000\u0000\u0e69\u0e6a\u0003\u02e2\u0171\u0000"+
		"\u0e6a\u020f\u0001\u0000\u0000\u0000\u0e6b\u0e6c\u0005\u00d8\u0000\u0000"+
		"\u0e6c\u0e6e\u0005\u0083\u0000\u0000\u0e6d\u0e6f\u0003\u0212\u0109\u0000"+
		"\u0e6e\u0e6d\u0001\u0000\u0000\u0000\u0e6e\u0e6f\u0001\u0000\u0000\u0000"+
		"\u0e6f\u0e71\u0001\u0000\u0000\u0000\u0e70\u0e72\u0003\u0254\u012a\u0000"+
		"\u0e71\u0e70\u0001\u0000\u0000\u0000\u0e71\u0e72\u0001\u0000\u0000\u0000"+
		"\u0e72\u0e74\u0001\u0000\u0000\u0000\u0e73\u0e75\u0003\u0214\u010a\u0000"+
		"\u0e74\u0e73\u0001\u0000\u0000\u0000\u0e74\u0e75\u0001\u0000\u0000\u0000"+
		"\u0e75\u0211\u0001\u0000\u0000\u0000\u0e76\u0e77\u0005\u00c0\u0000\u0000"+
		"\u0e77\u0e78\u0003\u031e\u018f\u0000\u0e78\u0213\u0001\u0000\u0000\u0000"+
		"\u0e79\u0e7a\u0005\u013a\u0000\u0000\u0e7a\u0e7d\u0005\u00d4\u0000\u0000"+
		"\u0e7b\u0e7e\u0005\u01a2\u0000\u0000\u0e7c\u0e7e\u0003\u0254\u012a\u0000"+
		"\u0e7d\u0e7b\u0001\u0000\u0000\u0000\u0e7d\u0e7c\u0001\u0000\u0000\u0000"+
		"\u0e7e\u0215\u0001\u0000\u0000\u0000\u0e7f\u0e8c\u0003\u0218\u010c\u0000"+
		"\u0e80\u0e81\u0005\u0212\u0000\u0000\u0e81\u0e83\u0003\u0164\u00b2\u0000"+
		"\u0e82\u0e84\u0003\u021a\u010d\u0000\u0e83\u0e82\u0001\u0000\u0000\u0000"+
		"\u0e83\u0e84\u0001\u0000\u0000\u0000\u0e84\u0e85\u0001\u0000\u0000\u0000"+
		"\u0e85\u0e86\u0005\u0213\u0000\u0000\u0e86\u0e8c\u0001\u0000\u0000\u0000"+
		"\u0e87\u0e89\u0003\u031e\u018f\u0000\u0e88\u0e8a\u0003\u021c\u010e\u0000"+
		"\u0e89\u0e88\u0001\u0000\u0000\u0000\u0e89\u0e8a\u0001\u0000\u0000\u0000"+
		"\u0e8a\u0e8c\u0001\u0000\u0000\u0000\u0e8b\u0e7f\u0001\u0000\u0000\u0000"+
		"\u0e8b\u0e80\u0001\u0000\u0000\u0000\u0e8b\u0e87\u0001\u0000\u0000\u0000"+
		"\u0e8c\u0217\u0001\u0000\u0000\u0000\u0e8d\u0e9a\u0007\"\u0000\u0000\u0e8e"+
		"\u0e8f\u0005\u0212\u0000\u0000\u0e8f\u0e90\u0003\u016e\u00b7\u0000\u0e90"+
		"\u0e91\u0005\u0213\u0000\u0000\u0e91\u0e9b\u0001\u0000\u0000\u0000\u0e92"+
		"\u0e93\u0005\u0212\u0000\u0000\u0e93\u0e94\u0003\u0252\u0129\u0000\u0e94"+
		"\u0e98\u0005\u0213\u0000\u0000\u0e95\u0e96\u0005\u0212\u0000\u0000\u0e96"+
		"\u0e97\u0005\u0216\u0000\u0000\u0e97\u0e99\u0005\u0213\u0000\u0000\u0e98"+
		"\u0e95\u0001\u0000\u0000\u0000\u0e98\u0e99\u0001\u0000\u0000\u0000\u0e99"+
		"\u0e9b\u0001\u0000\u0000\u0000\u0e9a\u0e8e\u0001\u0000\u0000\u0000\u0e9a"+
		"\u0e92\u0001\u0000\u0000\u0000\u0e9b\u0219\u0001\u0000\u0000\u0000\u0e9c"+
		"\u0ea5\u0005\u01bd\u0000\u0000\u0e9d\u0e9e\u0005\u0133\u0000\u0000\u0e9e"+
		"\u0ea6\u0005\u010f\u0000\u0000\u0e9f\u0ea0\u0005:\u0000\u0000\u0ea0\u0ea3"+
		"\u0005\u0111\u0000\u0000\u0ea1\u0ea2\u0005J\u0000\u0000\u0ea2\u0ea4\u0003"+
		"\u0300\u0180\u0000\u0ea3\u0ea1\u0001\u0000\u0000\u0000\u0ea3\u0ea4\u0001"+
		"\u0000\u0000\u0000\u0ea4\u0ea6\u0001\u0000\u0000\u0000\u0ea5\u0e9d\u0001"+
		"\u0000\u0000\u0000\u0ea5\u0e9f\u0001\u0000\u0000\u0000\u0ea6\u021b\u0001"+
		"\u0000\u0000\u0000\u0ea7\u0ea9\u0005\u014f\u0000\u0000\u0ea8\u0eaa\u0005"+
		"(\u0000\u0000\u0ea9\u0ea8\u0001\u0000\u0000\u0000\u0ea9\u0eaa\u0001\u0000"+
		"\u0000\u0000\u0eaa\u0eab\u0001\u0000\u0000\u0000\u0eab\u0eac\u0005\u0212"+
		"\u0000\u0000\u0eac\u0eaf\u0003\u0252\u0129\u0000\u0ead\u0eae\u0005\u0218"+
		"\u0000\u0000\u0eae\u0eb0\u0003\u0252\u0129\u0000\u0eaf\u0ead\u0001\u0000"+
		"\u0000\u0000\u0eaf\u0eb0\u0001\u0000\u0000\u0000\u0eb0\u0eb1\u0001\u0000"+
		"\u0000\u0000\u0eb1\u0eb3\u0005\u0213\u0000\u0000\u0eb2\u0eb4\u0003\u021e"+
		"\u010f\u0000\u0eb3\u0eb2\u0001\u0000\u0000\u0000\u0eb3\u0eb4\u0001\u0000"+
		"\u0000\u0000\u0eb4\u021d\u0001\u0000\u0000\u0000\u0eb5\u0eb6\u0005\u0159"+
		"\u0000\u0000\u0eb6\u0eb7\u0005\u0212\u0000\u0000\u0eb7\u0eb8\u0003\u0252"+
		"\u0129\u0000\u0eb8\u0eb9\u0005\u0213\u0000\u0000\u0eb9\u021f\u0001\u0000"+
		"\u0000\u0000\u0eba\u0ebb\u0005Z\u0000\u0000\u0ebb\u0ebc\u0005\u0212\u0000"+
		"\u0000\u0ebc\u0ebd\u0003\u016e\u00b7\u0000\u0ebd\u0ebe\u0005\u0213\u0000"+
		"\u0000\u0ebe\u0221\u0001\u0000\u0000\u0000\u0ebf\u0ec1\u0005\u0212\u0000"+
		"\u0000\u0ec0\u0ec2\u0003\u0252\u0129\u0000\u0ec1\u0ec0\u0001\u0000\u0000"+
		"\u0000\u0ec1\u0ec2\u0001\u0000\u0000\u0000\u0ec2\u0ec7\u0001\u0000\u0000"+
		"\u0000\u0ec3\u0ec4\u0005\u0218\u0000\u0000\u0ec4\u0ec6\u0003\u0252\u0129"+
		"\u0000\u0ec5\u0ec3\u0001\u0000\u0000\u0000\u0ec6\u0ec9\u0001\u0000\u0000"+
		"\u0000\u0ec7\u0ec5\u0001\u0000\u0000\u0000\u0ec7\u0ec8\u0001\u0000\u0000"+
		"\u0000\u0ec8\u0eca\u0001\u0000\u0000\u0000\u0ec9\u0ec7\u0001\u0000\u0000"+
		"\u0000\u0eca\u0ecb\u0005\u0213\u0000\u0000\u0ecb\u0223\u0001\u0000\u0000"+
		"\u0000\u0ecc\u0ecd\u0003\u0252\u0129\u0000\u0ecd\u0225\u0001\u0000\u0000"+
		"\u0000\u0ece\u0ecf\u0003\u0228\u0114\u0000\u0ecf\u0227\u0001\u0000\u0000"+
		"\u0000\u0ed0\u0ed1\u0006\u0114\uffff\uffff\u0000\u0ed1\u0ed2\u0005\u0102"+
		"\u0000\u0000\u0ed2\u0ed9\u0003\u0228\u0114\u0003\u0ed3\u0ed4\u0005\u0212"+
		"\u0000\u0000\u0ed4\u0ed5\u0003\u0228\u0114\u0000\u0ed5\u0ed6\u0005\u0213"+
		"\u0000\u0000\u0ed6\u0ed9\u0001\u0000\u0000\u0000\u0ed7\u0ed9\u0003\u022a"+
		"\u0115\u0000\u0ed8\u0ed0\u0001\u0000\u0000\u0000\u0ed8\u0ed3\u0001\u0000"+
		"\u0000\u0000\u0ed8\u0ed7\u0001\u0000\u0000\u0000\u0ed9\u0ee2\u0001\u0000"+
		"\u0000\u0000\u0eda\u0edb\n\u0005\u0000\u0000\u0edb\u0edc\u0005\u0112\u0000"+
		"\u0000\u0edc\u0ee1\u0003\u0228\u0114\u0006\u0edd\u0ede\n\u0004\u0000\u0000"+
		"\u0ede\u0edf\u0005\u0011\u0000\u0000\u0edf\u0ee1\u0003\u0228\u0114\u0005"+
		"\u0ee0\u0eda\u0001\u0000\u0000\u0000\u0ee0\u0edd\u0001\u0000\u0000\u0000"+
		"\u0ee1\u0ee4\u0001\u0000\u0000\u0000\u0ee2\u0ee0\u0001\u0000\u0000\u0000"+
		"\u0ee2\u0ee3\u0001\u0000\u0000\u0000\u0ee3\u0229\u0001\u0000\u0000\u0000"+
		"\u0ee4\u0ee2\u0001\u0000\u0000\u0000\u0ee5\u0eec\u0003\u022c\u0116\u0000"+
		"\u0ee6\u0eec\u0003\u0230\u0118\u0000\u0ee7\u0eec\u0003\u0232\u0119\u0000"+
		"\u0ee8\u0eec\u0003\u0234\u011a\u0000\u0ee9\u0eec\u0003\u0236\u011b\u0000"+
		"\u0eea\u0eec\u0003\u0238\u011c\u0000\u0eeb\u0ee5\u0001\u0000\u0000\u0000"+
		"\u0eeb\u0ee6\u0001\u0000\u0000\u0000\u0eeb\u0ee7\u0001\u0000\u0000\u0000"+
		"\u0eeb\u0ee8\u0001\u0000\u0000\u0000\u0eeb\u0ee9\u0001\u0000\u0000\u0000"+
		"\u0eeb\u0eea\u0001\u0000\u0000\u0000\u0eec\u022b\u0001\u0000\u0000\u0000"+
		"\u0eed\u0eee\u0003\u023c\u011e\u0000\u0eee\u0ef0\u0003\u022e\u0117\u0000"+
		"\u0eef\u0ef1\u0007#\u0000\u0000\u0ef0\u0eef\u0001\u0000\u0000\u0000\u0ef0"+
		"\u0ef1\u0001\u0000\u0000\u0000\u0ef1\u0ef4\u0001\u0000\u0000\u0000\u0ef2"+
		"\u0ef5\u0003\u023a\u011d\u0000\u0ef3\u0ef5\u0003\u016e\u00b7\u0000\u0ef4"+
		"\u0ef2\u0001\u0000\u0000\u0000\u0ef4\u0ef3\u0001\u0000\u0000\u0000\u0ef5"+
		"\u022d\u0001\u0000\u0000\u0000\u0ef6\u0ef7\u0007$\u0000\u0000\u0ef7\u022f"+
		"\u0001\u0000\u0000\u0000\u0ef8\u0efa\u0003\u023c\u011e\u0000\u0ef9\u0efb"+
		"\u0005\u0102\u0000\u0000\u0efa\u0ef9\u0001\u0000\u0000\u0000\u0efa\u0efb"+
		"\u0001\u0000\u0000\u0000\u0efb\u0efc\u0001\u0000\u0000\u0000\u0efc\u0efd"+
		"\u0005!\u0000\u0000\u0efd\u0efe\u0003\u023c\u011e\u0000\u0efe\u0eff\u0005"+
		"\u0011\u0000\u0000\u0eff\u0f00\u0003\u023c\u011e\u0000\u0f00\u0231\u0001"+
		"\u0000\u0000\u0000\u0f01\u0f03\u0003\u023c\u011e\u0000\u0f02\u0f04\u0005"+
		"\u0102\u0000\u0000\u0f03\u0f02\u0001\u0000\u0000\u0000\u0f03\u0f04\u0001"+
		"\u0000\u0000\u0000\u0f04\u0f05\u0001\u0000\u0000\u0000\u0f05\u0f08\u0005"+
		"\u00ac\u0000\u0000\u0f06\u0f09\u0003\u023a\u011d\u0000\u0f07\u0f09\u0003"+
		"\u016e\u00b7\u0000\u0f08\u0f06\u0001\u0000\u0000\u0000\u0f08\u0f07\u0001"+
		"\u0000\u0000\u0000\u0f09\u0233\u0001\u0000\u0000\u0000\u0f0a\u0f0c\u0005"+
		"\u0102\u0000\u0000\u0f0b\u0f0a\u0001\u0000\u0000\u0000\u0f0b\u0f0c\u0001"+
		"\u0000\u0000\u0000\u0f0c\u0f0d\u0001\u0000\u0000\u0000\u0f0d\u0f0e\u0005"+
		"\u008c\u0000\u0000\u0f0e\u0f0f\u0005\u0212\u0000\u0000\u0f0f\u0f10\u0003"+
		"\u016e\u00b7\u0000\u0f10\u0f11\u0005\u0213\u0000\u0000\u0f11\u0235\u0001"+
		"\u0000\u0000\u0000\u0f12\u0f14\u0003\u023c\u011e\u0000\u0f13\u0f15\u0005"+
		"\u0102\u0000\u0000\u0f14\u0f13\u0001\u0000\u0000\u0000\u0f14\u0f15\u0001"+
		"\u0000\u0000\u0000\u0f15\u0f16\u0001\u0000\u0000\u0000\u0f16\u0f17\u0005"+
		"\u00d0\u0000\u0000\u0f17\u0f1a\u0003\u023c\u011e\u0000\u0f18\u0f19\u0005"+
		"\u0084\u0000\u0000\u0f19\u0f1b\u0003\u023c\u011e\u0000\u0f1a\u0f18\u0001"+
		"\u0000\u0000\u0000\u0f1a\u0f1b\u0001\u0000\u0000\u0000\u0f1b\u0237\u0001"+
		"\u0000\u0000\u0000\u0f1c\u0f1d\u0003\u023c\u011e\u0000\u0f1d\u0f1f\u0005"+
		"\u00c3\u0000\u0000\u0f1e\u0f20\u0005\u0102\u0000\u0000\u0f1f\u0f1e\u0001"+
		"\u0000\u0000\u0000\u0f1f\u0f20\u0001\u0000\u0000\u0000\u0f20\u0f21\u0001"+
		"\u0000\u0000\u0000\u0f21\u0f22\u0005\u0104\u0000\u0000\u0f22\u0239\u0001"+
		"\u0000\u0000\u0000\u0f23\u0f28\u0003\u023c\u011e\u0000\u0f24\u0f25\u0005"+
		"\u0218\u0000\u0000\u0f25\u0f27\u0003\u023c\u011e\u0000\u0f26\u0f24\u0001"+
		"\u0000\u0000\u0000\u0f27\u0f2a\u0001\u0000\u0000\u0000\u0f28\u0f26\u0001"+
		"\u0000\u0000\u0000\u0f28\u0f29\u0001\u0000\u0000\u0000\u0f29\u023b\u0001"+
		"\u0000\u0000\u0000\u0f2a\u0f28\u0001\u0000\u0000\u0000\u0f2b\u0f2c\u0006"+
		"\u011e\uffff\uffff\u0000\u0f2c\u0f42\u0003\u0242\u0121\u0000\u0f2d\u0f42"+
		"\u0003\u0248\u0124\u0000\u0f2e\u0f42\u0003\u024a\u0125\u0000\u0f2f\u0f30"+
		"\u0005\u0212\u0000\u0000\u0f30\u0f31\u0003\u023c\u011e\u0000\u0f31\u0f32"+
		"\u0005\u0213\u0000\u0000\u0f32\u0f42\u0001\u0000\u0000\u0000\u0f33\u0f34"+
		"\u0005\u0212\u0000\u0000\u0f34\u0f35\u0003\u016e\u00b7\u0000\u0f35\u0f36"+
		"\u0005\u0213\u0000\u0000\u0f36\u0f42\u0001\u0000\u0000\u0000\u0f37\u0f38"+
		"\u0005\u0217\u0000\u0000\u0f38\u0f42\u0003\u023c\u011e\u0005\u0f39\u0f42"+
		"\u0003H$\u0000\u0f3a\u0f42\u0003\u0346\u01a3\u0000\u0f3b\u0f3c\u0003\u023e"+
		"\u011f\u0000\u0f3c\u0f3d\u0005\u020b\u0000\u0000\u0f3d\u0f3f\u0001\u0000"+
		"\u0000\u0000\u0f3e\u0f3b\u0001\u0000\u0000\u0000\u0f3e\u0f3f\u0001\u0000"+
		"\u0000\u0000\u0f3f\u0f40\u0001\u0000\u0000\u0000\u0f40\u0f42\u0003\"\u0011"+
		"\u0000\u0f41\u0f2b\u0001\u0000\u0000\u0000\u0f41\u0f2d\u0001\u0000\u0000"+
		"\u0000\u0f41\u0f2e\u0001\u0000\u0000\u0000\u0f41\u0f2f\u0001\u0000\u0000"+
		"\u0000\u0f41\u0f33\u0001\u0000\u0000\u0000\u0f41\u0f37\u0001\u0000\u0000"+
		"\u0000\u0f41\u0f39\u0001\u0000\u0000\u0000\u0f41\u0f3a\u0001\u0000\u0000"+
		"\u0000\u0f41\u0f3e\u0001\u0000\u0000\u0000\u0f42\u0f49\u0001\u0000\u0000"+
		"\u0000\u0f43\u0f44\n\u0004\u0000\u0000\u0f44\u0f45\u0003\u0240\u0120\u0000"+
		"\u0f45\u0f46\u0003\u023c\u011e\u0005\u0f46\u0f48\u0001\u0000\u0000\u0000"+
		"\u0f47\u0f43\u0001\u0000\u0000\u0000\u0f48\u0f4b\u0001\u0000\u0000\u0000"+
		"\u0f49\u0f47\u0001\u0000\u0000\u0000\u0f49\u0f4a\u0001\u0000\u0000\u0000"+
		"\u0f4a\u023d\u0001\u0000\u0000\u0000\u0f4b\u0f49\u0001\u0000\u0000\u0000"+
		"\u0f4c\u0f4d\u0003\u0350\u01a8\u0000\u0f4d\u023f\u0001\u0000\u0000\u0000"+
		"\u0f4e\u0f4f\u0007%\u0000\u0000\u0f4f\u0241\u0001\u0000\u0000\u0000\u0f50"+
		"\u0f53\u0003\u0244\u0122\u0000\u0f51\u0f53\u0003\u0246\u0123\u0000\u0f52"+
		"\u0f50\u0001\u0000\u0000\u0000\u0f52\u0f51\u0001\u0000\u0000\u0000\u0f53"+
		"\u0243\u0001\u0000\u0000\u0000\u0f54\u0f55\u00055\u0000\u0000\u0f55\u0f56"+
		"\u0003\u023c\u011e\u0000\u0f56\u0f57\u0005\u01b9\u0000\u0000\u0f57\u0f58"+
		"\u0003\u023c\u011e\u0000\u0f58\u0f59\u0005\u0189\u0000\u0000\u0f59\u0f61"+
		"\u0003\u023c\u011e\u0000\u0f5a\u0f5b\u0005\u01b9\u0000\u0000\u0f5b\u0f5c"+
		"\u0003\u023c\u011e\u0000\u0f5c\u0f5d\u0005\u0189\u0000\u0000\u0f5d\u0f5e"+
		"\u0003\u023c\u011e\u0000\u0f5e\u0f60\u0001\u0000\u0000\u0000\u0f5f\u0f5a"+
		"\u0001\u0000\u0000\u0000\u0f60\u0f63\u0001\u0000\u0000\u0000\u0f61\u0f5f"+
		"\u0001\u0000\u0000\u0000\u0f61\u0f62\u0001\u0000\u0000\u0000\u0f62\u0f66"+
		"\u0001\u0000\u0000\u0000\u0f63\u0f61\u0001\u0000\u0000\u0000\u0f64\u0f65"+
		"\u0005|\u0000\u0000\u0f65\u0f67\u0003\u023c\u011e\u0000\u0f66\u0f64\u0001"+
		"\u0000\u0000\u0000\u0f66\u0f67\u0001\u0000\u0000\u0000\u0f67\u0f68\u0001"+
		"\u0000\u0000\u0000\u0f68\u0f69\u0005\u0081\u0000\u0000\u0f69\u0245\u0001"+
		"\u0000\u0000\u0000\u0f6a\u0f6b\u00055\u0000\u0000\u0f6b\u0f6c\u0005\u01b9"+
		"\u0000\u0000\u0f6c\u0f6d\u0003\u0228\u0114\u0000\u0f6d\u0f6e\u0005\u0189"+
		"\u0000\u0000\u0f6e\u0f76\u0003\u023c\u011e\u0000\u0f6f\u0f70\u0005\u01b9"+
		"\u0000\u0000\u0f70\u0f71\u0003\u0228\u0114\u0000\u0f71\u0f72\u0005\u0189"+
		"\u0000\u0000\u0f72\u0f73\u0003\u023c\u011e\u0000\u0f73\u0f75\u0001\u0000"+
		"\u0000\u0000\u0f74\u0f6f\u0001\u0000\u0000\u0000\u0f75\u0f78\u0001\u0000"+
		"\u0000\u0000\u0f76\u0f74\u0001\u0000\u0000\u0000\u0f76\u0f77\u0001\u0000"+
		"\u0000\u0000\u0f77\u0f7b\u0001\u0000\u0000\u0000\u0f78\u0f76\u0001\u0000"+
		"\u0000\u0000\u0f79\u0f7a\u0005|\u0000\u0000\u0f7a\u0f7c\u0003\u023c\u011e"+
		"\u0000\u0f7b\u0f79\u0001\u0000\u0000\u0000\u0f7b\u0f7c\u0001\u0000\u0000"+
		"\u0000\u0f7c\u0f7d\u0001\u0000\u0000\u0000\u0f7d\u0f7e\u0005\u0081\u0000"+
		"\u0000\u0f7e\u0247\u0001\u0000\u0000\u0000\u0f7f\u0f80\u0003\u030a\u0185"+
		"\u0000\u0f80\u0f81\u0005\u0212\u0000\u0000\u0f81\u0f86\u0003\u023c\u011e"+
		"\u0000\u0f82\u0f83\u0005\u0218\u0000\u0000\u0f83\u0f85\u0003\u023c\u011e"+
		"\u0000\u0f84\u0f82\u0001\u0000\u0000\u0000\u0f85\u0f88\u0001\u0000\u0000"+
		"\u0000\u0f86\u0f84\u0001\u0000\u0000\u0000\u0f86\u0f87\u0001\u0000\u0000"+
		"\u0000\u0f87\u0f89\u0001\u0000\u0000\u0000\u0f88\u0f86\u0001\u0000\u0000"+
		"\u0000\u0f89\u0f8a\u0005\u0213\u0000\u0000\u0f8a\u0249\u0001\u0000\u0000"+
		"\u0000\u0f8b\u0f8c\u0005T\u0000\u0000\u0f8c\u0f8d\u0005\u0212\u0000\u0000"+
		"\u0f8d\u0f8e\u0005\u0215\u0000\u0000\u0f8e\u0faa\u0005\u0213\u0000\u0000"+
		"\u0f8f\u0f90\u0005T\u0000\u0000\u0f90\u0f91\u0005\u0212\u0000\u0000\u0f91"+
		"\u0f92\u0005u\u0000\u0000\u0f92\u0f93\u0003\u023a\u011d\u0000\u0f93\u0f94"+
		"\u0005\u0213\u0000\u0000\u0f94\u0faa\u0001\u0000\u0000\u0000\u0f95\u0f96"+
		"\u0003\u024c\u0126\u0000\u0f96\u0f98\u0005\u0212\u0000\u0000\u0f97\u0f99"+
		"\u0007&\u0000\u0000\u0f98\u0f97\u0001\u0000\u0000\u0000\u0f98\u0f99\u0001"+
		"\u0000\u0000\u0000\u0f99\u0f9a\u0001\u0000\u0000\u0000\u0f9a\u0f9b\u0003"+
		"\u023c\u011e\u0000\u0f9b\u0f9c\u0005\u0213\u0000\u0000\u0f9c\u0faa\u0001"+
		"\u0000\u0000\u0000\u0f9d\u0f9e\u0005\u01e3\u0000\u0000\u0f9e\u0f9f\u0005"+
		"\u0212\u0000\u0000\u0f9f\u0fa2\u0003\u023c\u011e\u0000\u0fa0\u0fa1\u0005"+
		"\u0218\u0000\u0000\u0fa1\u0fa3\u0003\u024e\u0127\u0000\u0fa2\u0fa0\u0001"+
		"\u0000\u0000\u0000\u0fa2\u0fa3\u0001\u0000\u0000\u0000\u0fa3\u0fa5\u0001"+
		"\u0000\u0000\u0000\u0fa4\u0fa6\u0003\u0250\u0128\u0000\u0fa5\u0fa4\u0001"+
		"\u0000\u0000\u0000\u0fa5\u0fa6\u0001\u0000\u0000\u0000\u0fa6\u0fa7\u0001"+
		"\u0000\u0000\u0000\u0fa7\u0fa8\u0005\u0213\u0000\u0000\u0fa8\u0faa\u0001"+
		"\u0000\u0000\u0000\u0fa9\u0f8b\u0001\u0000\u0000\u0000\u0fa9\u0f8f\u0001"+
		"\u0000\u0000\u0000\u0fa9\u0f95\u0001\u0000\u0000\u0000\u0fa9\u0f9d\u0001"+
		"\u0000\u0000\u0000\u0faa\u024b\u0001\u0000\u0000\u0000\u0fab\u0fac\u0007"+
		"\'\u0000\u0000\u0fac\u024d\u0001\u0000\u0000\u0000\u0fad\u0fb0\u0003\u0350"+
		"\u01a8\u0000\u0fae\u0fb0\u0003\u034c\u01a6\u0000\u0faf\u0fad\u0001\u0000"+
		"\u0000\u0000\u0faf\u0fae\u0001\u0000\u0000\u0000\u0fb0\u024f\u0001\u0000"+
		"\u0000\u0000\u0fb1\u0fb2\u0005\u0114\u0000\u0000\u0fb2\u0fb3\u0005.\u0000"+
		"\u0000\u0fb3\u0fb5\u0003\u023c\u011e\u0000\u0fb4\u0fb6\u0007\u001f\u0000"+
		"\u0000\u0fb5\u0fb4\u0001\u0000\u0000\u0000\u0fb5\u0fb6\u0001\u0000\u0000"+
		"\u0000\u0fb6\u0fbb\u0001\u0000\u0000\u0000\u0fb7\u0fb8\u0005\u0105\u0000"+
		"\u0000\u0fb8\u0fbc\u0005\u0095\u0000\u0000\u0fb9\u0fba\u0005\u0105\u0000"+
		"\u0000\u0fba\u0fbc\u0005\u00ca\u0000\u0000\u0fbb\u0fb7\u0001\u0000\u0000"+
		"\u0000\u0fbb\u0fb9\u0001\u0000\u0000\u0000\u0fbb\u0fbc\u0001\u0000\u0000"+
		"\u0000\u0fbc\u0251\u0001\u0000\u0000\u0000\u0fbd\u0fc7\u0003\u0220\u0110"+
		"\u0000\u0fbe\u0fc3\u0003\u0256\u012b\u0000\u0fbf\u0fc0\u0005\u0112\u0000"+
		"\u0000\u0fc0\u0fc2\u0003\u0256\u012b\u0000\u0fc1\u0fbf\u0001\u0000\u0000"+
		"\u0000\u0fc2\u0fc5\u0001\u0000\u0000\u0000\u0fc3\u0fc1\u0001\u0000\u0000"+
		"\u0000\u0fc3\u0fc4\u0001\u0000\u0000\u0000\u0fc4\u0fc7\u0001\u0000\u0000"+
		"\u0000\u0fc5\u0fc3\u0001\u0000\u0000\u0000\u0fc6\u0fbd\u0001\u0000\u0000"+
		"\u0000\u0fc6\u0fbe\u0001\u0000\u0000\u0000\u0fc7\u0253\u0001\u0000\u0000"+
		"\u0000\u0fc8\u0fc9\u0003\u0252\u0129\u0000\u0fc9\u0255\u0001\u0000\u0000"+
		"\u0000\u0fca\u0fcf\u0003\u0258\u012c\u0000\u0fcb\u0fcc\u0005\u0011\u0000"+
		"\u0000\u0fcc\u0fce\u0003\u0258\u012c\u0000\u0fcd\u0fcb\u0001\u0000\u0000"+
		"\u0000\u0fce\u0fd1\u0001\u0000\u0000\u0000\u0fcf\u0fcd\u0001\u0000\u0000"+
		"\u0000\u0fcf\u0fd0\u0001\u0000\u0000\u0000\u0fd0\u0257\u0001\u0000\u0000"+
		"\u0000\u0fd1\u0fcf\u0001\u0000\u0000\u0000\u0fd2\u0fd3\u0005\u0102\u0000"+
		"\u0000\u0fd3\u0fd6\u0003\u0258\u012c\u0000\u0fd4\u0fd6\u0003\u025a\u012d"+
		"\u0000\u0fd5\u0fd2\u0001\u0000\u0000\u0000\u0fd5\u0fd4\u0001\u0000\u0000"+
		"\u0000\u0fd6\u0259\u0001\u0000\u0000\u0000\u0fd7\u0ff9\u0003\u025c\u012e"+
		"\u0000\u0fd8\u0fda\u0005\u00c3\u0000\u0000\u0fd9\u0fdb\u0005\u0102\u0000"+
		"\u0000\u0fda\u0fd9\u0001\u0000\u0000\u0000\u0fda\u0fdb\u0001\u0000\u0000"+
		"\u0000\u0fdb\u0ff5\u0001\u0000\u0000\u0000\u0fdc\u0ff6\u0005\u0104\u0000"+
		"\u0000\u0fdd\u0ff6\u0005\u00ee\u0000\u0000\u0fde\u0ff6\u0005\u012d\u0000"+
		"\u0000\u0fdf\u0ff6\u0005\u00b5\u0000\u0000\u0fe0\u0fe1\u0005\b\u0000\u0000"+
		"\u0fe1\u0ff6\u0005\u0163\u0000\u0000\u0fe2\u0ff6\u0005~\u0000\u0000\u0fe3"+
		"\u0fe5\u0005\u010a\u0000\u0000\u0fe4\u0fe6\u0005\u019d\u0000\u0000\u0fe5"+
		"\u0fe4\u0001\u0000\u0000\u0000\u0fe5\u0fe6\u0001\u0000\u0000\u0000\u0fe6"+
		"\u0fe7\u0001\u0000\u0000\u0000\u0fe7\u0fe9\u0005\u0212\u0000\u0000\u0fe8"+
		"\u0fea\u0005\u010f\u0000\u0000\u0fe9\u0fe8\u0001\u0000\u0000\u0000\u0fe9"+
		"\u0fea\u0001\u0000\u0000\u0000\u0fea\u0feb\u0001\u0000\u0000\u0000\u0feb"+
		"\u0ff0\u0003\u032e\u0197\u0000\u0fec\u0fed\u0005\u0218\u0000\u0000\u0fed"+
		"\u0fef\u0003\u032e\u0197\u0000\u0fee\u0fec\u0001\u0000\u0000\u0000\u0fef"+
		"\u0ff2\u0001\u0000\u0000\u0000\u0ff0\u0fee\u0001\u0000\u0000\u0000\u0ff0"+
		"\u0ff1\u0001\u0000\u0000\u0000\u0ff1\u0ff3\u0001\u0000\u0000\u0000\u0ff2"+
		"\u0ff0\u0001\u0000\u0000\u0000\u0ff3\u0ff4\u0005\u0213\u0000\u0000\u0ff4"+
		"\u0ff6\u0001\u0000\u0000\u0000\u0ff5\u0fdc\u0001\u0000\u0000\u0000\u0ff5"+
		"\u0fdd\u0001\u0000\u0000\u0000\u0ff5\u0fde\u0001\u0000\u0000\u0000\u0ff5"+
		"\u0fdf\u0001\u0000\u0000\u0000\u0ff5\u0fe0\u0001\u0000\u0000\u0000\u0ff5"+
		"\u0fe2\u0001\u0000\u0000\u0000\u0ff5\u0fe3\u0001\u0000\u0000\u0000\u0ff6"+
		"\u0ff8\u0001\u0000\u0000\u0000\u0ff7\u0fd8\u0001\u0000\u0000\u0000\u0ff8"+
		"\u0ffb\u0001\u0000\u0000\u0000\u0ff9\u0ff7\u0001\u0000\u0000\u0000\u0ff9"+
		"\u0ffa\u0001\u0000\u0000\u0000\u0ffa\u025b\u0001\u0000\u0000\u0000\u0ffb"+
		"\u0ff9\u0001\u0000\u0000\u0000\u0ffc\u1003\u0003\u0260\u0130\u0000\u0ffd"+
		"\u0fff\u0003\u025e\u012f\u0000\u0ffe\u1000\u0005\u010a\u0000\u0000\u0fff"+
		"\u0ffe\u0001\u0000\u0000\u0000\u0fff\u1000\u0001\u0000\u0000\u0000\u1000"+
		"\u1001\u0001\u0000\u0000\u0000\u1001\u1002\u0003\u026e\u0137\u0000\u1002"+
		"\u1004\u0001\u0000\u0000\u0000\u1003\u0ffd\u0001\u0000\u0000\u0000\u1003"+
		"\u1004\u0001\u0000\u0000\u0000\u1004\u025d\u0001\u0000\u0000\u0000\u1005"+
		"\u1006\u0007(\u0000\u0000\u1006\u025f\u0001\u0000\u0000\u0000\u1007\u100d"+
		"\u0003\u0264\u0132\u0000\u1008\u1009\u0003\u0262\u0131\u0000\u1009\u100a"+
		"\u0003\u0264\u0132\u0000\u100a\u100c\u0001\u0000\u0000\u0000\u100b\u1008"+
		"\u0001\u0000\u0000\u0000\u100c\u100f\u0001\u0000\u0000\u0000\u100d\u100b"+
		"\u0001\u0000\u0000\u0000\u100d\u100e\u0001\u0000\u0000\u0000\u100e\u0261"+
		"\u0001\u0000\u0000\u0000\u100f\u100d\u0001\u0000\u0000\u0000\u1010\u1017"+
		"\u0005\u0229\u0000\u0000\u1011\u1017\u0003\u0352\u01a9\u0000\u1012\u1017"+
		"\u0005\u0220\u0000\u0000\u1013\u1017\u0005\u0226\u0000\u0000\u1014\u1017"+
		"\u0003\u0356\u01ab\u0000\u1015\u1017\u0003\u0354\u01aa\u0000\u1016\u1010"+
		"\u0001\u0000\u0000\u0000\u1016\u1011\u0001\u0000\u0000\u0000\u1016\u1012"+
		"\u0001\u0000\u0000\u0000\u1016\u1013\u0001\u0000\u0000\u0000\u1016\u1014"+
		"\u0001\u0000\u0000\u0000\u1016\u1015\u0001\u0000\u0000\u0000\u1017\u0263"+
		"\u0001\u0000\u0000\u0000\u1018\u1027\u0003\u026e\u0137\u0000\u1019\u101b"+
		"\u0005\u0102\u0000\u0000\u101a\u1019\u0001\u0000\u0000\u0000\u101a\u101b"+
		"\u0001\u0000\u0000\u0000\u101b\u1025\u0001\u0000\u0000\u0000\u101c\u101d"+
		"\u0005\u00ac\u0000\u0000\u101d\u1026\u0003\u026a\u0135\u0000\u101e\u101f"+
		"\u0005!\u0000\u0000\u101f\u1026\u0003\u026c\u0136\u0000\u1020\u1021\u0003"+
		"\u0266\u0133\u0000\u1021\u1023\u0003\u026e\u0137\u0000\u1022\u1024\u0003"+
		"\u0268\u0134\u0000\u1023\u1022\u0001\u0000\u0000\u0000\u1023\u1024\u0001"+
		"\u0000\u0000\u0000\u1024\u1026\u0001\u0000\u0000\u0000\u1025\u101c\u0001"+
		"\u0000\u0000\u0000\u1025\u101e\u0001\u0000\u0000\u0000\u1025\u1020\u0001"+
		"\u0000\u0000\u0000\u1026\u1028\u0001\u0000\u0000\u0000\u1027\u101a\u0001"+
		"\u0000\u0000\u0000\u1027\u1028\u0001\u0000\u0000\u0000\u1028\u0265\u0001"+
		"\u0000\u0000\u0000\u1029\u102a\u0007)\u0000\u0000\u102a\u0267\u0001\u0000"+
		"\u0000\u0000\u102b\u102c\u0005\u0084\u0000\u0000\u102c\u102d\u0003\u026e"+
		"\u0137\u0000\u102d\u0269\u0001\u0000\u0000\u0000\u102e\u102f\u0005\u0212"+
		"\u0000\u0000\u102f\u1030\u0003\u016e\u00b7\u0000\u1030\u1031\u0005\u0213"+
		"\u0000\u0000\u1031\u1041\u0001\u0000\u0000\u0000\u1032\u1033\u0005\u0212"+
		"\u0000\u0000\u1033\u1038\u0003\u0270\u0138\u0000\u1034\u1035\u0005\u0218"+
		"\u0000\u0000\u1035\u1037\u0003\u0270\u0138\u0000\u1036\u1034\u0001\u0000"+
		"\u0000\u0000\u1037\u103a\u0001\u0000\u0000\u0000\u1038\u1036\u0001\u0000"+
		"\u0000\u0000\u1038\u1039\u0001\u0000\u0000\u0000\u1039\u103b\u0001\u0000"+
		"\u0000\u0000\u103a\u1038\u0001\u0000\u0000\u0000\u103b\u103c\u0005\u0213"+
		"\u0000\u0000\u103c\u1041\u0001\u0000\u0000\u0000\u103d\u1041\u0003\u0346"+
		"\u01a3\u0000\u103e\u1041\u0003\u0336\u019b\u0000\u103f\u1041\u0003\u0340"+
		"\u01a0\u0000\u1040\u102e\u0001\u0000\u0000\u0000\u1040\u1032\u0001\u0000"+
		"\u0000\u0000\u1040\u103d\u0001\u0000\u0000\u0000\u1040\u103e\u0001\u0000"+
		"\u0000\u0000\u1040\u103f\u0001\u0000\u0000\u0000\u1041\u026b\u0001\u0000"+
		"\u0000\u0000\u1042\u1043\u0003\u026e\u0137\u0000\u1043\u1044\u0005\u0011"+
		"\u0000\u0000\u1044\u1045\u0003\u026e\u0137\u0000\u1045\u026d\u0001\u0000"+
		"\u0000\u0000\u1046\u104c\u0003\u0272\u0139\u0000\u1047\u1048\u0003\u0358"+
		"\u01ac\u0000\u1048\u1049\u0003\u0272\u0139\u0000\u1049\u104b\u0001\u0000"+
		"\u0000\u0000\u104a\u1047\u0001\u0000\u0000\u0000\u104b\u104e\u0001\u0000"+
		"\u0000\u0000\u104c\u104a\u0001\u0000\u0000\u0000\u104c\u104d\u0001\u0000"+
		"\u0000\u0000\u104d\u026f\u0001\u0000\u0000\u0000\u104e\u104c\u0001\u0000"+
		"\u0000\u0000\u104f\u1050\u0003\u026e\u0137\u0000\u1050\u0271\u0001\u0000"+
		"\u0000\u0000\u1051\u1056\u0003\u0274\u013a\u0000\u1052\u1053\u0007*\u0000"+
		"\u0000\u1053\u1055\u0003\u0274\u013a\u0000\u1054\u1052\u0001\u0000\u0000"+
		"\u0000\u1055\u1058\u0001\u0000\u0000\u0000\u1056\u1054\u0001\u0000\u0000"+
		"\u0000\u1056\u1057\u0001\u0000\u0000\u0000\u1057\u0273\u0001\u0000\u0000"+
		"\u0000\u1058\u1056\u0001\u0000\u0000\u0000\u1059\u105e\u0003\u0276\u013b"+
		"\u0000\u105a\u105b\u0007+\u0000\u0000\u105b\u105d\u0003\u0276\u013b\u0000"+
		"\u105c\u105a\u0001\u0000\u0000\u0000\u105d\u1060\u0001\u0000\u0000\u0000"+
		"\u105e\u105c\u0001\u0000\u0000\u0000\u105e\u105f\u0001\u0000\u0000\u0000"+
		"\u105f\u0275\u0001\u0000\u0000\u0000\u1060\u105e\u0001\u0000\u0000\u0000"+
		"\u1061\u106a\u0003\u027a\u013d\u0000\u1062\u1067\u0005\u0017\u0000\u0000"+
		"\u1063\u1068\u0005\u00d5\u0000\u0000\u1064\u1065\u0005\u018a\u0000\u0000"+
		"\u1065\u1066\u0005\u01d3\u0000\u0000\u1066\u1068\u0003\u0270\u0138\u0000"+
		"\u1067\u1063\u0001\u0000\u0000\u0000\u1067\u1064\u0001\u0000\u0000\u0000"+
		"\u1068\u106b\u0001\u0000\u0000\u0000\u1069\u106b\u0003\u0278\u013c\u0000"+
		"\u106a\u1062\u0001\u0000\u0000\u0000\u106a\u1069\u0001\u0000\u0000\u0000"+
		"\u106a\u106b\u0001\u0000\u0000\u0000\u106b\u0277\u0001\u0000\u0000\u0000"+
		"\u106c\u1071\u0005`\u0000\u0000\u106d\u106e\u0005\u0212\u0000\u0000\u106e"+
		"\u106f\u0003\u0270\u0138\u0000\u106f\u1070\u0005\u0213\u0000\u0000\u1070"+
		"\u1072\u0001\u0000\u0000\u0000\u1071\u106d\u0001\u0000\u0000\u0000\u1071"+
		"\u1072\u0001\u0000\u0000\u0000\u1072\u1073\u0001\u0000\u0000\u0000\u1073"+
		"\u1074\u0005\u0194\u0000\u0000\u1074\u1079\u0005\u0156\u0000\u0000\u1075"+
		"\u1076\u0005\u0212\u0000\u0000\u1076\u1077\u0003\u0270\u0138\u0000\u1077"+
		"\u1078\u0005\u0213\u0000\u0000\u1078\u107a\u0001\u0000\u0000\u0000\u1079"+
		"\u1075\u0001\u0000\u0000\u0000\u1079\u107a\u0001\u0000\u0000\u0000\u107a"+
		"\u1085\u0001\u0000\u0000\u0000\u107b\u1080\u0005\u01d0\u0000\u0000\u107c"+
		"\u107d\u0005\u0212\u0000\u0000\u107d\u107e\u0003\u0270\u0138\u0000\u107e"+
		"\u107f\u0005\u0213\u0000\u0000\u107f\u1081\u0001\u0000\u0000\u0000\u1080"+
		"\u107c\u0001\u0000\u0000\u0000\u1080\u1081\u0001\u0000\u0000\u0000\u1081"+
		"\u1082\u0001\u0000\u0000\u0000\u1082\u1083\u0005\u0194\u0000\u0000\u1083"+
		"\u1085\u0005\u00eb\u0000\u0000\u1084\u106c\u0001\u0000\u0000\u0000\u1084"+
		"\u107b\u0001\u0000\u0000\u0000\u1085\u0279\u0001\u0000\u0000\u0000\u1086"+
		"\u108b\u0003\u0286\u0143\u0000\u1087\u1088\u0005\u022a\u0000\u0000\u1088"+
		"\u1089\u0003\u027c\u013e\u0000\u1089\u108a\u0005\u022b\u0000\u0000\u108a"+
		"\u108c\u0001\u0000\u0000\u0000\u108b\u1087\u0001\u0000\u0000\u0000\u108b"+
		"\u108c\u0001\u0000\u0000\u0000\u108c\u027b\u0001\u0000\u0000\u0000\u108d"+
		"\u1090\u0005\u0012\u0000\u0000\u108e\u1090\u0003\u0226\u0113\u0000\u108f"+
		"\u108d\u0001\u0000\u0000\u0000\u108f\u108e\u0001\u0000\u0000\u0000\u1090"+
		"\u1098\u0001\u0000\u0000\u0000\u1091\u1094\u0005\u0218\u0000\u0000\u1092"+
		"\u1095\u0005\u0012\u0000\u0000\u1093\u1095\u0003\u0226\u0113\u0000\u1094"+
		"\u1092\u0001\u0000\u0000\u0000\u1094\u1093\u0001\u0000\u0000\u0000\u1095"+
		"\u1097\u0001\u0000\u0000\u0000\u1096\u1091\u0001\u0000\u0000\u0000\u1097"+
		"\u109a\u0001\u0000\u0000\u0000\u1098\u1096\u0001\u0000\u0000\u0000\u1098"+
		"\u1099\u0001\u0000\u0000\u0000\u1099\u10a5\u0001\u0000\u0000\u0000\u109a"+
		"\u1098\u0001\u0000\u0000\u0000\u109b\u10a0\u0003\u027e\u013f\u0000\u109c"+
		"\u109d\u0005\u0218\u0000\u0000\u109d\u109f\u0003\u027e\u013f\u0000\u109e"+
		"\u109c\u0001\u0000\u0000\u0000\u109f\u10a2\u0001\u0000\u0000\u0000\u10a0"+
		"\u109e\u0001\u0000\u0000\u0000\u10a0\u10a1\u0001\u0000\u0000\u0000\u10a1"+
		"\u10a5\u0001\u0000\u0000\u0000\u10a2\u10a0\u0001\u0000\u0000\u0000\u10a3"+
		"\u10a5\u0003\u0284\u0142\u0000\u10a4\u108f\u0001\u0000\u0000\u0000\u10a4"+
		"\u109b\u0001\u0000\u0000\u0000\u10a4\u10a3\u0001\u0000\u0000\u0000\u10a5"+
		"\u027d\u0001\u0000\u0000\u0000\u10a6\u10a7\u0005\u009a\u0000\u0000\u10a7"+
		"\u10b4\u0003\"\u0011\u0000\u10a8\u10a9\u0005\u00ac\u0000\u0000\u10a9\u10b5"+
		"\u0003\u0222\u0111\u0000\u10aa\u10ac\u0003\u0280\u0140\u0000\u10ab\u10aa"+
		"\u0001\u0000\u0000\u0000\u10ab\u10ac\u0001\u0000\u0000\u0000\u10ac\u10ad"+
		"\u0001\u0000\u0000\u0000\u10ad\u10ae\u0005\u009d\u0000\u0000\u10ae\u10af"+
		"\u0003\u0252\u0129\u0000\u10af\u10b0\u0005\u0194\u0000\u0000\u10b0\u10b1"+
		"\u0003\u0252\u0129\u0000\u10b1\u10b2\u0003\u0282\u0141\u0000\u10b2\u10b3"+
		"\u0003\u0252\u0129\u0000\u10b3\u10b5\u0001\u0000\u0000\u0000\u10b4\u10a8"+
		"\u0001\u0000\u0000\u0000\u10b4\u10ab\u0001\u0000\u0000\u0000\u10b5\u027f"+
		"\u0001\u0000\u0000\u0000\u10b6\u10b7\u0005\u00d0\u0000\u0000\u10b7\u10b8"+
		"\u0003\u0252\u0129\u0000\u10b8\u0281\u0001\u0000\u0000\u0000\u10b9\u10ba"+
		"\u0007,\u0000\u0000\u10ba\u0283\u0001\u0000\u0000\u0000\u10bb\u10bc\u0005"+
		"\u009a\u0000\u0000\u10bc\u10bd\u0005\u0212\u0000\u0000\u10bd\u10c2\u0003"+
		"\"\u0011\u0000\u10be\u10bf\u0005\u0218\u0000\u0000\u10bf\u10c1\u0003\""+
		"\u0011\u0000\u10c0\u10be\u0001\u0000\u0000\u0000\u10c1\u10c4\u0001\u0000"+
		"\u0000\u0000\u10c2\u10c0\u0001\u0000\u0000\u0000\u10c2\u10c3\u0001\u0000"+
		"\u0000\u0000\u10c3\u10c5\u0001\u0000\u0000\u0000\u10c4\u10c2\u0001\u0000"+
		"\u0000\u0000\u10c5\u10c6\u0005\u0213\u0000\u0000\u10c6\u10c7\u0005\u00ac"+
		"\u0000\u0000\u10c7\u10d4\u0005\u0212\u0000\u0000\u10c8\u10d5\u0003\u016e"+
		"\u00b7\u0000\u10c9\u10ca\u0005\u0212\u0000\u0000\u10ca\u10cf\u0003\u0222"+
		"\u0111\u0000\u10cb\u10cc\u0005\u0218\u0000\u0000\u10cc\u10ce\u0003\u0222"+
		"\u0111\u0000\u10cd\u10cb\u0001\u0000\u0000\u0000\u10ce\u10d1\u0001\u0000"+
		"\u0000\u0000\u10cf\u10cd\u0001\u0000\u0000\u0000\u10cf\u10d0\u0001\u0000"+
		"\u0000\u0000\u10d0\u10d2\u0001\u0000\u0000\u0000\u10d1\u10cf\u0001\u0000"+
		"\u0000\u0000\u10d2\u10d3\u0005\u0213\u0000\u0000\u10d3\u10d5\u0001\u0000"+
		"\u0000\u0000\u10d4\u10c8\u0001\u0000\u0000\u0000\u10d4\u10c9\u0001\u0000"+
		"\u0000\u0000\u10d5\u10d6\u0001\u0000\u0000\u0000\u10d6\u10d7\u0005\u0213"+
		"\u0000\u0000\u10d7\u0285\u0001\u0000\u0000\u0000\u10d8\u10d9\u0005\u0217"+
		"\u0000\u0000\u10d9\u10eb\u0003\u0286\u0143\u0000\u10da\u10db\u0005\u0216"+
		"\u0000\u0000\u10db\u10eb\u0003\u0286\u0143\u0000\u10dc\u10dd\u0005\u012e"+
		"\u0000\u0000\u10dd\u10eb\u0003\u0286\u0143\u0000\u10de\u10df\u0005H\u0000"+
		"\u0000\u10df\u10eb\u0003\u0286\u0143\u0000\u10e0\u10e1\u0005\u00f6\u0000"+
		"\u0000\u10e1\u10eb\u0003\u0286\u0143\u0000\u10e2\u10e3\u0005u\u0000\u0000"+
		"\u10e3\u10eb\u0003\u0286\u0143\u0000\u10e4\u10e5\u0005\r\u0000\u0000\u10e5"+
		"\u10eb\u0003\u0286\u0143\u0000\u10e6\u10eb\u0003\u0288\u0144\u0000\u10e7"+
		"\u10eb\u0003\u029a\u014d\u0000\u10e8\u10eb\u0003\u029c\u014e\u0000\u10e9"+
		"\u10eb\u0003\u0294\u014a\u0000\u10ea\u10d8\u0001\u0000\u0000\u0000\u10ea"+
		"\u10da\u0001\u0000\u0000\u0000\u10ea\u10dc\u0001\u0000\u0000\u0000\u10ea"+
		"\u10de\u0001\u0000\u0000\u0000\u10ea\u10e0\u0001\u0000\u0000\u0000\u10ea"+
		"\u10e2\u0001\u0000\u0000\u0000\u10ea\u10e4\u0001\u0000\u0000\u0000\u10ea"+
		"\u10e6\u0001\u0000\u0000\u0000\u10ea\u10e7\u0001\u0000\u0000\u0000\u10ea"+
		"\u10e8\u0001\u0000\u0000\u0000\u10ea\u10e9\u0001\u0000\u0000\u0000\u10eb"+
		"\u0287\u0001\u0000\u0000\u0000\u10ec\u10ef\u0003\u028e\u0147\u0000\u10ed"+
		"\u10ef\u0003\u028a\u0145\u0000\u10ee\u10ec\u0001\u0000\u0000\u0000\u10ee"+
		"\u10ed\u0001\u0000\u0000\u0000\u10ef\u0289\u0001\u0000\u0000\u0000\u10f0"+
		"\u10f2\u0003\u0302\u0181\u0000\u10f1\u10f0\u0001\u0000\u0000\u0000\u10f1"+
		"\u10f2\u0001\u0000\u0000\u0000\u10f2\u10f3\u0001\u0000\u0000\u0000\u10f3"+
		"\u10f4\u00055\u0000\u0000\u10f4\u10f6\u0003\u0294\u014a\u0000\u10f5\u10f7"+
		"\u0003\u028c\u0146\u0000\u10f6\u10f5\u0001\u0000\u0000\u0000\u10f7\u10f8"+
		"\u0001\u0000\u0000\u0000\u10f8\u10f6\u0001\u0000\u0000\u0000\u10f8\u10f9"+
		"\u0001\u0000\u0000\u0000\u10f9\u10fb\u0001\u0000\u0000\u0000\u10fa\u10fc"+
		"\u0003\u0292\u0149\u0000\u10fb\u10fa\u0001\u0000\u0000\u0000\u10fb\u10fc"+
		"\u0001\u0000\u0000\u0000\u10fc\u10fd\u0001\u0000\u0000\u0000\u10fd\u10ff"+
		"\u0005\u0081\u0000\u0000\u10fe\u1100\u00055\u0000\u0000\u10ff\u10fe\u0001"+
		"\u0000\u0000\u0000\u10ff\u1100\u0001\u0000\u0000\u0000\u1100\u1102\u0001"+
		"\u0000\u0000\u0000\u1101\u1103\u0003\u0302\u0181\u0000\u1102\u1101\u0001"+
		"\u0000\u0000\u0000\u1102\u1103\u0001\u0000\u0000\u0000\u1103\u028b\u0001"+
		"\u0000\u0000\u0000\u1104\u1105\u0005\u01b9\u0000\u0000\u1105\u1106\u0003"+
		"\u0254\u012a\u0000\u1106\u1109\u0005\u0189\u0000\u0000\u1107\u110a\u0003"+
		"\u010e\u0087\u0000\u1108\u110a\u0003\u0254\u012a\u0000\u1109\u1107\u0001"+
		"\u0000\u0000\u0000\u1109\u1108\u0001\u0000\u0000\u0000\u110a\u028d\u0001"+
		"\u0000\u0000\u0000\u110b\u110d\u0003\u0302\u0181\u0000\u110c\u110b\u0001"+
		"\u0000\u0000\u0000\u110c\u110d\u0001\u0000\u0000\u0000\u110d\u110e\u0001"+
		"\u0000\u0000\u0000\u110e\u1110\u00055\u0000\u0000\u110f\u1111\u0003\u0290"+
		"\u0148\u0000\u1110\u110f\u0001\u0000\u0000\u0000\u1111\u1112\u0001\u0000"+
		"\u0000\u0000\u1112\u1110\u0001\u0000\u0000\u0000\u1112\u1113\u0001\u0000"+
		"\u0000\u0000\u1113\u1115\u0001\u0000\u0000\u0000\u1114\u1116\u0003\u0292"+
		"\u0149\u0000\u1115\u1114\u0001\u0000\u0000\u0000\u1115\u1116\u0001\u0000"+
		"\u0000\u0000\u1116\u1117\u0001\u0000\u0000\u0000\u1117\u1119\u0005\u0081"+
		"\u0000\u0000\u1118\u111a\u00055\u0000\u0000\u1119\u1118\u0001\u0000\u0000"+
		"\u0000\u1119\u111a\u0001\u0000\u0000\u0000\u111a\u111c\u0001\u0000\u0000"+
		"\u0000\u111b\u111d\u0003\u0302\u0181\u0000\u111c\u111b\u0001\u0000\u0000"+
		"\u0000\u111c\u111d\u0001\u0000\u0000\u0000\u111d\u028f\u0001\u0000\u0000"+
		"\u0000\u111e\u111f\u0005\u01b9\u0000\u0000\u111f\u1120\u0003\u0226\u0113"+
		"\u0000\u1120\u1123\u0005\u0189\u0000\u0000\u1121\u1124\u0003\u010e\u0087"+
		"\u0000\u1122\u1124\u0003\u0254\u012a\u0000\u1123\u1121\u0001\u0000\u0000"+
		"\u0000\u1123\u1122\u0001\u0000\u0000\u0000\u1124\u0291\u0001\u0000\u0000"+
		"\u0000\u1125\u1128\u0005|\u0000\u0000\u1126\u1129\u0003\u010e\u0087\u0000"+
		"\u1127\u1129\u0003\u0254\u012a\u0000\u1128\u1126\u0001\u0000\u0000\u0000"+
		"\u1128\u1127\u0001\u0000\u0000\u0000\u1129\u0293\u0001\u0000\u0000\u0000"+
		"\u112a\u112b\u0003\u0344\u01a2\u0000\u112b\u112c\u0003\u035a\u01ad\u0000"+
		"\u112c\u113f\u0001\u0000\u0000\u0000\u112d\u113f\u0003\u0336\u019b\u0000"+
		"\u112e\u113f\u0003\u0346\u01a3\u0000\u112f\u113f\u0003\u0340\u01a0\u0000"+
		"\u1130\u113c\u0005\u0212\u0000\u0000\u1131\u1132\u0003\u016e\u00b7\u0000"+
		"\u1132\u1136\u0005\u0213\u0000\u0000\u1133\u1135\u0003\u0170\u00b8\u0000"+
		"\u1134\u1133\u0001\u0000\u0000\u0000\u1135\u1138\u0001\u0000\u0000\u0000"+
		"\u1136\u1134\u0001\u0000\u0000\u0000\u1136\u1137\u0001\u0000\u0000\u0000"+
		"\u1137\u113d\u0001\u0000\u0000\u0000\u1138\u1136\u0001\u0000\u0000\u0000"+
		"\u1139\u113a\u0003\u0296\u014b\u0000\u113a\u113b\u0005\u0213\u0000\u0000"+
		"\u113b\u113d\u0001\u0000\u0000\u0000\u113c\u1131\u0001\u0000\u0000\u0000"+
		"\u113c\u1139\u0001\u0000\u0000\u0000\u113d\u113f\u0001\u0000\u0000\u0000"+
		"\u113e\u112a\u0001\u0000\u0000\u0000\u113e\u112d\u0001\u0000\u0000\u0000"+
		"\u113e\u112e\u0001\u0000\u0000\u0000\u113e\u112f\u0001\u0000\u0000\u0000"+
		"\u113e\u1130\u0001\u0000\u0000\u0000\u113f\u0295\u0001\u0000\u0000\u0000"+
		"\u1140\u1142\u0003\u0252\u0129\u0000\u1141\u1143\u0003\u0298\u014c\u0000"+
		"\u1142\u1141\u0001\u0000\u0000\u0000\u1142\u1143\u0001\u0000\u0000\u0000"+
		"\u1143\u0297\u0001\u0000\u0000\u0000\u1144\u1145\u0005\u0218\u0000\u0000"+
		"\u1145\u114a\u0003\u0252\u0129\u0000\u1146\u1147\u0005\u0218\u0000\u0000"+
		"\u1147\u1149\u0003\u0252\u0129\u0000\u1148\u1146\u0001\u0000\u0000\u0000"+
		"\u1149\u114c\u0001\u0000\u0000\u0000\u114a\u1148\u0001\u0000\u0000\u0000"+
		"\u114a\u114b\u0001\u0000\u0000\u0000\u114b\u0299\u0001\u0000\u0000\u0000"+
		"\u114c\u114a\u0001\u0000\u0000\u0000\u114d\u1156\u0007-\u0000\u0000\u114e"+
		"\u114f\u0005\u0212\u0000\u0000\u114f\u1150\u0003\u016e\u00b7\u0000\u1150"+
		"\u1151\u0005\u0213\u0000\u0000\u1151\u1157\u0001\u0000\u0000\u0000\u1152"+
		"\u1153\u0005\u0212\u0000\u0000\u1153\u1154\u0003\u0254\u012a\u0000\u1154"+
		"\u1155\u0005\u0213\u0000\u0000\u1155\u1157\u0001\u0000\u0000\u0000\u1156"+
		"\u114e\u0001\u0000\u0000\u0000\u1156\u1152\u0001\u0000\u0000\u0000\u1157"+
		"\u029b\u0001\u0000\u0000\u0000\u1158\u1159\u0003\u029e\u014f\u0000\u1159"+
		"\u115b\u0003\u0326\u0193\u0000\u115a\u115c\u0003\u02a4\u0152\u0000\u115b"+
		"\u115a\u0001\u0000\u0000\u0000\u115b\u115c\u0001\u0000\u0000\u0000\u115c"+
		"\u1293\u0001\u0000\u0000\u0000\u115d\u115e\u0003\u035c\u01ae\u0000\u115e"+
		"\u1160\u0003\u0328\u0194\u0000\u115f\u1161\u0003\u02ac\u0156\u0000\u1160"+
		"\u115f\u0001\u0000\u0000\u0000\u1160\u1161\u0001\u0000\u0000\u0000\u1161"+
		"\u1293\u0001\u0000\u0000\u0000\u1162\u1163\u0005T\u0000\u0000\u1163\u1169"+
		"\u0005\u0212\u0000\u0000\u1164\u116a\u0005\u0215\u0000\u0000\u1165\u1167"+
		"\u0007\u0015\u0000\u0000\u1166\u1165\u0001\u0000\u0000\u0000\u1166\u1167"+
		"\u0001\u0000\u0000\u0000\u1167\u1168\u0001\u0000\u0000\u0000\u1168\u116a"+
		"\u0003\u0270\u0138\u0000\u1169\u1164\u0001\u0000\u0000\u0000\u1169\u1166"+
		"\u0001\u0000\u0000\u0000\u116a\u116b\u0001\u0000\u0000\u0000\u116b\u116d"+
		"\u0005\u0213\u0000\u0000\u116c\u116e\u0003\u02a4\u0152\u0000\u116d\u116c"+
		"\u0001\u0000\u0000\u0000\u116d\u116e\u0001\u0000\u0000\u0000\u116e\u1293"+
		"\u0001\u0000\u0000\u0000\u116f\u1170\u0007.\u0000\u0000\u1170\u1177\u0005"+
		"\u0212\u0000\u0000\u1171\u1172\u0005\u00ec\u0000\u0000\u1172\u1173\u0005"+
		"\u0212\u0000\u0000\u1173\u1174\u0003\u016e\u00b7\u0000\u1174\u1175\u0005"+
		"\u0213\u0000\u0000\u1175\u1178\u0001\u0000\u0000\u0000\u1176\u1178\u0003"+
		"\u0270\u0138\u0000\u1177\u1171\u0001\u0000\u0000\u0000\u1177\u1176\u0001"+
		"\u0000\u0000\u0000\u1178\u1179\u0001\u0000\u0000\u0000\u1179\u117a\u0005"+
		"\u0014\u0000\u0000\u117a\u117b\u0003\u032e\u0197\u0000\u117b\u117c\u0005"+
		"\u0213\u0000\u0000\u117c\u1293\u0001\u0000\u0000\u0000\u117d\u117e\u0005"+
		";\u0000\u0000\u117e\u117f\u0005\u0212\u0000\u0000\u117f\u1180\u0003\u0270"+
		"\u0138\u0000\u1180\u1181\u0005\u01aa\u0000\u0000\u1181\u1182\u0005\u00f3"+
		"\u0000\u0000\u1182\u1183\u0005\u0213\u0000\u0000\u1183\u1293\u0001\u0000"+
		"\u0000\u0000\u1184\u1185\u0005?\u0000\u0000\u1185\u1187\u0005\u0212\u0000"+
		"\u0000\u1186\u1188\u0007/\u0000\u0000\u1187\u1186\u0001\u0000\u0000\u0000"+
		"\u1187\u1188\u0001\u0000\u0000\u0000\u1188\u1189\u0001\u0000\u0000\u0000"+
		"\u1189\u118b\u0003\u0270\u0138\u0000\u118a\u118c\u0003\u02b0\u0158\u0000"+
		"\u118b\u118a\u0001\u0000\u0000\u0000\u118b\u118c\u0001\u0000\u0000\u0000"+
		"\u118c\u118d\u0001\u0000\u0000\u0000\u118d\u118e\u0005\u0213\u0000\u0000"+
		"\u118e\u1293\u0001\u0000\u0000\u0000\u118f\u1190\u0003\u02a0\u0150\u0000"+
		"\u1190\u1192\u0003\u0324\u0192\u0000\u1191\u1193\u0003\u02b2\u0159\u0000"+
		"\u1192\u1191\u0001\u0000\u0000\u0000\u1193\u1194\u0001\u0000\u0000\u0000"+
		"\u1194\u1192\u0001\u0000\u0000\u0000\u1194\u1195\u0001\u0000\u0000\u0000"+
		"\u1195\u1293\u0001\u0000\u0000\u0000\u1196\u1197\u0005h\u0000\u0000\u1197"+
		"\u1198\u0005\u0212\u0000\u0000\u1198\u119a\u0003\u0270\u0138\u0000\u1199"+
		"\u119b\u00070\u0000\u0000\u119a\u1199\u0001\u0000\u0000\u0000\u119a\u119b"+
		"\u0001\u0000\u0000\u0000\u119b\u119c\u0001\u0000\u0000\u0000\u119c\u119d"+
		"\u0005\u0213\u0000\u0000\u119d\u1293\u0001\u0000\u0000\u0000\u119e\u119f"+
		"\u0005\u0090\u0000\u0000\u119f\u11a0\u0005\u0212\u0000\u0000\u11a0\u11a1"+
		"\u0003\u035c\u01ae\u0000\u11a1\u11a2\u0005\u009d\u0000\u0000\u11a2\u11a3"+
		"\u0003\u0270\u0138\u0000\u11a3\u11a4\u0005\u0213\u0000\u0000\u11a4\u1293"+
		"\u0001\u0000\u0000\u0000\u11a5\u11a6\u00071\u0000\u0000\u11a6\u11a8\u0003"+
		"\u0326\u0193\u0000\u11a7\u11a9\u0003\u032a\u0195\u0000\u11a8\u11a7\u0001"+
		"\u0000\u0000\u0000\u11a8\u11a9\u0001\u0000\u0000\u0000\u11a9\u11aa\u0001"+
		"\u0000\u0000\u0000\u11aa\u11ab\u0003\u02a4\u0152\u0000\u11ab\u1293\u0001"+
		"\u0000\u0000\u0000\u11ac\u11ad\u0003\u02a2\u0151\u0000\u11ad\u11ae\u0005"+
		"\u0212\u0000\u0000\u11ae\u11b3\u0003\u0254\u012a\u0000\u11af\u11b0\u0005"+
		"\u0218\u0000\u0000\u11b0\u11b2\u0003\u0254\u012a\u0000\u11b1\u11af\u0001"+
		"\u0000\u0000\u0000\u11b2\u11b5\u0001\u0000\u0000\u0000\u11b3\u11b1\u0001"+
		"\u0000\u0000\u0000\u11b3\u11b4\u0001\u0000\u0000\u0000\u11b4\u11b7\u0001"+
		"\u0000\u0000\u0000\u11b5\u11b3\u0001\u0000\u0000\u0000\u11b6\u11b8\u0003"+
		"\u02b4\u015a\u0000\u11b7\u11b6\u0001\u0000\u0000\u0000\u11b7\u11b8\u0001"+
		"\u0000\u0000\u0000\u11b8\u11ba\u0001\u0000\u0000\u0000\u11b9\u11bb\u0003"+
		"\u02ac\u0156\u0000\u11ba\u11b9\u0001\u0000\u0000\u0000\u11ba\u11bb\u0001"+
		"\u0000\u0000\u0000\u11bb\u11bc\u0001\u0000\u0000\u0000\u11bc\u11bd\u0005"+
		"\u0213\u0000\u0000\u11bd\u1293\u0001\u0000\u0000\u0000\u11be\u11bf\u0005"+
		"\u0197\u0000\u0000\u11bf\u11c0\u0005\u0212\u0000\u0000\u11c0\u11c3\u0003"+
		"\u0254\u012a\u0000\u11c1\u11c2\u0005\u01aa\u0000\u0000\u11c2\u11c4\u0007"+
		"2\u0000\u0000\u11c3\u11c1\u0001\u0000\u0000\u0000\u11c3\u11c4\u0001\u0000"+
		"\u0000\u0000\u11c4\u11c9\u0001\u0000\u0000\u0000\u11c5\u11c6\u0005\u0218"+
		"\u0000\u0000\u11c6\u11c8\u0003\u0254\u012a\u0000\u11c7\u11c5\u0001\u0000"+
		"\u0000\u0000\u11c8\u11cb\u0001\u0000\u0000\u0000\u11c9\u11c7\u0001\u0000"+
		"\u0000\u0000\u11c9\u11ca\u0001\u0000\u0000\u0000\u11ca\u11cc\u0001\u0000"+
		"\u0000\u0000\u11cb\u11c9\u0001\u0000\u0000\u0000\u11cc\u11cd\u0005\u0213"+
		"\u0000\u0000\u11cd\u1293\u0001\u0000\u0000\u0000\u11ce\u11cf\u0005\u0198"+
		"\u0000\u0000\u11cf\u11d0\u0005\u0212\u0000\u0000\u11d0\u11d1\u0003\u0254"+
		"\u012a\u0000\u11d1\u11d3\u0005\u0014\u0000\u0000\u11d2\u11d4\u0005\u0137"+
		"\u0000\u0000\u11d3\u11d2\u0001\u0000\u0000\u0000\u11d3\u11d4\u0001\u0000"+
		"\u0000\u0000\u11d4\u11d5\u0001\u0000\u0000\u0000\u11d5\u11d6\u0003\u032e"+
		"\u0197\u0000\u11d6\u11d7\u0005\u0213\u0000\u0000\u11d7\u1293\u0001\u0000"+
		"\u0000\u0000\u11d8\u11d9\u0005\u019a\u0000\u0000\u11d9\u11e1\u0005\u0212"+
		"\u0000\u0000\u11da\u11dc\u00073\u0000\u0000\u11db\u11da\u0001\u0000\u0000"+
		"\u0000\u11db\u11dc\u0001\u0000\u0000\u0000\u11dc\u11de\u0001\u0000\u0000"+
		"\u0000\u11dd\u11df\u0003\u034c\u01a6\u0000\u11de\u11dd\u0001\u0000\u0000"+
		"\u0000\u11de\u11df\u0001\u0000\u0000\u0000\u11df\u11e0\u0001\u0000\u0000"+
		"\u0000\u11e0\u11e2\u0005\u009d\u0000\u0000\u11e1\u11db\u0001\u0000\u0000"+
		"\u0000\u11e1\u11e2\u0001\u0000\u0000\u0000\u11e2\u11e3\u0001\u0000\u0000"+
		"\u0000\u11e3\u11e4\u0003\u0270\u0138\u0000\u11e4\u11e5\u0005\u0213\u0000"+
		"\u0000\u11e5\u1293\u0001\u0000\u0000\u0000\u11e6\u11e7\u0005\u01c2\u0000"+
		"\u0000\u11e7\u11e8\u0005\u0212\u0000\u0000\u11e8\u11ea\u0003\u0254\u012a"+
		"\u0000\u11e9\u11eb\u0003\u01ce\u00e7\u0000\u11ea\u11e9\u0001\u0000\u0000"+
		"\u0000\u11ea\u11eb\u0001\u0000\u0000\u0000\u11eb\u11ec\u0001\u0000\u0000"+
		"\u0000\u11ec\u11ef\u0005\u0213\u0000\u0000\u11ed\u11ee\u0005\u020b\u0000"+
		"\u0000\u11ee\u11f0\u0003\u0342\u01a1\u0000\u11ef\u11ed\u0001\u0000\u0000"+
		"\u0000\u11ef\u11f0\u0001\u0000\u0000\u0000\u11f0\u1293\u0001\u0000\u0000"+
		"\u0000\u11f1\u11f2\u00074\u0000\u0000\u11f2\u11f3\u0005\u0212\u0000\u0000"+
		"\u11f3\u11f8\u0003\u02c0\u0160\u0000\u11f4\u11f5\u0005\u0218\u0000\u0000"+
		"\u11f5\u11f7\u0003\u02c0\u0160\u0000\u11f6\u11f4\u0001\u0000\u0000\u0000"+
		"\u11f7\u11fa\u0001\u0000\u0000\u0000\u11f8\u11f6\u0001\u0000\u0000\u0000"+
		"\u11f8\u11f9\u0001\u0000\u0000\u0000\u11f9\u11fb\u0001\u0000\u0000\u0000"+
		"\u11fa\u11f8\u0001\u0000\u0000\u0000\u11fb\u11fe\u0005\u0213\u0000\u0000"+
		"\u11fc\u11fd\u0005\u020b\u0000\u0000\u11fd\u11ff\u0003\u0342\u01a1\u0000"+
		"\u11fe\u11fc\u0001\u0000\u0000\u0000\u11fe\u11ff\u0001\u0000\u0000\u0000"+
		"\u11ff\u1293\u0001\u0000\u0000\u0000\u1200\u1201\u0005\u01c6\u0000\u0000"+
		"\u1201\u1203\u0005\u0212\u0000\u0000\u1202\u1204\u00075\u0000\u0000\u1203"+
		"\u1202\u0001\u0000\u0000\u0000\u1203\u1204\u0001\u0000\u0000\u0000\u1204"+
		"\u1206\u0001\u0000\u0000\u0000\u1205\u1207\u00076\u0000\u0000\u1206\u1205"+
		"\u0001\u0000\u0000\u0000\u1206\u1207\u0001\u0000\u0000\u0000\u1207\u1208"+
		"\u0001\u0000\u0000\u0000\u1208\u120b\u0003\u0254\u012a\u0000\u1209\u120a"+
		"\u0005\u0218\u0000\u0000\u120a\u120c\u0003\u02b8\u015c\u0000\u120b\u1209"+
		"\u0001\u0000\u0000\u0000\u120b\u120c\u0001\u0000\u0000\u0000\u120c\u1214"+
		"\u0001\u0000\u0000\u0000\u120d\u120e\u0005\u0218\u0000\u0000\u120e\u1210"+
		"\u0003\u0254\u012a\u0000\u120f\u1211\u0003\u02d8\u016c\u0000\u1210\u120f"+
		"\u0001\u0000\u0000\u0000\u1210\u1211\u0001\u0000\u0000\u0000\u1211\u1213"+
		"\u0001\u0000\u0000\u0000\u1212\u120d\u0001\u0000\u0000\u0000\u1213\u1216"+
		"\u0001\u0000\u0000\u0000\u1214\u1212\u0001\u0000\u0000\u0000\u1214\u1215"+
		"\u0001\u0000\u0000\u0000\u1215\u1217\u0001\u0000\u0000\u0000\u1216\u1214"+
		"\u0001\u0000\u0000\u0000\u1217\u121a\u0005\u0213\u0000\u0000\u1218\u1219"+
		"\u0005\u020b\u0000\u0000\u1219\u121b\u0003\u0342\u01a1\u0000\u121a\u1218"+
		"\u0001\u0000\u0000\u0000\u121a\u121b\u0001\u0000\u0000\u0000\u121b\u1293"+
		"\u0001\u0000\u0000\u0000\u121c\u121d\u0005\u01c7\u0000\u0000\u121d\u121e"+
		"\u0005\u0212\u0000\u0000\u121e\u1220\u0003\u0254\u012a\u0000\u121f\u1221"+
		"\u0003\u02b6\u015b\u0000\u1220\u121f\u0001\u0000\u0000\u0000\u1220\u1221"+
		"\u0001\u0000\u0000\u0000\u1221\u1222\u0001\u0000\u0000\u0000\u1222\u1223"+
		"\u0005\u0213\u0000\u0000\u1223\u1293\u0001\u0000\u0000\u0000\u1224\u1225"+
		"\u0005\u01ca\u0000\u0000\u1225\u1226\u0005\u0212\u0000\u0000\u1226\u1227"+
		"\u00077\u0000\u0000\u1227\u1229\u0003\u0270\u0138\u0000\u1228\u122a\u0005"+
		"\u01b8\u0000\u0000\u1229\u1228\u0001\u0000\u0000\u0000\u1229\u122a\u0001"+
		"\u0000\u0000\u0000\u122a\u122b\u0001\u0000\u0000\u0000\u122b\u122e\u0005"+
		"\u0213\u0000\u0000\u122c\u122d\u0005\u020b\u0000\u0000\u122d\u122f\u0003"+
		"\u0342\u01a1\u0000\u122e\u122c\u0001\u0000\u0000\u0000\u122e\u122f\u0001"+
		"\u0000\u0000\u0000\u122f\u1293\u0001\u0000\u0000\u0000\u1230\u1231\u0005"+
		"\u01cb\u0000\u0000\u1231\u1236\u0005\u0212\u0000\u0000\u1232\u1233\u0005"+
		"\u00ed\u0000\u0000\u1233\u1237\u0003\u034e\u01a7\u0000\u1234\u1235\u0005"+
		"\u0085\u0000\u0000\u1235\u1237\u0003\u0270\u0138\u0000\u1236\u1232\u0001"+
		"\u0000\u0000\u0000\u1236\u1234\u0001\u0000\u0000\u0000\u1237\u123a\u0001"+
		"\u0000\u0000\u0000\u1238\u1239\u0005\u0218\u0000\u0000\u1239\u123b\u0003"+
		"\u0270\u0138\u0000\u123a\u1238\u0001\u0000\u0000\u0000\u123a\u123b\u0001"+
		"\u0000\u0000\u0000\u123b\u123c\u0001\u0000\u0000\u0000\u123c\u123f\u0005"+
		"\u0213\u0000\u0000\u123d\u123e\u0005\u020b\u0000\u0000\u123e\u1240\u0003"+
		"\u0342\u01a1\u0000\u123f\u123d\u0001\u0000\u0000\u0000\u123f\u1240\u0001"+
		"\u0000\u0000\u0000\u1240\u1293\u0001\u0000\u0000\u0000\u1241\u1242\u0005"+
		"\u01cc\u0000\u0000\u1242\u1243\u0005\u0212\u0000\u0000\u1243\u1245\u0003"+
		"\u0270\u0138\u0000\u1244\u1246\u0003\u02b6\u015b\u0000\u1245\u1244\u0001"+
		"\u0000\u0000\u0000\u1245\u1246\u0001\u0000\u0000\u0000\u1246\u1247\u0001"+
		"\u0000\u0000\u0000\u1247\u1248\u0005\u0144\u0000\u0000\u1248\u124c\u0005"+
		"M\u0000\u0000\u1249\u124a\u0005\u0104\u0000\u0000\u124a\u124b\u0005\u010e"+
		"\u0000\u0000\u124b\u124d\u0005~\u0000\u0000\u124c\u1249\u0001\u0000\u0000"+
		"\u0000\u124c\u124d\u0001\u0000\u0000\u0000\u124d\u124e\u0001\u0000\u0000"+
		"\u0000\u124e\u1251\u0005\u0213\u0000\u0000\u124f\u1250\u0005\u020b\u0000"+
		"\u0000\u1250\u1252\u0003\u0342\u01a1\u0000\u1251\u124f\u0001\u0000\u0000"+
		"\u0000\u1251\u1252\u0001\u0000\u0000\u0000\u1252\u1293\u0001\u0000\u0000"+
		"\u0000\u1253\u1254\u0005\u01cd\u0000\u0000\u1254\u1255\u0005\u0212\u0000"+
		"\u0000\u1255\u1258\u0003\u0270\u0138\u0000\u1256\u1257\u0005\u0218\u0000"+
		"\u0000\u1257\u1259\u0003\u02c2\u0161\u0000\u1258\u1256\u0001\u0000\u0000"+
		"\u0000\u1258\u1259\u0001\u0000\u0000\u0000\u1259\u125c\u0001\u0000\u0000"+
		"\u0000\u125a\u125b\u0005\u0218\u0000\u0000\u125b\u125d\u0003\u02c4\u0162"+
		"\u0000\u125c\u125a\u0001\u0000\u0000\u0000\u125c\u125d\u0001\u0000\u0000"+
		"\u0000\u125d\u125e\u0001\u0000\u0000\u0000\u125e\u1261\u0005\u0213\u0000"+
		"\u0000\u125f\u1260\u0005\u020b\u0000\u0000\u1260\u1262\u0003\u0342\u01a1"+
		"\u0000\u1261\u125f\u0001\u0000\u0000\u0000\u1261\u1262\u0001\u0000\u0000"+
		"\u0000\u1262\u1293\u0001\u0000\u0000\u0000\u1263\u1264\u0005\u01ce\u0000"+
		"\u0000\u1264\u1265\u0005\u0212\u0000\u0000\u1265\u1266\u00077\u0000\u0000"+
		"\u1266\u1269\u0003\u0270\u0138\u0000\u1267\u1268\u0005\u0014\u0000\u0000"+
		"\u1268\u126a\u0003\u032e\u0197\u0000\u1269\u1267\u0001\u0000\u0000\u0000"+
		"\u1269\u126a\u0001\u0000\u0000\u0000\u126a\u126c\u0001\u0000\u0000\u0000"+
		"\u126b\u126d\u0003\u02c6\u0163\u0000\u126c\u126b\u0001\u0000\u0000\u0000"+
		"\u126c\u126d\u0001\u0000\u0000\u0000\u126d\u126f\u0001\u0000\u0000\u0000"+
		"\u126e\u1270\u0003\u02c8\u0164\u0000\u126f\u126e\u0001\u0000\u0000\u0000"+
		"\u126f\u1270\u0001\u0000\u0000\u0000\u1270\u1272\u0001\u0000\u0000\u0000"+
		"\u1271\u1273\u0003\u02ca\u0165\u0000\u1272\u1271\u0001\u0000\u0000\u0000"+
		"\u1272\u1273\u0001\u0000\u0000\u0000\u1273\u1276\u0001\u0000\u0000\u0000"+
		"\u1274\u1275\u00078\u0000\u0000\u1275\u1277\u0005k\u0000\u0000\u1276\u1274"+
		"\u0001\u0000\u0000\u0000\u1276\u1277\u0001\u0000\u0000\u0000\u1277\u1278"+
		"\u0001\u0000\u0000\u0000\u1278\u127b\u0005\u0213\u0000\u0000\u1279\u127a"+
		"\u0005\u020b\u0000\u0000\u127a\u127c\u0003\u0342\u01a1\u0000\u127b\u1279"+
		"\u0001\u0000\u0000\u0000\u127b\u127c\u0001\u0000\u0000\u0000\u127c\u1293"+
		"\u0001\u0000\u0000\u0000\u127d\u127e\u0005\u01cf\u0000\u0000\u127e\u1280"+
		"\u0005\u0212\u0000\u0000\u127f\u1281\u0003\u02ba\u015d\u0000\u1280\u127f"+
		"\u0001\u0000\u0000\u0000\u1280\u1281\u0001\u0000\u0000\u0000\u1281\u1282"+
		"\u0001\u0000\u0000\u0000\u1282\u1284\u0003\u0270\u0138\u0000\u1283\u1285"+
		"\u0003\u02b6\u015b\u0000\u1284\u1283\u0001\u0000\u0000\u0000\u1284\u1285"+
		"\u0001\u0000\u0000\u0000\u1285\u128b\u0001\u0000\u0000\u0000\u1286\u1287"+
		"\u0005@\u0000\u0000\u1287\u1288\u0003\u02bc\u015e\u0000\u1288\u1289\u0005"+
		"\u0218\u0000\u0000\u1289\u128a\u0003\u02bc\u015e\u0000\u128a\u128c\u0001"+
		"\u0000\u0000\u0000\u128b\u1286\u0001\u0000\u0000\u0000\u128b\u128c\u0001"+
		"\u0000\u0000\u0000\u128c\u128d\u0001\u0000\u0000\u0000\u128d\u1290\u0005"+
		"\u0213\u0000\u0000\u128e\u128f\u0005\u020b\u0000\u0000\u128f\u1291\u0003"+
		"\u0342\u01a1\u0000\u1290\u128e\u0001\u0000\u0000\u0000\u1290\u1291\u0001"+
		"\u0000\u0000\u0000\u1291\u1293\u0001\u0000\u0000\u0000\u1292\u1158\u0001"+
		"\u0000\u0000\u0000\u1292\u115d\u0001\u0000\u0000\u0000\u1292\u1162\u0001"+
		"\u0000\u0000\u0000\u1292\u116f\u0001\u0000\u0000\u0000\u1292\u117d\u0001"+
		"\u0000\u0000\u0000\u1292\u1184\u0001\u0000\u0000\u0000\u1292\u118f\u0001"+
		"\u0000\u0000\u0000\u1292\u1196\u0001\u0000\u0000\u0000\u1292\u119e\u0001"+
		"\u0000\u0000\u0000\u1292\u11a5\u0001\u0000\u0000\u0000\u1292\u11ac\u0001"+
		"\u0000\u0000\u0000\u1292";
	private static final String _serializedATNSegment2 =
		"\u11be\u0001\u0000\u0000\u0000\u1292\u11ce\u0001\u0000\u0000\u0000\u1292"+
		"\u11d8\u0001\u0000\u0000\u0000\u1292\u11e6\u0001\u0000\u0000\u0000\u1292"+
		"\u11f1\u0001\u0000\u0000\u0000\u1292\u1200\u0001\u0000\u0000\u0000\u1292"+
		"\u121c\u0001\u0000\u0000\u0000\u1292\u1224\u0001\u0000\u0000\u0000\u1292"+
		"\u1230\u0001\u0000\u0000\u0000\u1292\u1241\u0001\u0000\u0000\u0000\u1292"+
		"\u1253\u0001\u0000\u0000\u0000\u1292\u1263\u0001\u0000\u0000\u0000\u1292"+
		"\u127d\u0001\u0000\u0000\u0000\u1293\u029d\u0001\u0000\u0000\u0000\u1294"+
		"\u1295\u00079\u0000\u0000\u1295\u029f\u0001\u0000\u0000\u0000\u1296\u1297"+
		"\u0007:\u0000\u0000\u1297\u02a1\u0001\u0000\u0000\u0000\u1298\u1299\u0007"+
		";\u0000\u0000\u1299\u02a3\u0001\u0000\u0000\u0000\u129a\u129b\u0005\u0119"+
		"\u0000\u0000\u129b\u129d\u0005\u0212\u0000\u0000\u129c\u129e\u0003\u018a"+
		"\u00c5\u0000\u129d\u129c\u0001\u0000\u0000\u0000\u129d\u129e\u0001\u0000"+
		"\u0000\u0000\u129e\u12a3\u0001\u0000\u0000\u0000\u129f\u12a1\u0003\u01ce"+
		"\u00e7\u0000\u12a0\u12a2\u0003\u02a6\u0153\u0000\u12a1\u12a0\u0001\u0000"+
		"\u0000\u0000\u12a1\u12a2\u0001\u0000\u0000\u0000\u12a2\u12a4\u0001\u0000"+
		"\u0000\u0000\u12a3\u129f\u0001\u0000\u0000\u0000\u12a3\u12a4\u0001\u0000"+
		"\u0000\u0000\u12a4\u12a5\u0001\u0000\u0000\u0000\u12a5\u12a6\u0005\u0213"+
		"\u0000\u0000\u12a6\u02a5\u0001\u0000\u0000\u0000\u12a7\u12ae\u0003\u02a8"+
		"\u0154\u0000\u12a8\u12a9\u0005!\u0000\u0000\u12a9\u12aa\u0003\u02aa\u0155"+
		"\u0000\u12aa\u12ab\u0005\u0011\u0000\u0000\u12ab\u12ac\u0003\u02aa\u0155"+
		"\u0000\u12ac\u12af\u0001\u0000\u0000\u0000\u12ad\u12af\u0003\u02aa\u0155"+
		"\u0000\u12ae\u12a8\u0001\u0000\u0000\u0000\u12ae\u12ad\u0001\u0000\u0000"+
		"\u0000\u12af\u02a7\u0001\u0000\u0000\u0000\u12b0\u12b1\u0007<\u0000\u0000"+
		"\u12b1\u02a9\u0001\u0000\u0000\u0000\u12b2\u12b3\u0005\u019e\u0000\u0000"+
		"\u12b3\u12ba\u0005\u012b\u0000\u0000\u12b4\u12b5\u0005X\u0000\u0000\u12b5"+
		"\u12ba\u0005\u014b\u0000\u0000\u12b6\u12b7\u0003\u0270\u0138\u0000\u12b7"+
		"\u12b8\u0007=\u0000\u0000\u12b8\u12ba\u0001\u0000\u0000\u0000\u12b9\u12b2"+
		"\u0001\u0000\u0000\u0000\u12b9\u12b4\u0001\u0000\u0000\u0000\u12b9\u12b6"+
		"\u0001\u0000\u0000\u0000\u12ba\u02ab\u0001\u0000\u0000\u0000\u12bb\u12c5"+
		"\u0005\u01aa\u0000\u0000\u12bc\u12c6\u0005\u0215\u0000\u0000\u12bd\u12c2"+
		"\u0003\u02ae\u0157\u0000\u12be\u12bf\u0005\u0218\u0000\u0000\u12bf\u12c1"+
		"\u0003\u02ae\u0157\u0000\u12c0\u12be\u0001\u0000\u0000\u0000\u12c1\u12c4"+
		"\u0001\u0000\u0000\u0000\u12c2\u12c0\u0001\u0000\u0000\u0000\u12c2\u12c3"+
		"\u0001\u0000\u0000\u0000\u12c3\u12c6\u0001\u0000\u0000\u0000\u12c4\u12c2"+
		"\u0001\u0000\u0000\u0000\u12c5\u12bc\u0001\u0000\u0000\u0000\u12c5\u12bd"+
		"\u0001\u0000\u0000\u0000\u12c6\u02ad\u0001\u0000\u0000\u0000\u12c7\u12c9"+
		"\u0005\u00ac\u0000\u0000\u12c8\u12ca\u0005\u0117\u0000\u0000\u12c9\u12c8"+
		"\u0001\u0000\u0000\u0000\u12c9\u12ca\u0001\u0000\u0000\u0000\u12ca\u12cd"+
		"\u0001\u0000\u0000\u0000\u12cb\u12cd\u0005\u0117\u0000\u0000\u12cc\u12c7"+
		"\u0001\u0000\u0000\u0000\u12cc\u12cb\u0001\u0000\u0000\u0000\u12cc\u12cd"+
		"\u0001\u0000\u0000\u0000\u12cd\u12ce\u0001\u0000\u0000\u0000\u12ce\u12d0"+
		"\u0003\u017a\u00bd\u0000\u12cf\u12d1\u0003\u02d8\u016c\u0000\u12d0\u12cf"+
		"\u0001\u0000\u0000\u0000\u12d0\u12d1\u0001\u0000\u0000\u0000\u12d1\u02af"+
		"\u0001\u0000\u0000\u0000\u12d2\u12d3\u0005\u0114\u0000\u0000\u12d3\u12d4"+
		"\u0005.\u0000\u0000\u12d4\u12d5\u0003\u0270\u0138\u0000\u12d5\u02b1\u0001"+
		"\u0000\u0000\u0000\u12d6\u12d7\u0005\u01be\u0000\u0000\u12d7\u12d8\u0005"+
		"\u00a2\u0000\u0000\u12d8\u12d9\u0005\u0212\u0000\u0000\u12d9\u12da\u0003"+
		"\u01ce\u00e7\u0000\u12da\u12db\u0005\u0213\u0000\u0000\u12db\u12de\u0001"+
		"\u0000\u0000\u0000\u12dc\u12de\u0003\u02a4\u0152\u0000\u12dd\u12d6\u0001"+
		"\u0000\u0000\u0000\u12dd\u12dc\u0001\u0000\u0000\u0000\u12de\u02b3\u0001"+
		"\u0000\u0000\u0000\u12df\u12f1\u0005S\u0000\u0000\u12e0\u12e2\u0005\u00e9"+
		"\u0000\u0000\u12e1\u12e3\u0005\u001b\u0000\u0000\u12e2\u12e1\u0001\u0000"+
		"\u0000\u0000\u12e2\u12e3\u0001\u0000\u0000\u0000\u12e3\u12f2\u0001\u0000"+
		"\u0000\u0000\u12e4\u12e5\u0005\u0212\u0000\u0000\u12e5\u12ea\u0003\u02e6"+
		"\u0173\u0000\u12e6\u12e7\u0005\u0218\u0000\u0000\u12e7\u12e9\u0003\u02e6"+
		"\u0173\u0000\u12e8\u12e6\u0001\u0000\u0000\u0000\u12e9\u12ec\u0001\u0000"+
		"\u0000\u0000\u12ea\u12e8\u0001\u0000\u0000\u0000\u12ea\u12eb\u0001\u0000"+
		"\u0000\u0000\u12eb\u12ed\u0001\u0000\u0000\u0000\u12ec\u12ea\u0001\u0000"+
		"\u0000\u0000\u12ed\u12ee\u0005\u0213\u0000\u0000\u12ee\u12ef\u0005\u01ad"+
		"\u0000\u0000\u12ef\u12f0\u0003\u0222\u0111\u0000\u12f0\u12f2\u0001\u0000"+
		"\u0000\u0000\u12f1\u12e0\u0001\u0000\u0000\u0000\u12f1\u12e4\u0001\u0000"+
		"\u0000\u0000\u12f2\u02b5\u0001\u0000\u0000\u0000\u12f3\u12f6\u0005\u0120"+
		"\u0000\u0000\u12f4\u12f5\u0005.\u0000\u0000\u12f5\u12f7\u0005\u01ac\u0000"+
		"\u0000\u12f6\u12f4\u0001\u0000\u0000\u0000\u12f6\u12f7\u0001\u0000\u0000"+
		"\u0000\u12f7\u12f8\u0001\u0000\u0000\u0000\u12f8\u12fa\u0003\u0254\u012a"+
		"\u0000\u12f9\u12fb\u0003\u02d8\u016c\u0000\u12fa\u12f9\u0001\u0000\u0000"+
		"\u0000\u12fa\u12fb\u0001\u0000\u0000\u0000\u12fb\u12fc\u0001\u0000\u0000"+
		"\u0000\u12fc\u12fd\u0005\u0218\u0000\u0000\u12fd\u12ff\u0003\u0254\u012a"+
		"\u0000\u12fe\u1300\u0003\u02d8\u016c\u0000\u12ff\u12fe\u0001\u0000\u0000"+
		"\u0000\u12ff\u1300\u0001\u0000\u0000\u0000\u1300\u02b7\u0001\u0000\u0000"+
		"\u0000\u1301\u1302\u0005\u01c3\u0000\u0000\u1302\u1304\u0005\u0212\u0000"+
		"\u0000\u1303\u1305\u00075\u0000\u0000\u1304\u1303\u0001\u0000\u0000\u0000"+
		"\u1304\u1305\u0001\u0000\u0000\u0000\u1305\u1307\u0001\u0000\u0000\u0000"+
		"\u1306\u1308\u0007>\u0000\u0000\u1307\u1306\u0001\u0000\u0000\u0000\u1307"+
		"\u1308\u0001\u0000\u0000\u0000\u1308\u1309\u0001\u0000\u0000\u0000\u1309"+
		"\u130e\u0003\u02c0\u0160\u0000\u130a\u130b\u0005\u0218\u0000\u0000\u130b"+
		"\u130d\u0003\u02c0\u0160\u0000\u130c\u130a\u0001\u0000\u0000\u0000\u130d"+
		"\u1310\u0001\u0000\u0000\u0000\u130e\u130c\u0001\u0000\u0000\u0000\u130e"+
		"\u130f\u0001\u0000\u0000\u0000\u130f\u1311\u0001\u0000\u0000\u0000\u1310"+
		"\u130e\u0001\u0000\u0000\u0000\u1311\u1312\u0005\u0213\u0000\u0000\u1312"+
		"\u02b9\u0001\u0000\u0000\u0000\u1313\u1314\u0005\u01c9\u0000\u0000\u1314"+
		"\u1318\u0005\u0212\u0000\u0000\u1315\u1316\u0003\u0270\u0138\u0000\u1316"+
		"\u1317\u0003\u02d8\u016c\u0000\u1317\u1319\u0001\u0000\u0000\u0000\u1318"+
		"\u1315\u0001\u0000\u0000\u0000\u1318\u1319\u0001\u0000\u0000\u0000\u1319"+
		"\u1320\u0001\u0000\u0000\u0000\u131a\u131b\u0005\u0218\u0000\u0000\u131b"+
		"\u131c\u0003\u0270\u0138\u0000\u131c\u131d\u0003\u02d8\u016c\u0000\u131d"+
		"\u131f\u0001\u0000\u0000\u0000\u131e\u131a\u0001\u0000\u0000\u0000\u131f"+
		"\u1322\u0001\u0000\u0000\u0000\u1320\u131e\u0001\u0000\u0000\u0000\u1320"+
		"\u1321\u0001\u0000\u0000\u0000\u1321\u1324\u0001\u0000\u0000\u0000\u1322"+
		"\u1320\u0001\u0000\u0000\u0000\u1323\u1325\u0003\u02be\u015f\u0000\u1324"+
		"\u1323\u0001\u0000\u0000\u0000\u1324\u1325\u0001\u0000\u0000\u0000\u1325"+
		"\u1326\u0001\u0000\u0000\u0000\u1326\u1327\u0005\u0213\u0000\u0000\u1327"+
		"\u02bb\u0001\u0000\u0000\u0000\u1328\u1333\u0003\u02e4\u0172\u0000\u1329"+
		"\u132a\u0005\u009a\u0000\u0000\u132a\u1334\u0005\u0115\u0000\u0000\u132b"+
		"\u132e\u0003\u032e\u0197\u0000\u132c\u132d\u0005\u0121\u0000\u0000\u132d"+
		"\u132f\u0003\u0270\u0138\u0000\u132e\u132c\u0001\u0000\u0000\u0000\u132e"+
		"\u132f\u0001\u0000\u0000\u0000\u132f\u1331\u0001\u0000\u0000\u0000\u1330"+
		"\u1332\u0003\u02be\u015f\u0000\u1331\u1330\u0001\u0000\u0000\u0000\u1331"+
		"\u1332\u0001\u0000\u0000\u0000\u1332\u1334\u0001\u0000\u0000\u0000\u1333"+
		"\u1329\u0001\u0000\u0000\u0000\u1333\u132b\u0001\u0000\u0000\u0000\u1334"+
		"\u02bd\u0001\u0000\u0000\u0000\u1335\u1336\u0005j\u0000\u0000\u1336\u1337"+
		"\u0003\u0270\u0138\u0000\u1337\u02bf\u0001\u0000\u0000\u0000\u1338\u133f"+
		"\u0003\u0252\u0129\u0000\u1339\u133d\u0005\u0014\u0000\u0000\u133a\u133e"+
		"\u0003\u0350\u01a8\u0000\u133b\u133c\u0005\u0085\u0000\u0000\u133c\u133e"+
		"\u0003\u026e\u0137\u0000\u133d\u133a\u0001\u0000\u0000\u0000\u133d\u133b"+
		"\u0001\u0000\u0000\u0000\u133e\u1340\u0001\u0000\u0000\u0000\u133f\u1339"+
		"\u0001\u0000\u0000\u0000\u133f\u1340\u0001\u0000\u0000\u0000\u1340\u02c1"+
		"\u0001\u0000\u0000\u0000\u1341\u1345\u0005\u01b3\u0000\u0000\u1342\u1343"+
		"\u0005\u00f7\u0000\u0000\u1343\u1346\u0005\u01ac\u0000\u0000\u1344\u1346"+
		"\u0003\u0254\u012a\u0000\u1345\u1342\u0001\u0000\u0000\u0000\u1345\u1344"+
		"\u0001\u0000\u0000\u0000\u1346\u02c3\u0001\u0000\u0000\u0000\u1347\u134d"+
		"\u0005\u0179\u0000\u0000\u1348\u134e\u0005\u01d1\u0000\u0000\u1349\u134b"+
		"\u0005\u00f7\u0000\u0000\u134a\u134c\u0005\u01ac\u0000\u0000\u134b\u134a"+
		"\u0001\u0000\u0000\u0000\u134b\u134c\u0001\u0000\u0000\u0000\u134c\u134e"+
		"\u0001\u0000\u0000\u0000\u134d\u1348\u0001\u0000\u0000\u0000\u134d\u1349"+
		"\u0001\u0000\u0000\u0000\u134e\u02c5\u0001\u0000\u0000\u0000\u134f\u1350"+
		"\u0005\u0080\u0000\u0000\u1350\u1351\u0003\u0270\u0138\u0000\u1351\u02c7"+
		"\u0001\u0000\u0000\u0000\u1352\u1353\u0005\u01b3\u0000\u0000\u1353\u1354"+
		"\u0003\u0270\u0138\u0000\u1354\u02c9\u0001\u0000\u0000\u0000\u1355\u1356"+
		"\u0005\u00f7\u0000\u0000\u1356\u135e\u0005\u00b0\u0000\u0000\u1357\u135b"+
		"\u0005\u00b0\u0000\u0000\u1358\u1359\u0005\u016d\u0000\u0000\u1359\u135a"+
		"\u0005\u0229\u0000\u0000\u135a\u135c\u0003\u0270\u0138\u0000\u135b\u1358"+
		"\u0001\u0000\u0000\u0000\u135b\u135c\u0001\u0000\u0000\u0000\u135c\u135e"+
		"\u0001\u0000\u0000\u0000\u135d\u1355\u0001\u0000\u0000\u0000\u135d\u1357"+
		"\u0001\u0000\u0000\u0000\u135e\u02cb\u0001\u0000\u0000\u0000\u135f\u1365"+
		"\u0005\u0219\u0000\u0000\u1360\u1365\u0003\u02ce\u0167\u0000\u1361\u1365"+
		"\u0003\u02d2\u0169\u0000\u1362\u1365\u0003\u02d4\u016a\u0000\u1363\u1365"+
		"\u0003\u02d0\u0168\u0000\u1364\u135f\u0001\u0000\u0000\u0000\u1364\u1360"+
		"\u0001\u0000\u0000\u0000\u1364\u1361\u0001\u0000\u0000\u0000\u1364\u1362"+
		"\u0001\u0000\u0000\u0000\u1364\u1363\u0001\u0000\u0000\u0000\u1365\u1367"+
		"\u0001\u0000\u0000\u0000\u1366\u1368\u0005\u021e\u0000\u0000\u1367\u1366"+
		"\u0001\u0000\u0000\u0000\u1367\u1368\u0001\u0000\u0000\u0000\u1368\u02cd"+
		"\u0001\u0000\u0000\u0000\u1369\u136a\u0005\u01ba\u0000\u0000\u136a\u1370"+
		"\u0007?\u0000\u0000\u136b\u136c\u0005\u008d\u0000\u0000\u136c\u136d\u0007"+
		"@\u0000\u0000\u136d\u1371\u0007A\u0000\u0000\u136e\u136f\u0005O\u0000"+
		"\u0000\u136f\u1371\u0007B\u0000\u0000\u1370\u136b\u0001\u0000\u0000\u0000"+
		"\u1370\u136e\u0001\u0000\u0000\u0000\u1371\u02cf\u0001\u0000\u0000\u0000"+
		"\u1372\u1373\u0005\u0163\u0000\u0000\u1373\u1379\u0003\u035c\u01ae\u0000"+
		"\u1374\u137a\u0005\u020e\u0000\u0000\u1375\u137a\u0005\u010e\u0000\u0000"+
		"\u1376\u137a\u0005\u010b\u0000\u0000\u1377\u137a\u0003\u0348\u01a4\u0000"+
		"\u1378\u137a\u0003\u035c\u01ae\u0000\u1379\u1374\u0001\u0000\u0000\u0000"+
		"\u1379\u1375\u0001\u0000\u0000\u0000\u1379\u1376\u0001\u0000\u0000\u0000"+
		"\u1379\u1377\u0001\u0000\u0000\u0000\u1379\u1378\u0001\u0000\u0000\u0000"+
		"\u137a\u02d1\u0001\u0000\u0000\u0000\u137b\u137c\u0005\u008d\u0000\u0000"+
		"\u137c\u02d3\u0001\u0000\u0000\u0000\u137d\u137e\u0005\u0230\u0000\u0000"+
		"\u137e\u02d5\u0001\u0000\u0000\u0000\u137f\u1381\u0007C\u0000\u0000\u1380"+
		"\u1382\u0005\u009a\u0000\u0000\u1381\u1380\u0001\u0000\u0000\u0000\u1381"+
		"\u1382\u0001\u0000\u0000\u0000\u1382\u1383\u0001\u0000\u0000\u0000\u1383"+
		"\u1384\u0003\u0222\u0111\u0000\u1384\u02d7\u0001\u0000\u0000\u0000\u1385"+
		"\u1387\u0005\u0014\u0000\u0000\u1386\u1385\u0001\u0000\u0000\u0000\u1386"+
		"\u1387\u0001\u0000\u0000\u0000\u1387\u138a\u0001\u0000\u0000\u0000\u1388"+
		"\u138b\u0003\u034e\u01a7\u0000\u1389\u138b\u0003\u02dc\u016e\u0000\u138a"+
		"\u1388\u0001\u0000\u0000\u0000\u138a\u1389\u0001\u0000\u0000\u0000\u138b"+
		"\u138e\u0001\u0000\u0000\u0000\u138c\u138e\u0005\u0014\u0000\u0000\u138d"+
		"\u1386\u0001\u0000\u0000\u0000\u138d\u138c\u0001\u0000\u0000\u0000\u138e"+
		"\u02d9\u0001\u0000\u0000\u0000\u138f\u1392\u0003\u034e\u01a7\u0000\u1390"+
		"\u1392\u0003\u02dc\u016e\u0000\u1391\u138f\u0001\u0000\u0000\u0000\u1391"+
		"\u1390\u0001\u0000\u0000\u0000\u1392\u02db\u0001\u0000\u0000\u0000\u1393"+
		"\u1394\u0003\u034c\u01a6\u0000\u1394\u02dd\u0001\u0000\u0000\u0000\u1395"+
		"\u1398\u0005\u01bb\u0000\u0000\u1396\u1399\u0003\u02e0\u0170\u0000\u1397"+
		"\u1399\u0003\u0226\u0113\u0000\u1398\u1396\u0001\u0000\u0000\u0000\u1398"+
		"\u1397\u0001\u0000\u0000\u0000\u1399\u02df\u0001\u0000\u0000\u0000\u139a"+
		"\u139b\u0005X\u0000\u0000\u139b\u139c\u0005\u010a\u0000\u0000\u139c\u139d"+
		"\u0003J%\u0000\u139d\u02e1\u0001\u0000\u0000\u0000\u139e\u139f\u0005\u00c0"+
		"\u0000\u0000\u139f\u13a4\u0003H$\u0000\u13a0\u13a1\u0005\u0218\u0000\u0000"+
		"\u13a1\u13a3\u0003H$\u0000\u13a2\u13a0\u0001\u0000\u0000\u0000\u13a3\u13a6"+
		"\u0001\u0000\u0000\u0000\u13a4\u13a2\u0001\u0000\u0000\u0000\u13a4\u13a5"+
		"\u0001\u0000\u0000\u0000\u13a5\u13b3\u0001\u0000\u0000\u0000\u13a6\u13a4"+
		"\u0001\u0000\u0000\u0000\u13a7\u13a8\u0005-\u0000\u0000\u13a8\u13a9\u0005"+
		"?\u0000\u0000\u13a9\u13aa\u0005\u00c0\u0000\u0000\u13aa\u13af\u0003H$"+
		"\u0000\u13ab\u13ac\u0005\u0218\u0000\u0000\u13ac\u13ae\u0003H$\u0000\u13ad"+
		"\u13ab\u0001\u0000\u0000\u0000\u13ae\u13b1\u0001\u0000\u0000\u0000\u13af"+
		"\u13ad\u0001\u0000\u0000\u0000\u13af\u13b0\u0001\u0000\u0000\u0000\u13b0"+
		"\u13b3\u0001\u0000\u0000\u0000\u13b1\u13af\u0001\u0000\u0000\u0000\u13b2"+
		"\u139e\u0001\u0000\u0000\u0000\u13b2\u13a7\u0001\u0000\u0000\u0000\u13b3"+
		"\u02e3\u0001\u0000\u0000\u0000\u13b4\u13b7\u0003\u034e\u01a7\u0000\u13b5"+
		"\u13b7\u0003\u034c\u01a6\u0000\u13b6\u13b4\u0001\u0000\u0000\u0000\u13b6"+
		"\u13b5\u0001\u0000\u0000\u0000\u13b7\u02e5\u0001\u0000\u0000\u0000\u13b8"+
		"\u13b9\u0003\u034e\u01a7\u0000\u13b9\u02e7\u0001\u0000\u0000\u0000\u13ba"+
		"\u13bb\u0003\u034e\u01a7\u0000\u13bb\u02e9\u0001\u0000\u0000\u0000\u13bc"+
		"\u13bd\u0003\u034e\u01a7\u0000\u13bd\u02eb\u0001\u0000\u0000\u0000\u13be"+
		"\u13bf\u0003\u034e\u01a7\u0000\u13bf\u02ed\u0001\u0000\u0000\u0000\u13c0"+
		"\u13c1\u0003\u034e\u01a7\u0000\u13c1\u02ef\u0001\u0000\u0000\u0000\u13c2"+
		"\u13c3\u0003\u0350\u01a8\u0000\u13c3\u02f1\u0001\u0000\u0000\u0000\u13c4"+
		"\u13c9\u0003\u034e\u01a7\u0000\u13c5\u13c6\u0005\u020b\u0000\u0000\u13c6"+
		"\u13c8\u0003\u0350\u01a8\u0000\u13c7\u13c5\u0001\u0000\u0000\u0000\u13c8"+
		"\u13cb\u0001\u0000\u0000\u0000\u13c9\u13c7\u0001\u0000\u0000\u0000\u13c9"+
		"\u13ca\u0001\u0000\u0000\u0000\u13ca\u13ce\u0001\u0000\u0000\u0000\u13cb"+
		"\u13c9\u0001\u0000\u0000\u0000\u13cc\u13cd\u0005\u021a\u0000\u0000\u13cd"+
		"\u13cf\u0003\u031a\u018d\u0000\u13ce\u13cc\u0001\u0000\u0000\u0000\u13ce"+
		"\u13cf\u0001\u0000\u0000\u0000\u13cf\u02f3\u0001\u0000\u0000\u0000\u13d0"+
		"\u13d1\u0003\u034e\u01a7\u0000\u13d1\u02f5\u0001\u0000\u0000\u0000\u13d2"+
		"\u13d5\u0003\u034e\u01a7\u0000\u13d3\u13d4\u0005\u020b\u0000\u0000\u13d4"+
		"\u13d6\u0003\u0350\u01a8\u0000\u13d5\u13d3\u0001\u0000\u0000\u0000\u13d5"+
		"\u13d6\u0001\u0000\u0000\u0000\u13d6\u02f7\u0001\u0000\u0000\u0000\u13d7"+
		"\u13d8\u0003\u034e\u01a7\u0000\u13d8\u02f9\u0001\u0000\u0000\u0000\u13d9"+
		"\u13da\u0003\u034e\u01a7\u0000\u13da\u02fb\u0001\u0000\u0000\u0000\u13db"+
		"\u13e0\u0003\u034e\u01a7\u0000\u13dc\u13dd\u0005\u020b\u0000\u0000\u13dd"+
		"\u13df\u0003\u0350\u01a8\u0000\u13de\u13dc\u0001\u0000\u0000\u0000\u13df"+
		"\u13e2\u0001\u0000\u0000\u0000\u13e0\u13de\u0001\u0000\u0000\u0000\u13e0"+
		"\u13e1\u0001\u0000\u0000\u0000\u13e1\u02fd\u0001\u0000\u0000\u0000\u13e2"+
		"\u13e0\u0001\u0000\u0000\u0000\u13e3\u13e4\u0003\u034e\u01a7\u0000\u13e4"+
		"\u02ff\u0001\u0000\u0000\u0000\u13e5\u13ea\u0003\u034e\u01a7\u0000\u13e6"+
		"\u13e7\u0005\u020b\u0000\u0000\u13e7\u13e9\u0003\u0350\u01a8\u0000\u13e8"+
		"\u13e6\u0001\u0000\u0000\u0000\u13e9\u13ec\u0001\u0000\u0000\u0000\u13ea"+
		"\u13e8\u0001\u0000\u0000\u0000\u13ea\u13eb\u0001\u0000\u0000\u0000\u13eb"+
		"\u13ef\u0001\u0000\u0000\u0000\u13ec\u13ea\u0001\u0000\u0000\u0000\u13ed"+
		"\u13ee\u0005\u021a\u0000\u0000\u13ee\u13f0\u0003\u031a\u018d\u0000\u13ef"+
		"\u13ed\u0001\u0000\u0000\u0000\u13ef\u13f0\u0001\u0000\u0000\u0000\u13f0"+
		"\u0301\u0001\u0000\u0000\u0000\u13f1\u13f2\u0003\u0350\u01a8\u0000\u13f2"+
		"\u0303\u0001\u0000\u0000\u0000\u13f3\u13f8\u0003\u0350\u01a8\u0000\u13f4"+
		"\u13f5\u0005\u020b\u0000\u0000\u13f5\u13f7\u0003\u0350\u01a8\u0000\u13f6"+
		"\u13f4\u0001\u0000\u0000\u0000\u13f7\u13fa\u0001\u0000\u0000\u0000\u13f8"+
		"\u13f6\u0001\u0000\u0000\u0000\u13f8\u13f9\u0001\u0000\u0000\u0000\u13f9"+
		"\u0305\u0001\u0000\u0000\u0000\u13fa\u13f8\u0001\u0000\u0000\u0000\u13fb"+
		"\u1400\u0003\u0350\u01a8\u0000\u13fc\u13fd\u0005\u020b\u0000\u0000\u13fd"+
		"\u13ff\u0003\u0350\u01a8\u0000\u13fe\u13fc\u0001\u0000\u0000\u0000\u13ff"+
		"\u1402\u0001\u0000\u0000\u0000\u1400\u13fe\u0001\u0000\u0000\u0000\u1400"+
		"\u1401\u0001\u0000\u0000\u0000\u1401\u0307\u0001\u0000\u0000\u0000\u1402"+
		"\u1400\u0001\u0000\u0000\u0000\u1403\u1408\u0003\u034e\u01a7\u0000\u1404"+
		"\u1405\u0005\u020b\u0000\u0000\u1405\u1407\u0003\u0350\u01a8\u0000\u1406"+
		"\u1404\u0001\u0000\u0000\u0000\u1407\u140a\u0001\u0000\u0000\u0000\u1408"+
		"\u1406\u0001\u0000\u0000\u0000\u1408\u1409\u0001\u0000\u0000\u0000\u1409"+
		"\u0309\u0001\u0000\u0000\u0000\u140a\u1408\u0001\u0000\u0000\u0000\u140b"+
		"\u140e\u0003\u034e\u01a7\u0000\u140c\u140d\u0005\u020b\u0000\u0000\u140d"+
		"\u140f\u0003\u0350\u01a8\u0000\u140e\u140c\u0001\u0000\u0000\u0000\u140e"+
		"\u140f\u0001\u0000\u0000\u0000\u140f\u030b\u0001\u0000\u0000\u0000\u1410"+
		"\u1411\u0003\u02f0\u0178\u0000\u1411\u1412\u0005\u020b\u0000\u0000\u1412"+
		"\u1414\u0001\u0000\u0000\u0000\u1413\u1410\u0001\u0000\u0000\u0000\u1413"+
		"\u1414\u0001\u0000\u0000\u0000\u1414\u1415\u0001\u0000\u0000\u0000\u1415"+
		"\u1416\u0003\u0350\u01a8\u0000\u1416\u030d\u0001\u0000\u0000\u0000\u1417"+
		"\u141a\u0003\u034e\u01a7\u0000\u1418\u1419\u0005\u020b\u0000\u0000\u1419"+
		"\u141b\u0003\u0350\u01a8\u0000\u141a\u1418\u0001\u0000\u0000\u0000\u141a"+
		"\u141b\u0001\u0000\u0000\u0000\u141b\u030f\u0001\u0000\u0000\u0000\u141c"+
		"\u141d\u0005\u022c\u0000\u0000\u141d\u141f\u0003\u0320\u0190\u0000\u141e"+
		"\u141c\u0001\u0000\u0000\u0000\u141e\u141f\u0001\u0000\u0000\u0000\u141f"+
		"\u1420\u0001\u0000\u0000\u0000\u1420\u1423\u0003\u0350\u01a8\u0000\u1421"+
		"\u1422\u0005\u020b\u0000\u0000\u1422\u1424\u0003\u0350\u01a8\u0000\u1423"+
		"\u1421\u0001\u0000\u0000\u0000\u1423\u1424\u0001\u0000\u0000\u0000\u1424"+
		"\u1427\u0001\u0000\u0000\u0000\u1425\u1427\u0003\u0336\u019b\u0000\u1426"+
		"\u141e\u0001\u0000\u0000\u0000\u1426\u1425\u0001\u0000\u0000\u0000\u1427"+
		"\u0311\u0001\u0000\u0000\u0000\u1428\u1429\u0003\u034e\u01a7\u0000\u1429"+
		"\u0313\u0001\u0000\u0000\u0000\u142a\u142d\u0003\u034e\u01a7\u0000\u142b"+
		"\u142d\u0003\u0336\u019b\u0000\u142c\u142a\u0001\u0000\u0000\u0000\u142c"+
		"\u142b\u0001\u0000\u0000\u0000\u142d\u0315\u0001\u0000\u0000\u0000\u142e"+
		"\u1431\u0003\u034e\u01a7\u0000\u142f\u1431\u0003\u0336\u019b\u0000\u1430"+
		"\u142e\u0001\u0000\u0000\u0000\u1430\u142f\u0001\u0000\u0000\u0000\u1431"+
		"\u0317\u0001\u0000\u0000\u0000\u1432\u1435\u0003\u034e\u01a7\u0000\u1433"+
		"\u1434\u0005\u020b\u0000\u0000\u1434\u1436\u0003\u0350\u01a8\u0000\u1435"+
		"\u1433\u0001\u0000\u0000\u0000\u1435\u1436\u0001\u0000\u0000\u0000\u1436"+
		"\u0319\u0001\u0000\u0000\u0000\u1437\u1438\u0003\u034e\u01a7\u0000\u1438"+
		"\u031b\u0001\u0000\u0000\u0000\u1439\u143e\u0003\u034e\u01a7\u0000\u143a"+
		"\u143b\u0005\u020b\u0000\u0000\u143b\u143d\u0003\u0350\u01a8\u0000\u143c"+
		"\u143a\u0001\u0000\u0000\u0000\u143d\u1440\u0001\u0000\u0000\u0000\u143e"+
		"\u143c\u0001\u0000\u0000\u0000\u143e\u143f\u0001\u0000\u0000\u0000\u143f"+
		"\u031d\u0001\u0000\u0000\u0000\u1440\u143e\u0001\u0000\u0000\u0000\u1441"+
		"\u1444\u0003\u034e\u01a7\u0000\u1442\u1443\u0005\u020b\u0000\u0000\u1443"+
		"\u1445\u0003\u0350\u01a8\u0000\u1444\u1442\u0001\u0000\u0000\u0000\u1444"+
		"\u1445\u0001\u0000\u0000\u0000\u1445\u1449\u0001\u0000\u0000\u0000\u1446"+
		"\u1447\u0005\u021a\u0000\u0000\u1447\u144a\u0003\u031a\u018d\u0000\u1448"+
		"\u144a\u0003\u02d6\u016b\u0000\u1449\u1446\u0001\u0000\u0000\u0000\u1449"+
		"\u1448\u0001\u0000\u0000\u0000\u1449\u144a\u0001\u0000\u0000\u0000\u144a"+
		"\u031f\u0001\u0000\u0000\u0000\u144b\u1450\u0003\u0350\u01a8\u0000\u144c"+
		"\u144d\u0005\u020b\u0000\u0000\u144d\u144f\u0003\u0350\u01a8\u0000\u144e"+
		"\u144c\u0001\u0000\u0000\u0000\u144f\u1452\u0001\u0000\u0000\u0000\u1450"+
		"\u144e\u0001\u0000\u0000\u0000\u1450\u1451\u0001\u0000\u0000\u0000\u1451"+
		"\u0321\u0001\u0000\u0000\u0000\u1452\u1450\u0001\u0000\u0000\u0000\u1453"+
		"\u1454\u0005\u00c8\u0000\u0000\u1454\u1455\u0005\u0212\u0000\u0000\u1455"+
		"\u1456\u0005\u01f1\u0000\u0000\u1456\u1457\u0007 \u0000\u0000\u1457\u1458"+
		"\u0003\u01ce\u00e7\u0000\u1458\u145a\u0005\u0213\u0000\u0000\u1459\u145b"+
		"\u0003\u02a4\u0152\u0000\u145a\u1459\u0001\u0000\u0000\u0000\u145a\u145b"+
		"\u0001\u0000\u0000\u0000\u145b\u0323\u0001\u0000\u0000\u0000\u145c\u145e"+
		"\u0005\u0212\u0000\u0000\u145d\u145f\u0003\u032c\u0196\u0000\u145e\u145d"+
		"\u0001\u0000\u0000\u0000\u145e\u145f\u0001\u0000\u0000\u0000\u145f\u1464"+
		"\u0001\u0000\u0000\u0000\u1460\u1461\u0005\u0218\u0000\u0000\u1461\u1463"+
		"\u0003\u032c\u0196\u0000\u1462\u1460\u0001\u0000\u0000\u0000\u1463\u1466"+
		"\u0001\u0000\u0000\u0000\u1464\u1462\u0001\u0000\u0000\u0000\u1464\u1465"+
		"\u0001\u0000\u0000\u0000\u1465\u1467\u0001\u0000\u0000\u0000\u1466\u1464"+
		"\u0001\u0000\u0000\u0000\u1467\u1469\u0005\u0213\u0000\u0000\u1468\u146a"+
		"\u0003\u0322\u0191\u0000\u1469\u1468\u0001\u0000\u0000\u0000\u1469\u146a"+
		"\u0001\u0000\u0000\u0000\u146a\u0325\u0001\u0000\u0000\u0000\u146b\u1470"+
		"\u0005\u0212\u0000\u0000\u146c\u146e\u0003\u032c\u0196\u0000\u146d\u146f"+
		"\u0003\u032a\u0195\u0000\u146e\u146d\u0001\u0000\u0000\u0000\u146e\u146f"+
		"\u0001\u0000\u0000\u0000\u146f\u1471\u0001\u0000\u0000\u0000\u1470\u146c"+
		"\u0001\u0000\u0000\u0000\u1470\u1471\u0001\u0000\u0000\u0000\u1471\u1479"+
		"\u0001\u0000\u0000\u0000\u1472\u1473\u0005\u0218\u0000\u0000\u1473\u1475"+
		"\u0003\u032c\u0196\u0000\u1474\u1476\u0003\u032a\u0195\u0000\u1475\u1474"+
		"\u0001\u0000\u0000\u0000\u1475\u1476\u0001\u0000\u0000\u0000\u1476\u1478"+
		"\u0001\u0000\u0000\u0000\u1477\u1472\u0001\u0000\u0000\u0000\u1478\u147b"+
		"\u0001\u0000\u0000\u0000\u1479\u1477\u0001\u0000\u0000\u0000\u1479\u147a"+
		"\u0001\u0000\u0000\u0000\u147a\u147c\u0001\u0000\u0000\u0000\u147b\u1479"+
		"\u0001\u0000\u0000\u0000\u147c\u147e\u0005\u0213\u0000\u0000\u147d\u147f"+
		"\u0003\u0322\u0191\u0000\u147e\u147d\u0001\u0000\u0000\u0000\u147e\u147f"+
		"\u0001\u0000\u0000\u0000\u147f\u0327\u0001\u0000\u0000\u0000\u1480\u1481"+
		"\u0005\u0212\u0000\u0000\u1481\u148e\u0003\"\u0011\u0000\u1482\u1485\u0005"+
		"\u0218\u0000\u0000\u1483\u1486\u0003\u0348\u01a4\u0000\u1484\u1486\u0005"+
		"\u0104\u0000\u0000\u1485\u1483\u0001\u0000\u0000\u0000\u1485\u1484\u0001"+
		"\u0000\u0000\u0000\u1486\u148c\u0001\u0000\u0000\u0000\u1487\u148a\u0005"+
		"\u0218\u0000\u0000\u1488\u148b\u0003\u0348\u01a4\u0000\u1489\u148b\u0005"+
		"\u0104\u0000\u0000\u148a\u1488\u0001\u0000\u0000\u0000\u148a\u1489\u0001"+
		"\u0000\u0000\u0000\u148b\u148d\u0001\u0000\u0000\u0000\u148c\u1487\u0001"+
		"\u0000\u0000\u0000\u148c\u148d\u0001\u0000\u0000\u0000\u148d\u148f\u0001"+
		"\u0000\u0000\u0000\u148e\u1482\u0001\u0000\u0000\u0000\u148e\u148f\u0001"+
		"\u0000\u0000\u0000\u148f\u1490\u0001\u0000\u0000\u0000\u1490\u14a4\u0005"+
		"\u01aa\u0000\u0000\u1491\u1492\u0003\u031e\u018f\u0000\u1492\u1493\u0005"+
		"\u020b\u0000\u0000\u1493\u1494\u0005\u0215\u0000\u0000\u1494\u14a5\u0001"+
		"\u0000\u0000\u0000\u1495\u14a5\u0005\u0215\u0000\u0000\u1496\u1498\u0003"+
		"\u0252\u0129\u0000\u1497\u1499\u0003\u02d8\u016c\u0000\u1498\u1497\u0001"+
		"\u0000\u0000\u0000\u1498\u1499\u0001\u0000\u0000\u0000\u1499\u14a1\u0001"+
		"\u0000\u0000\u0000\u149a\u149b\u0005\u0218\u0000\u0000\u149b\u149d\u0003"+
		"\u0252\u0129\u0000\u149c\u149e\u0003\u02d8\u016c\u0000\u149d\u149c\u0001"+
		"\u0000\u0000\u0000\u149d\u149e\u0001\u0000\u0000\u0000\u149e\u14a0\u0001"+
		"\u0000\u0000\u0000\u149f\u149a\u0001\u0000\u0000\u0000\u14a0\u14a3\u0001"+
		"\u0000\u0000\u0000\u14a1\u149f\u0001\u0000\u0000\u0000\u14a1\u14a2\u0001"+
		"\u0000\u0000\u0000\u14a2\u14a5\u0001\u0000\u0000\u0000\u14a3\u14a1\u0001"+
		"\u0000\u0000\u0000\u14a4\u1491\u0001\u0000\u0000\u0000\u14a4\u1495\u0001"+
		"\u0000\u0000\u0000\u14a4\u1496\u0001\u0000\u0000\u0000\u14a5\u14a6\u0001"+
		"\u0000\u0000\u0000\u14a6\u14a8\u0005\u0213\u0000\u0000\u14a7\u14a9\u0003"+
		"\u0322\u0191\u0000\u14a8\u14a7\u0001\u0000\u0000\u0000\u14a8\u14a9\u0001"+
		"\u0000\u0000\u0000\u14a9\u0329\u0001\u0000\u0000\u0000\u14aa\u14ab\u0007"+
		"D\u0000\u0000\u14ab\u14ac\u0005\u0105\u0000\u0000\u14ac\u032b\u0001\u0000"+
		"\u0000\u0000\u14ad\u14ae\u0003\u034e\u01a7\u0000\u14ae\u14af\u0005\u0229"+
		"\u0000\u0000\u14af\u14b0\u0005\u0226\u0000\u0000\u14b0\u14b2\u0001\u0000"+
		"\u0000\u0000\u14b1\u14ad\u0001\u0000\u0000\u0000\u14b1\u14b2\u0001\u0000"+
		"\u0000\u0000\u14b2\u14b3\u0001\u0000\u0000\u0000\u14b3\u14b4\u0003\u0254"+
		"\u012a\u0000\u14b4\u032d\u0001\u0000\u0000\u0000\u14b5\u14be\u0003\u0330"+
		"\u0198\u0000\u14b6\u14b8\u0005\u0137\u0000\u0000\u14b7\u14b6\u0001\u0000"+
		"\u0000\u0000\u14b7\u14b8\u0001\u0000\u0000\u0000\u14b8\u14b9\u0001\u0000"+
		"\u0000\u0000\u14b9\u14bb\u0003\u0304\u0182\u0000\u14ba\u14bc\u0007\f\u0000"+
		"\u0000\u14bb\u14ba\u0001\u0000\u0000\u0000\u14bb\u14bc\u0001\u0000\u0000"+
		"\u0000\u14bc\u14be\u0001\u0000\u0000\u0000\u14bd\u14b5\u0001\u0000\u0000"+
		"\u0000\u14bd\u14b7\u0001\u0000\u0000\u0000\u14be\u032f\u0001\u0000\u0000"+
		"\u0000\u14bf\u14c1\u0003\u0334\u019a\u0000\u14c0\u14c2\u0003\u0332\u0199"+
		"\u0000\u14c1\u14c0\u0001\u0000\u0000\u0000\u14c1\u14c2\u0001\u0000\u0000"+
		"\u0000\u14c2\u14c9\u0001\u0000\u0000\u0000\u14c3\u14c5\u0005\u01bd\u0000"+
		"\u0000\u14c4\u14c6\u0005\u00d5\u0000\u0000\u14c5\u14c4\u0001\u0000\u0000"+
		"\u0000\u14c5\u14c6\u0001\u0000\u0000\u0000\u14c6\u14c7\u0001\u0000\u0000"+
		"\u0000\u14c7\u14c8\u0005\u018a\u0000\u0000\u14c8\u14ca\u0005\u01d3\u0000"+
		"\u0000\u14c9\u14c3\u0001\u0000\u0000\u0000\u14c9\u14ca\u0001\u0000\u0000"+
		"\u0000\u14ca\u14dc\u0001\u0000\u0000\u0000\u14cb\u14cc\u0005\u00bf\u0000"+
		"\u0000\u14cc\u14d1\u0007E\u0000\u0000\u14cd\u14ce\u0005\u0212\u0000\u0000"+
		"\u14ce\u14cf\u0003\u0254\u012a\u0000\u14cf\u14d0\u0005\u0213\u0000\u0000"+
		"\u14d0\u14d2\u0001\u0000\u0000\u0000\u14d1\u14cd\u0001\u0000\u0000\u0000"+
		"\u14d1\u14d2\u0001\u0000\u0000\u0000\u14d2\u14d3\u0001\u0000\u0000\u0000"+
		"\u14d3\u14d4\u0005\u0194\u0000\u0000\u14d4\u14d9\u0007F\u0000\u0000\u14d5"+
		"\u14d6\u0005\u0212\u0000\u0000\u14d6\u14d7\u0003\u0254\u012a\u0000\u14d7"+
		"\u14d8\u0005\u0213\u0000\u0000\u14d8\u14da\u0001\u0000\u0000\u0000\u14d9"+
		"\u14d5\u0001\u0000\u0000\u0000\u14d9\u14da\u0001\u0000\u0000\u0000\u14da"+
		"\u14dc\u0001\u0000\u0000\u0000\u14db\u14bf\u0001\u0000\u0000\u0000\u14db"+
		"\u14cb\u0001\u0000\u0000\u0000\u14dc\u0331\u0001\u0000\u0000\u0000\u14dd"+
		"\u14de\u0005\u0212\u0000\u0000\u14de\u14e1\u0003\u0348\u01a4\u0000\u14df"+
		"\u14e0\u0005\u0218\u0000\u0000\u14e0\u14e2\u0003\u0348\u01a4\u0000\u14e1"+
		"\u14df\u0001\u0000\u0000\u0000\u14e1\u14e2\u0001\u0000\u0000\u0000\u14e2"+
		"\u14e4\u0001\u0000\u0000\u0000\u14e3\u14e5\u0007G\u0000\u0000\u14e4\u14e3"+
		"\u0001\u0000\u0000\u0000\u14e4\u14e5\u0001\u0000\u0000\u0000\u14e5\u14e6"+
		"\u0001\u0000\u0000\u0000\u14e6\u14e7\u0005\u0213\u0000\u0000\u14e7\u0333"+
		"\u0001\u0000\u0000\u0000\u14e8\u1527\u0005%\u0000\u0000\u14e9\u1527\u0005"+
		"\u0127\u0000\u0000\u14ea\u1527\u0005\u00ef\u0000\u0000\u14eb\u1527\u0005"+
		"$\u0000\u0000\u14ec\u1527\u0005#\u0000\u0000\u14ed\u1527\u0005&\u0000"+
		"\u0000\u14ee\u1527\u0005\u00f0\u0000\u0000\u14ef\u1527\u0005\u0128\u0000"+
		"\u0000\u14f0\u1527\u0005\u0129\u0000\u0000\u14f1\u1527\u0005\u0157\u0000"+
		"\u0000\u14f2\u1527\u0005\u016a\u0000\u0000\u14f3\u1527\u0005\u016b\u0000"+
		"\u0000\u14f4\u1527\u0005\u0108\u0000\u0000\u14f5\u1527\u0005e\u0000\u0000"+
		"\u14f6\u1527\u0005\u00bd\u0000\u0000\u14f7\u1527\u0005\u00bc\u0000\u0000"+
		"\u14f8\u1527\u0005\u0107\u0000\u0000\u14f9\u1527\u0005\u016f\u0000\u0000"+
		"\u14fa\u1527\u0005\u0106\u0000\u0000\u14fb\u1527\u0005f\u0000\u0000\u14fc"+
		"\u14fe\u0005w\u0000\u0000\u14fd\u14ff\u0005\u012c\u0000\u0000\u14fe\u14fd"+
		"\u0001\u0000\u0000\u0000\u14fe\u14ff\u0001\u0000\u0000\u0000\u14ff\u1527"+
		"\u0001\u0000\u0000\u0000\u1500\u1527\u0005\u0097\u0000\u0000\u1501\u1527"+
		"\u0005\u0135\u0000\u0000\u1502\u1527\u0005\u00f2\u0000\u0000\u1503\u1505"+
		"\u0005\u00db\u0000\u0000\u1504\u1506\u0005\u0132\u0000\u0000\u1505\u1504"+
		"\u0001\u0000\u0000\u0000\u1505\u1506\u0001\u0000\u0000\u0000\u1506\u1527"+
		"\u0001\u0000\u0000\u0000\u1507\u1527\u00057\u0000\u0000\u1508\u1527\u0005"+
		"9\u0000\u0000\u1509\u1527\u0005\u01af\u0000\u0000\u150a\u1527\u0005\u01ae"+
		"\u0000\u0000\u150b\u1527\u0005\u0180\u0000\u0000\u150c\u1527\u0005\u0132"+
		"\u0000\u0000\u150d\u1527\u0005*\u0000\u0000\u150e\u1527\u0005_\u0000\u0000"+
		"\u150f\u1527\u0005\u014c\u0000\u0000\u1510\u1527\u0005\u01a8\u0000\u0000"+
		"\u1511\u1527\u0005\u01d0\u0000\u0000\u1512\u1527\u0005\u00eb\u0000\u0000"+
		"\u1513\u1527\u0005`\u0000\u0000\u1514\u1527\u0005\u00a8\u0000\u0000\u1515"+
		"\u1527\u0005\u00e5\u0000\u0000\u1516\u1527\u0005\u0156\u0000\u0000\u1517"+
		"\u1527\u0005\u0190\u0000\u0000\u1518\u1527\u0005\u0191\u0000\u0000\u1519"+
		"\u1527\u0005\u0192\u0000\u0000\u151a\u1527\u0005\u018f\u0000\u0000\u151b"+
		"\u1527\u0005\u018b\u0000\u0000\u151c\u1527\u0005\u018e\u0000\u0000\u151d"+
		"\u1527\u0005\u018d\u0000\u0000\u151e\u1527\u0005\u018c\u0000\u0000\u151f"+
		"\u1527\u0005\u01d2\u0000\u0000\u1520\u1527\u0005y\u0000\u0000\u1521\u1527"+
		"\u0005\"\u0000\u0000\u1522\u1527\u0005\'\u0000\u0000\u1523\u1527\u0005"+
		"<\u0000\u0000\u1524\u1527\u0005\u00f4\u0000\u0000\u1525\u1527\u0005\u00e7"+
		"\u0000\u0000\u1526\u14e8\u0001\u0000\u0000\u0000\u1526\u14e9\u0001\u0000"+
		"\u0000\u0000\u1526\u14ea\u0001\u0000\u0000\u0000\u1526\u14eb\u0001\u0000"+
		"\u0000\u0000\u1526\u14ec\u0001\u0000\u0000\u0000\u1526\u14ed\u0001\u0000"+
		"\u0000\u0000\u1526\u14ee\u0001\u0000\u0000\u0000\u1526\u14ef\u0001\u0000"+
		"\u0000\u0000\u1526\u14f0\u0001\u0000\u0000\u0000\u1526\u14f1\u0001\u0000"+
		"\u0000\u0000\u1526\u14f2\u0001\u0000\u0000\u0000\u1526\u14f3\u0001\u0000"+
		"\u0000\u0000\u1526\u14f4\u0001\u0000\u0000\u0000\u1526\u14f5\u0001\u0000"+
		"\u0000\u0000\u1526\u14f6\u0001\u0000\u0000\u0000\u1526\u14f7\u0001\u0000"+
		"\u0000\u0000\u1526\u14f8\u0001\u0000\u0000\u0000\u1526\u14f9\u0001\u0000"+
		"\u0000\u0000\u1526\u14fa\u0001\u0000\u0000\u0000\u1526\u14fb\u0001\u0000"+
		"\u0000\u0000\u1526\u14fc\u0001\u0000\u0000\u0000\u1526\u1500\u0001\u0000"+
		"\u0000\u0000\u1526\u1501\u0001\u0000\u0000\u0000\u1526\u1502\u0001\u0000"+
		"\u0000\u0000\u1526\u1503\u0001\u0000\u0000\u0000\u1526\u1507\u0001\u0000"+
		"\u0000\u0000\u1526\u1508\u0001\u0000\u0000\u0000\u1526\u1509\u0001\u0000"+
		"\u0000\u0000\u1526\u150a\u0001\u0000\u0000\u0000\u1526\u150b\u0001\u0000"+
		"\u0000\u0000\u1526\u150c\u0001\u0000\u0000\u0000\u1526\u150d\u0001\u0000"+
		"\u0000\u0000\u1526\u150e\u0001\u0000\u0000\u0000\u1526\u150f\u0001\u0000"+
		"\u0000\u0000\u1526\u1510\u0001\u0000\u0000\u0000\u1526\u1511\u0001\u0000"+
		"\u0000\u0000\u1526\u1512\u0001\u0000\u0000\u0000\u1526\u1513\u0001\u0000"+
		"\u0000\u0000\u1526\u1514\u0001\u0000\u0000\u0000\u1526\u1515\u0001\u0000"+
		"\u0000\u0000\u1526\u1516\u0001\u0000\u0000\u0000\u1526\u1517\u0001\u0000"+
		"\u0000\u0000\u1526\u1518\u0001\u0000\u0000\u0000\u1526\u1519\u0001\u0000"+
		"\u0000\u0000\u1526\u151a\u0001\u0000\u0000\u0000\u1526\u151b\u0001\u0000"+
		"\u0000\u0000\u1526\u151c\u0001\u0000\u0000\u0000\u1526\u151d\u0001\u0000"+
		"\u0000\u0000\u1526\u151e\u0001\u0000\u0000\u0000\u1526\u151f\u0001\u0000"+
		"\u0000\u0000\u1526\u1520\u0001\u0000\u0000\u0000\u1526\u1521\u0001\u0000"+
		"\u0000\u0000\u1526\u1522\u0001\u0000\u0000\u0000\u1526\u1523\u0001\u0000"+
		"\u0000\u0000\u1526\u1524\u0001\u0000\u0000\u0000\u1526\u1525\u0001\u0000"+
		"\u0000\u0000\u1527\u0335\u0001\u0000\u0000\u0000\u1528\u152c\u0005\u021c"+
		"\u0000\u0000\u1529\u152a\u0005\u021d\u0000\u0000\u152a\u152c\u0005\u020c"+
		"\u0000\u0000\u152b\u1528\u0001\u0000\u0000\u0000\u152b\u1529\u0001\u0000"+
		"\u0000\u0000\u152c\u1535\u0001\u0000\u0000\u0000\u152d\u152f\u0005\u00b3"+
		"\u0000\u0000\u152e\u152d\u0001\u0000\u0000\u0000\u152e\u152f\u0001\u0000"+
		"\u0000\u0000\u152f\u1533\u0001\u0000\u0000\u0000\u1530\u1534\u0005\u021c"+
		"\u0000\u0000\u1531\u1532\u0005\u021d\u0000\u0000\u1532\u1534\u0005\u020c"+
		"\u0000\u0000\u1533\u1530\u0001\u0000\u0000\u0000\u1533\u1531\u0001\u0000"+
		"\u0000\u0000\u1534\u1536\u0001\u0000\u0000\u0000\u1535\u152e\u0001\u0000"+
		"\u0000\u0000\u1535\u1536\u0001\u0000\u0000\u0000\u1536\u153b\u0001\u0000"+
		"\u0000\u0000\u1537\u1538\u0005\u020b\u0000\u0000\u1538\u153a\u0003\u0342"+
		"\u01a1\u0000\u1539\u1537\u0001\u0000\u0000\u0000\u153a\u153d\u0001\u0000"+
		"\u0000\u0000\u153b\u1539\u0001\u0000\u0000\u0000\u153b\u153c\u0001\u0000"+
		"\u0000\u0000\u153c\u1543\u0001\u0000\u0000\u0000\u153d\u153b\u0001\u0000"+
		"\u0000\u0000\u153e\u1543\u0003\u0338\u019c\u0000\u153f\u1543\u0003\u033a"+
		"\u019d\u0000\u1540\u1543\u0003\u033c\u019e\u0000\u1541\u1543\u0003\u033e"+
		"\u019f\u0000\u1542\u152b\u0001\u0000\u0000\u0000\u1542\u153e\u0001\u0000"+
		"\u0000\u0000\u1542\u153f\u0001\u0000\u0000\u0000\u1542\u1540\u0001\u0000"+
		"\u0000\u0000\u1542\u1541\u0001\u0000\u0000\u0000\u1543\u0337\u0001\u0000"+
		"\u0000\u0000\u1544\u1545\u0005\u0007\u0000\u0000\u1545\u1546\u0005\u01dd"+
		"\u0000\u0000\u1546\u0339\u0001\u0000\u0000\u0000\u1547\u1548\u0005\u01dd"+
		"\u0000\u0000\u1548\u033b\u0001\u0000\u0000\u0000\u1549\u154a\u0005\u0007"+
		"\u0000\u0000\u154a\u154b\u0005\u01de\u0000\u0000\u154b\u033d\u0001\u0000"+
		"\u0000\u0000\u154c\u154d\u0005\u01de\u0000\u0000\u154d\u033f\u0001\u0000"+
		"\u0000\u0000\u154e\u1553\u0003\u0342\u01a1\u0000\u154f\u1550\u0005\u020b"+
		"\u0000\u0000\u1550\u1552\u0003\u0342\u01a1\u0000\u1551\u154f\u0001\u0000"+
		"\u0000\u0000\u1552\u1555\u0001\u0000\u0000\u0000\u1553\u1551\u0001\u0000"+
		"\u0000\u0000\u1553\u1554\u0001\u0000\u0000\u0000\u1554\u0341\u0001\u0000"+
		"\u0000\u0000\u1555\u1553\u0001\u0000\u0000\u0000\u1556\u1557\u0005\u022c"+
		"\u0000\u0000\u1557\u1559\u0003\u0320\u0190\u0000\u1558\u1556\u0001\u0000"+
		"\u0000\u0000\u1558\u1559\u0001\u0000\u0000\u0000\u1559\u155a\u0001\u0000"+
		"\u0000\u0000\u155a\u155f\u0003\u0350\u01a8\u0000\u155b\u155c\u0005\u020b"+
		"\u0000\u0000\u155c\u155e\u0003\u0350\u01a8\u0000\u155d\u155b\u0001\u0000"+
		"\u0000\u0000\u155e\u1561\u0001\u0000\u0000\u0000\u155f\u155d\u0001\u0000"+
		"\u0000\u0000\u155f\u1560\u0001\u0000\u0000\u0000\u1560\u1563\u0001\u0000"+
		"\u0000\u0000\u1561\u155f\u0001\u0000\u0000\u0000\u1562\u1564\u0003\u0324"+
		"\u0192\u0000\u1563\u1562\u0001\u0000\u0000\u0000\u1563\u1564\u0001\u0000"+
		"\u0000\u0000\u1564\u0343\u0001\u0000\u0000\u0000\u1565\u1566\u0005\u022c"+
		"\u0000\u0000\u1566\u1568\u0003\u0320\u0190\u0000\u1567\u1565\u0001\u0000"+
		"\u0000\u0000\u1567\u1568\u0001\u0000\u0000\u0000\u1568\u1569\u0001\u0000"+
		"\u0000\u0000\u1569\u156e\u0003\u0350\u01a8\u0000\u156a\u156b\u0005\u020b"+
		"\u0000\u0000\u156b\u156d\u0003\u0350\u01a8\u0000\u156c\u156a\u0001\u0000"+
		"\u0000\u0000\u156d\u1570\u0001\u0000\u0000\u0000\u156e\u156c\u0001\u0000"+
		"\u0000\u0000\u156e\u156f\u0001\u0000\u0000\u0000\u156f\u0345\u0001\u0000"+
		"\u0000\u0000\u1570\u156e\u0001\u0000\u0000\u0000\u1571\u1574\u0005\u018b"+
		"\u0000\u0000\u1572\u1575\u0003\u034c\u01a6\u0000\u1573\u1575\u0003\u0336"+
		"\u019b\u0000\u1574\u1572\u0001\u0000\u0000\u0000\u1574\u1573\u0001\u0000"+
		"\u0000\u0000\u1575\u157a\u0001\u0000\u0000\u0000\u1576\u1577\u0005\u0017"+
		"\u0000\u0000\u1577\u1578\u0005\u018a\u0000\u0000\u1578\u1579\u0005\u01d3"+
		"\u0000\u0000\u1579\u157b\u0003\u034c\u01a6\u0000\u157a\u1576\u0001\u0000"+
		"\u0000\u0000\u157a\u157b\u0001\u0000\u0000\u0000\u157b\u15b0\u0001\u0000"+
		"\u0000\u0000\u157c\u1580\u0005\u00bf\u0000\u0000\u157d\u1581\u0003\u034c"+
		"\u01a6\u0000\u157e\u1581\u0003\u0336\u019b\u0000\u157f\u1581\u0003\u0342"+
		"\u01a1\u0000\u1580\u157d\u0001\u0000\u0000\u0000\u1580\u157e\u0001\u0000"+
		"\u0000\u0000\u1580\u157f\u0001\u0000\u0000\u0000\u1581\u1582\u0001\u0000"+
		"\u0000\u0000\u1582\u1590\u0007H\u0000\u0000\u1583\u1586\u0005\u0212\u0000"+
		"\u0000\u1584\u1587\u0005\u020c\u0000\u0000\u1585\u1587\u0003\u0336\u019b"+
		"\u0000\u1586\u1584\u0001\u0000\u0000\u0000\u1586\u1585\u0001\u0000\u0000"+
		"\u0000\u1587\u158d\u0001\u0000\u0000\u0000\u1588\u158b\u0005\u0218\u0000"+
		"\u0000\u1589\u158c\u0005\u020c\u0000\u0000\u158a\u158c\u0003\u0336\u019b"+
		"\u0000\u158b\u1589\u0001\u0000\u0000\u0000\u158b\u158a\u0001\u0000\u0000"+
		"\u0000\u158c\u158e\u0001\u0000\u0000\u0000\u158d\u1588\u0001\u0000\u0000"+
		"\u0000\u158d\u158e\u0001\u0000\u0000\u0000\u158e\u158f\u0001\u0000\u0000"+
		"\u0000\u158f\u1591\u0005\u0213\u0000\u0000\u1590\u1583\u0001\u0000\u0000"+
		"\u0000\u1590\u1591\u0001\u0000\u0000\u0000\u1591\u15a1\u0001\u0000\u0000"+
		"\u0000\u1592\u159f\u0005\u0194\u0000\u0000\u1593\u15a0\u0005`\u0000\u0000"+
		"\u1594\u15a0\u0005\u00a8\u0000\u0000\u1595\u15a0\u0005\u00e5\u0000\u0000"+
		"\u1596\u159d\u0005\u0156\u0000\u0000\u1597\u159a\u0005\u0212\u0000\u0000"+
		"\u1598\u159b\u0005\u020c\u0000\u0000\u1599\u159b\u0003\u0336\u019b\u0000"+
		"\u159a\u1598\u0001\u0000\u0000\u0000\u159a\u1599\u0001\u0000\u0000\u0000"+
		"\u159b\u159c\u0001\u0000\u0000\u0000\u159c\u159e\u0005\u0213\u0000\u0000"+
		"\u159d\u1597\u0001\u0000\u0000\u0000\u159d\u159e\u0001\u0000\u0000\u0000"+
		"\u159e\u15a0\u0001\u0000\u0000\u0000\u159f\u1593\u0001\u0000\u0000\u0000"+
		"\u159f\u1594\u0001\u0000\u0000\u0000\u159f\u1595\u0001\u0000\u0000\u0000"+
		"\u159f\u1596\u0001\u0000\u0000\u0000\u15a0\u15a2\u0001\u0000\u0000\u0000"+
		"\u15a1\u1592\u0001\u0000\u0000\u0000\u15a1\u15a2\u0001\u0000\u0000\u0000"+
		"\u15a2\u15b0\u0001\u0000\u0000\u0000\u15a3\u15b0\u0003\u0348\u01a4\u0000"+
		"\u15a4\u15a5\u0005_\u0000\u0000\u15a5\u15b0\u0003\u034c\u01a6\u0000\u15a6"+
		"\u15b0\u0003\u034c\u01a6\u0000\u15a7\u15b0\u0005\u0104\u0000\u0000\u15a8"+
		"\u15b0\u0005\u019b\u0000\u0000\u15a9\u15b0\u0005\u0092\u0000\u0000\u15aa"+
		"\u15b0\u0005b\u0000\u0000\u15ab\u15b0\u0005\u0162\u0000\u0000\u15ac\u15b0"+
		"\u0005\u00e6\u0000\u0000\u15ad\u15b0\u0005\u00e0\u0000\u0000\u15ae\u15b0"+
		"\u0005j\u0000\u0000\u15af\u1571\u0001\u0000\u0000\u0000\u15af\u157c\u0001"+
		"\u0000\u0000\u0000\u15af\u15a3\u0001\u0000\u0000\u0000\u15af\u15a4\u0001"+
		"\u0000\u0000\u0000\u15af\u15a6\u0001\u0000\u0000\u0000\u15af\u15a7\u0001"+
		"\u0000\u0000\u0000\u15af\u15a8\u0001\u0000\u0000\u0000\u15af\u15a9\u0001"+
		"\u0000\u0000\u0000\u15af\u15aa\u0001\u0000\u0000\u0000\u15af\u15ab\u0001"+
		"\u0000\u0000\u0000\u15af\u15ac\u0001\u0000\u0000\u0000\u15af\u15ad\u0001"+
		"\u0000\u0000\u0000\u15af\u15ae\u0001\u0000\u0000\u0000\u15b0\u0347\u0001"+
		"\u0000\u0000\u0000\u15b1\u15b2\u0007I\u0000\u0000\u15b2\u0349\u0001\u0000"+
		"\u0000\u0000\u15b3\u15b4\u0005\u0217\u0000\u0000\u15b4\u15b5\u0003\u0348"+
		"\u01a4\u0000\u15b5\u034b\u0001\u0000\u0000\u0000\u15b6\u15b7\u0007J\u0000"+
		"\u0000\u15b7\u034d\u0001\u0000\u0000\u0000\u15b8\u15b9\u0005\u022c\u0000"+
		"\u0000\u15b9\u15bb\u0003\u0320\u0190\u0000\u15ba\u15b8\u0001\u0000\u0000"+
		"\u0000\u15ba\u15bb\u0001\u0000\u0000\u0000\u15bb\u15bc\u0001\u0000\u0000"+
		"\u0000\u15bc\u15bd\u0003\u0350\u01a8\u0000\u15bd\u034f\u0001\u0000\u0000"+
		"\u0000\u15be\u15c1\u0003\u035c\u01ae\u0000\u15bf\u15c1\u0005\u020f\u0000"+
		"\u0000\u15c0\u15be\u0001\u0000\u0000\u0000\u15c0\u15bf\u0001\u0000\u0000"+
		"\u0000\u15c1\u0351\u0001\u0000\u0000\u0000\u15c2\u15ca\u0005\u0222\u0000"+
		"\u0000\u15c3\u15c4\u0005\u0220\u0000\u0000\u15c4\u15ca\u0005\u0226\u0000"+
		"\u0000\u15c5\u15c6\u0005\u0225\u0000\u0000\u15c6\u15ca\u0005\u0229\u0000"+
		"\u0000\u15c7\u15c8\u0005\u0223\u0000\u0000\u15c8\u15ca\u0005\u0229\u0000"+
		"\u0000\u15c9\u15c2\u0001\u0000\u0000\u0000\u15c9\u15c3\u0001\u0000\u0000"+
		"\u0000\u15c9\u15c5\u0001\u0000\u0000\u0000\u15c9\u15c7\u0001\u0000\u0000"+
		"\u0000\u15ca\u0353\u0001\u0000\u0000\u0000\u15cb\u15cf\u0005\u0221\u0000"+
		"\u0000\u15cc\u15cd\u0005\u0226\u0000\u0000\u15cd\u15cf\u0005\u0229\u0000"+
		"\u0000\u15ce\u15cb\u0001\u0000\u0000\u0000\u15ce\u15cc\u0001\u0000\u0000"+
		"\u0000\u15cf\u0355\u0001\u0000\u0000\u0000\u15d0\u15d4\u0005\u021f\u0000"+
		"\u0000\u15d1\u15d2\u0005\u0220\u0000\u0000\u15d2\u15d4\u0005\u0229\u0000"+
		"\u0000\u15d3\u15d0\u0001\u0000\u0000\u0000\u15d3\u15d1\u0001\u0000\u0000"+
		"\u0000\u15d4\u0357\u0001\u0000\u0000\u0000\u15d5\u15d9\u0005\u0227\u0000"+
		"\u0000\u15d6\u15d7\u0005\u0228\u0000\u0000\u15d7\u15d9\u0005\u0228\u0000"+
		"\u0000\u15d8\u15d5\u0001\u0000\u0000\u0000\u15d8\u15d6\u0001\u0000\u0000"+
		"\u0000\u15d9\u0359\u0001\u0000\u0000\u0000\u15da\u15db\u0005\u0212\u0000"+
		"\u0000\u15db\u15dc\u0005\u0216\u0000\u0000\u15dc\u15dd\u0005\u0213\u0000"+
		"\u0000\u15dd\u035b\u0001\u0000\u0000\u0000\u15de\u15df\u0007K\u0000\u0000"+
		"\u15df\u035d\u0001\u0000\u0000\u0000\u02d4\u0361\u0366\u036e\u0379\u0389"+
		"\u038d\u0392\u0397\u03a0\u03a2\u03a8\u03b1\u03b7\u03bc\u03c1\u03ca\u03cc"+
		"\u03d2\u03dc\u03e4\u03f4\u03f8\u0402\u0409\u0410\u0417\u041c\u0429\u0439"+
		"\u043c\u043f\u0444\u0448\u044e\u045f\u046a\u046e\u0472\u0476\u0479\u047e"+
		"\u0483\u0491\u049c\u04a5\u04b7\u04bc\u04c1\u04cf\u04d6\u04db\u04e0\u04ea"+
		"\u04f5\u04fb\u04fe\u0501\u0504\u0509\u050e\u0514\u0517\u051d\u0531\u0535"+
		"\u0538\u053b\u053e\u0541\u054e\u0552\u0555\u0558\u055f\u0563\u0566\u0569"+
		"\u056d\u0570\u0573\u0576\u0580\u0587\u0589\u0598\u05a4\u05ac\u05af\u05b6"+
		"\u05c5\u05d1\u05db\u05e1\u05eb\u05ee\u05f1\u0608\u060d\u0611\u0619\u0621"+
		"\u0626\u0629\u062b\u062e\u0637\u063a\u063d\u0641\u0644\u064c\u0651\u0656"+
		"\u065d\u0667\u0679\u0680\u068a\u0694\u069b\u06a0\u06a6\u06b0\u06b5\u06bc"+
		"\u06c1\u06c7\u06ca\u06cd\u06de\u06e3\u06ec\u06f1\u06f7\u06fa\u0701\u0704"+
		"\u070b\u0710\u0714\u0719\u071e\u0728\u072e\u0738\u073d\u0744\u074a\u074e"+
		"\u0751\u0754\u0765\u076a\u0772\u0780\u0787\u0791\u0793\u07a8\u07b8\u07c1"+
		"\u07c6\u07ca\u07cd\u07d7\u07e3\u07e9\u07f8\u07fc\u0801\u0804\u0811\u0815"+
		"\u0821\u0826\u082a\u082e\u0834\u0837\u083a\u0855\u085b\u085f\u0865\u0871"+
		"\u087a\u087c\u0882\u0886\u0889\u0892\u089d\u08a1\u08a4\u08a8\u08b0\u08b9"+
		"\u08c2\u08c4\u08e3\u08e7\u08ee\u08f2\u08f6\u08fa\u0906\u090a\u0918\u091e"+
		"\u0925\u092a\u0934\u093a\u093c\u0945\u094f\u0954\u0963\u0967\u096b\u096e"+
		"\u0972\u0977\u097b\u0981\u0989\u0990\u0995\u0997\u099c\u09a1\u09a9\u09b0"+
		"\u09b4\u09b7\u09c5\u09cb\u09d3\u09dd\u09e8\u09eb\u09f2\u09f5\u09fc\u0a07"+
		"\u0a0d\u0a11\u0a1b\u0a1e\u0a24\u0a2f\u0a31\u0a33\u0a36\u0a3a\u0a3d\u0a41"+
		"\u0a45\u0a4a\u0a55\u0a59\u0a61\u0a64\u0a69\u0a6b\u0a74\u0a7e\u0a83\u0a89"+
		"\u0a8d\u0a90\u0a98\u0a9b\u0a9f\u0aa3\u0aa8\u0aab\u0aaf\u0ab3\u0ab7\u0ac3"+
		"\u0ad1\u0ad6\u0ada\u0ae3\u0ae7\u0aef\u0af2\u0af5\u0af9\u0afc\u0aff\u0b02"+
		"\u0b06\u0b11\u0b18\u0b1f\u0b24\u0b29\u0b30\u0b36\u0b40\u0b42\u0b47\u0b4b"+
		"\u0b4e\u0b52\u0b55\u0b57\u0b5a\u0b5d\u0b61\u0b66\u0b6a\u0b6c\u0b79\u0b80"+
		"\u0b8e\u0b91\u0b9b\u0b9f\u0ba7\u0bb3\u0bbd\u0bc2\u0bcc\u0bd4\u0bd7\u0bdd"+
		"\u0be1\u0be6\u0bf0\u0bf5\u0c02\u0c0e\u0c13\u0c1d\u0c22\u0c24\u0c29\u0c2d"+
		"\u0c33\u0c37\u0c44\u0c48\u0c52\u0c55\u0c57\u0c5c\u0c65\u0c72\u0c7a\u0c83"+
		"\u0c87\u0c8c\u0c97\u0c99\u0ca9\u0cae\u0cb4\u0cba\u0ccc\u0cd3\u0cd6\u0cde"+
		"\u0ce7\u0ce9\u0ced\u0cf0\u0cf5\u0cf7\u0cfb\u0d07\u0d10\u0d18\u0d1d\u0d21"+
		"\u0d26\u0d29\u0d31\u0d39\u0d3f\u0d42\u0d45\u0d4d\u0d57\u0d63\u0d6a\u0d6e"+
		"\u0d72\u0d75\u0d78\u0d7d\u0d82\u0d85\u0d90\u0d95\u0d98\u0d9b\u0da1\u0da4"+
		"\u0daa\u0dad\u0db0\u0db5\u0db8\u0dc0\u0dc6\u0dd0\u0dd5\u0dde\u0de8\u0dec"+
		"\u0dee\u0df1\u0dfd\u0e01\u0e04\u0e18\u0e1d\u0e22\u0e29\u0e2c\u0e35\u0e3c"+
		"\u0e41\u0e45\u0e4d\u0e53\u0e5b\u0e5e\u0e66\u0e6e\u0e71\u0e74\u0e7d\u0e83"+
		"\u0e89\u0e8b\u0e98\u0e9a\u0ea3\u0ea5\u0ea9\u0eaf\u0eb3\u0ec1\u0ec7\u0ed8"+
		"\u0ee0\u0ee2\u0eeb\u0ef0\u0ef4\u0efa\u0f03\u0f08\u0f0b\u0f14\u0f1a\u0f1f"+
		"\u0f28\u0f3e\u0f41\u0f49\u0f52\u0f61\u0f66\u0f76\u0f7b\u0f86\u0f98\u0fa2"+
		"\u0fa5\u0fa9\u0faf\u0fb5\u0fbb\u0fc3\u0fc6\u0fcf\u0fd5\u0fda\u0fe5\u0fe9"+
		"\u0ff0\u0ff5\u0ff9\u0fff\u1003\u100d\u1016\u101a\u1023\u1025\u1027\u1038"+
		"\u1040\u104c\u1056\u105e\u1067\u106a\u1071\u1079\u1080\u1084\u108b\u108f"+
		"\u1094\u1098\u10a0\u10a4\u10ab\u10b4\u10c2\u10cf\u10d4\u10ea\u10ee\u10f1"+
		"\u10f8\u10fb\u10ff\u1102\u1109\u110c\u1112\u1115\u1119\u111c\u1123\u1128"+
		"\u1136\u113c\u113e\u1142\u114a\u1156\u115b\u1160\u1166\u1169\u116d\u1177"+
		"\u1187\u118b\u1194\u119a\u11a8\u11b3\u11b7\u11ba\u11c3\u11c9\u11d3\u11db"+
		"\u11de\u11e1\u11ea\u11ef\u11f8\u11fe\u1203\u1206\u120b\u1210\u1214\u121a"+
		"\u1220\u1229\u122e\u1236\u123a\u123f\u1245\u124c\u1251\u1258\u125c\u1261"+
		"\u1269\u126c\u126f\u1272\u1276\u127b\u1280\u1284\u128b\u1290\u1292\u129d"+
		"\u12a1\u12a3\u12ae\u12b9\u12c2\u12c5\u12c9\u12cc\u12d0\u12dd\u12e2\u12ea"+
		"\u12f1\u12f6\u12fa\u12ff\u1304\u1307\u130e\u1318\u1320\u1324\u132e\u1331"+
		"\u1333\u133d\u133f\u1345\u134b\u134d\u135b\u135d\u1364\u1367\u1370\u1379"+
		"\u1381\u1386\u138a\u138d\u1391\u1398\u13a4\u13af\u13b2\u13b6\u13c9\u13ce"+
		"\u13d5\u13e0\u13ea\u13ef\u13f8\u1400\u1408\u140e\u1413\u141a\u141e\u1423"+
		"\u1426\u142c\u1430\u1435\u143e\u1444\u1449\u1450\u145a\u145e\u1464\u1469"+
		"\u146e\u1470\u1475\u1479\u147e\u1485\u148a\u148c\u148e\u1498\u149d\u14a1"+
		"\u14a4\u14a8\u14b1\u14b7\u14bb\u14bd\u14c1\u14c5\u14c9\u14d1\u14d9\u14db"+
		"\u14e1\u14e4\u14fe\u1505\u1526\u152b\u152e\u1533\u1535\u153b\u1542\u1553"+
		"\u1558\u155f\u1563\u1567\u156e\u1574\u157a\u1580\u1586\u158b\u158d\u1590"+
		"\u159a\u159d\u159f\u15a1\u15af\u15ba\u15c0\u15c9\u15ce\u15d3\u15d8";
	public static final String _serializedATN = Utils.join(
		new String[] {
			_serializedATNSegment0,
			_serializedATNSegment1,
			_serializedATNSegment2
		},
		""
	);
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}